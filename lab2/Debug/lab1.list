
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048ac  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08004a5c  08004a5c  00014a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf0  08004cf0  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cf8  08004cf8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf8  08004cf8  00014cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08004d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00000bf8  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ca0  20000ca0  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa19  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ae  00000000  00000000  0002aaf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  0002cba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000768  00000000  00000000  0002d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002322c  00000000  00000000  0002db58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c29f  00000000  00000000  00050d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfc45  00000000  00000000  0005d023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012cc68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024c8  00000000  00000000  0012ccb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004a44 	.word	0x08004a44

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	08004a44 	.word	0x08004a44

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b974 	b.w	8000dac <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468e      	mov	lr, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14d      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4694      	mov	ip, r2
 8000aee:	d969      	bls.n	8000bc4 <__udivmoddi4+0xe8>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b152      	cbz	r2, 8000b0c <__udivmoddi4+0x30>
 8000af6:	fa01 f302 	lsl.w	r3, r1, r2
 8000afa:	f1c2 0120 	rsb	r1, r2, #32
 8000afe:	fa20 f101 	lsr.w	r1, r0, r1
 8000b02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b06:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	0c21      	lsrs	r1, r4, #16
 8000b12:	fbbe f6f8 	udiv	r6, lr, r8
 8000b16:	fa1f f78c 	uxth.w	r7, ip
 8000b1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b22:	fb06 f107 	mul.w	r1, r6, r7
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b32:	f080 811f 	bcs.w	8000d74 <__udivmoddi4+0x298>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 811c 	bls.w	8000d74 <__udivmoddi4+0x298>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b48:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 f707 	mul.w	r7, r0, r7
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x92>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b60:	f080 810a 	bcs.w	8000d78 <__udivmoddi4+0x29c>
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	f240 8107 	bls.w	8000d78 <__udivmoddi4+0x29c>
 8000b6a:	4464      	add	r4, ip
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	1be4      	subs	r4, r4, r7
 8000b74:	2600      	movs	r6, #0
 8000b76:	b11d      	cbz	r5, 8000b80 <__udivmoddi4+0xa4>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xc2>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	f000 80ef 	beq.w	8000d6e <__udivmoddi4+0x292>
 8000b90:	2600      	movs	r6, #0
 8000b92:	e9c5 0100 	strd	r0, r1, [r5]
 8000b96:	4630      	mov	r0, r6
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f683 	clz	r6, r3
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d14a      	bne.n	8000c3c <__udivmoddi4+0x160>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd4>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80f9 	bhi.w	8000da2 <__udivmoddi4+0x2c6>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	469e      	mov	lr, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa4>
 8000bbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xec>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 8092 	bne.w	8000cf6 <__udivmoddi4+0x21a>
 8000bd2:	eba1 010c 	sub.w	r1, r1, ip
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f fe8c 	uxth.w	lr, ip
 8000bde:	2601      	movs	r6, #1
 8000be0:	0c20      	lsrs	r0, r4, #16
 8000be2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bee:	fb0e f003 	mul.w	r0, lr, r3
 8000bf2:	4288      	cmp	r0, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x12c>
 8000bf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x12a>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f200 80cb 	bhi.w	8000d9c <__udivmoddi4+0x2c0>
 8000c06:	4643      	mov	r3, r8
 8000c08:	1a09      	subs	r1, r1, r0
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c10:	fb07 1110 	mls	r1, r7, r0, r1
 8000c14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c18:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x156>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x154>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f200 80bb 	bhi.w	8000da6 <__udivmoddi4+0x2ca>
 8000c30:	4608      	mov	r0, r1
 8000c32:	eba4 040e 	sub.w	r4, r4, lr
 8000c36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x9a>
 8000c3c:	f1c6 0720 	rsb	r7, r6, #32
 8000c40:	40b3      	lsls	r3, r6
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c52:	431c      	orrs	r4, r3
 8000c54:	40f9      	lsrs	r1, r7
 8000c56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c62:	0c20      	lsrs	r0, r4, #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	fb08 f00e 	mul.w	r0, r8, lr
 8000c74:	4288      	cmp	r0, r1
 8000c76:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7a:	d90b      	bls.n	8000c94 <__udivmoddi4+0x1b8>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c84:	f080 8088 	bcs.w	8000d98 <__udivmoddi4+0x2bc>
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	f240 8085 	bls.w	8000d98 <__udivmoddi4+0x2bc>
 8000c8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca8:	458e      	cmp	lr, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x1e2>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb4:	d26c      	bcs.n	8000d90 <__udivmoddi4+0x2b4>
 8000cb6:	458e      	cmp	lr, r1
 8000cb8:	d96a      	bls.n	8000d90 <__udivmoddi4+0x2b4>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc6:	eba1 010e 	sub.w	r1, r1, lr
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	46c8      	mov	r8, r9
 8000cce:	46a6      	mov	lr, r4
 8000cd0:	d356      	bcc.n	8000d80 <__udivmoddi4+0x2a4>
 8000cd2:	d053      	beq.n	8000d7c <__udivmoddi4+0x2a0>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x212>
 8000cd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cda:	eb61 010e 	sbc.w	r1, r1, lr
 8000cde:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce6:	40f1      	lsrs	r1, r6
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	e9c5 7100 	strd	r7, r1, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	fa21 f303 	lsr.w	r3, r1, r3
 8000d04:	4091      	lsls	r1, r2
 8000d06:	4301      	orrs	r1, r0
 8000d08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d14:	fb07 3610 	mls	r6, r7, r0, r3
 8000d18:	0c0b      	lsrs	r3, r1, #16
 8000d1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d22:	429e      	cmp	r6, r3
 8000d24:	fa04 f402 	lsl.w	r4, r4, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x260>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d32:	d22f      	bcs.n	8000d94 <__udivmoddi4+0x2b8>
 8000d34:	429e      	cmp	r6, r3
 8000d36:	d92d      	bls.n	8000d94 <__udivmoddi4+0x2b8>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	b289      	uxth	r1, r1
 8000d40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d44:	fb07 3316 	mls	r3, r7, r6, r3
 8000d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x28a>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d5c:	d216      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d914      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d62:	3e02      	subs	r6, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d6c:	e738      	b.n	8000be0 <__udivmoddi4+0x104>
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e705      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e3      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6f8      	b.n	8000b6e <__udivmoddi4+0x92>
 8000d7c:	454b      	cmp	r3, r9
 8000d7e:	d2a9      	bcs.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d80:	ebb9 0802 	subs.w	r8, r9, r2
 8000d84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7a3      	b.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d8c:	4646      	mov	r6, r8
 8000d8e:	e7ea      	b.n	8000d66 <__udivmoddi4+0x28a>
 8000d90:	4620      	mov	r0, r4
 8000d92:	e794      	b.n	8000cbe <__udivmoddi4+0x1e2>
 8000d94:	4640      	mov	r0, r8
 8000d96:	e7d1      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	e77b      	b.n	8000c94 <__udivmoddi4+0x1b8>
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	e732      	b.n	8000c08 <__udivmoddi4+0x12c>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e709      	b.n	8000bba <__udivmoddi4+0xde>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	e742      	b.n	8000c32 <__udivmoddi4+0x156>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <read_button>:
#include "read_driver.h"

int read_button() {
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

    return (GPIOC->IDR & GPIO_PIN_15) == (uint32_t)GPIO_PIN_RESET;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <read_button+0x20>)
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	bf0c      	ite	eq
 8000dc0:	2301      	moveq	r3, #1
 8000dc2:	2300      	movne	r3, #0
 8000dc4:	b2db      	uxtb	r3, r3

}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40020800 	.word	0x40020800

08000dd4 <transmit_uart_blocking>:

static uint8_t received_data;
static uint8_t* rn = (uint8_t*) "\n\r";
static uint8_t received_buffer[2] = "\0\0";

void transmit_uart_blocking(const uint8_t *buf, size_t size) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart6, buf, size, TIMEOUT_DURATION);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	2364      	movs	r3, #100	; 0x64
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	4803      	ldr	r0, [pc, #12]	; (8000df4 <transmit_uart_blocking+0x20>)
 8000de8:	f001 ffc5 	bl	8002d76 <HAL_UART_Transmit>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000858 	.word	0x20000858

08000df8 <receive_uart_blocking>:

uint8_t receive_uart_blocking(struct ReadBuffer* buffer) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if (HAL_OK == HAL_UART_Receive(&huart6, &received_data, sizeof(uint8_t), TIMEOUT_DURATION)) {
 8000e00:	2364      	movs	r3, #100	; 0x64
 8000e02:	2201      	movs	r2, #1
 8000e04:	4911      	ldr	r1, [pc, #68]	; (8000e4c <receive_uart_blocking+0x54>)
 8000e06:	4812      	ldr	r0, [pc, #72]	; (8000e50 <receive_uart_blocking+0x58>)
 8000e08:	f002 f847 	bl	8002e9a <HAL_UART_Receive>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d116      	bne.n	8000e40 <receive_uart_blocking+0x48>
	  received_buffer[0] = received_data;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <receive_uart_blocking+0x54>)
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <receive_uart_blocking+0x5c>)
 8000e18:	701a      	strb	r2, [r3, #0]
	  buffer->content = received_buffer;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <receive_uart_blocking+0x5c>)
 8000e1e:	601a      	str	r2, [r3, #0]
	  if (received_data == '\r') {
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <receive_uart_blocking+0x54>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b0d      	cmp	r3, #13
 8000e26:	d103      	bne.n	8000e30 <receive_uart_blocking+0x38>
		  buffer->content = rn;
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <receive_uart_blocking+0x60>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	601a      	str	r2, [r3, #0]
	  }
	  transmit_uart_blocking(buffer->content, sizeof(uint16_t));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2102      	movs	r1, #2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ffcc 	bl	8000dd4 <transmit_uart_blocking>
	  return 1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e000      	b.n	8000e42 <receive_uart_blocking+0x4a>
  }
  return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200000c4 	.word	0x200000c4
 8000e50:	20000858 	.word	0x20000858
 8000e54:	200000c8 	.word	0x200000c8
 8000e58:	20000000 	.word	0x20000000

08000e5c <transmit_uart_interrupt>:

static uint8_t received_data;
static uint8_t* rn = (uint8_t*) "\n\r";
static uint8_t received_buffer[2] = "\0\0";

void transmit_uart_interrupt(const uint8_t *buf, size_t size, struct TransmitionState* state) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
	if (state->is_active) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d011      	beq.n	8000e94 <transmit_uart_interrupt+0x38>
		for (size_t i = 0; i < size / sizeof(uint8_t); i++) {
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	e009      	b.n	8000e8a <transmit_uart_interrupt+0x2e>
			insert_in_queue(buf[i]);
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 fe58 	bl	8001b34 <insert_in_queue>
		for (size_t i = 0; i < size / sizeof(uint8_t); i++) {
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	3301      	adds	r3, #1
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d3f1      	bcc.n	8000e76 <transmit_uart_interrupt+0x1a>
		}
	} else {
		HAL_UART_Transmit_IT(&huart6, buf, size);
		state->is_active = 1;
	}
}
 8000e92:	e009      	b.n	8000ea8 <transmit_uart_interrupt+0x4c>
		HAL_UART_Transmit_IT(&huart6, buf, size);
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	461a      	mov	r2, r3
 8000e9a:	68f9      	ldr	r1, [r7, #12]
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <transmit_uart_interrupt+0x54>)
 8000e9e:	f002 f89e 	bl	8002fde <HAL_UART_Transmit_IT>
		state->is_active = 1;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000858 	.word	0x20000858

08000eb4 <receive_uart_interrupt>:

void receive_uart_interrupt() {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, &received_data, sizeof(uint8_t));
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4903      	ldr	r1, [pc, #12]	; (8000ec8 <receive_uart_interrupt+0x14>)
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <receive_uart_interrupt+0x18>)
 8000ebe:	f002 f8d3 	bl	8003068 <HAL_UART_Receive_IT>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000ca 	.word	0x200000ca
 8000ecc:	20000858 	.word	0x20000858

08000ed0 <receive_uart_interrupt_cb>:

void receive_uart_interrupt_cb(struct ReadBuffer* buffer, struct TransmitionState* state) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
	received_buffer[0] = received_data;
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <receive_uart_interrupt_cb+0x40>)
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <receive_uart_interrupt_cb+0x44>)
 8000ee0:	701a      	strb	r2, [r3, #0]
	buffer->content = received_buffer;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <receive_uart_interrupt_cb+0x44>)
 8000ee6:	601a      	str	r2, [r3, #0]
	if (received_data == '\r') {
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <receive_uart_interrupt_cb+0x40>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b0d      	cmp	r3, #13
 8000eee:	d103      	bne.n	8000ef8 <receive_uart_interrupt_cb+0x28>
		buffer->content = rn;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <receive_uart_interrupt_cb+0x48>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	601a      	str	r2, [r3, #0]
	}
	transmit_uart_interrupt(buffer->content, sizeof(uint16_t), state);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	2102      	movs	r1, #2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ffab 	bl	8000e5c <transmit_uart_interrupt>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000ca 	.word	0x200000ca
 8000f14:	200000cc 	.word	0x200000cc
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_GPIO_WritePin_Impl>:

#include <stdio.h>
#include <stdlib.h>

void HAL_GPIO_WritePin_Impl(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	707b      	strb	r3, [r7, #1]
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f2c:	787b      	ldrb	r3, [r7, #1]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_WritePin_Impl+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f38:	e003      	b.n	8000f42 <HAL_GPIO_WritePin_Impl+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f3a:	887b      	ldrh	r3, [r7, #2]
 8000f3c:	041a      	lsls	r2, r3, #16
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	619a      	str	r2, [r3, #24]
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <write_color>:


void write_color(const enum LightState color) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin_Impl(GPIOD, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000f60:	4825      	ldr	r0, [pc, #148]	; (8000ff8 <write_color+0xa8>)
 8000f62:	f7ff ffdb 	bl	8000f1c <HAL_GPIO_WritePin_Impl>

    switch (color) {
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b07      	cmp	r3, #7
 8000f6a:	d841      	bhi.n	8000ff0 <write_color+0xa0>
 8000f6c:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <write_color+0x24>)
 8000f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f72:	bf00      	nop
 8000f74:	08000fa3 	.word	0x08000fa3
 8000f78:	08000fb1 	.word	0x08000fb1
 8000f7c:	08000f95 	.word	0x08000f95
 8000f80:	08000fbf 	.word	0x08000fbf
 8000f84:	08000fa3 	.word	0x08000fa3
 8000f88:	08000fb1 	.word	0x08000fb1
 8000f8c:	08000f95 	.word	0x08000f95
 8000f90:	08000fbf 	.word	0x08000fbf
        case RED:
        case RED_SHORT:
        	HAL_GPIO_WritePin_Impl(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f9a:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <write_color+0xa8>)
 8000f9c:	f7ff ffbe 	bl	8000f1c <HAL_GPIO_WritePin_Impl>
            break;
 8000fa0:	e026      	b.n	8000ff0 <write_color+0xa0>
        case GREEN:
        case GREEN_SHORT:
        	HAL_GPIO_WritePin_Impl(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa8:	4813      	ldr	r0, [pc, #76]	; (8000ff8 <write_color+0xa8>)
 8000faa:	f7ff ffb7 	bl	8000f1c <HAL_GPIO_WritePin_Impl>
            break;
 8000fae:	e01f      	b.n	8000ff0 <write_color+0xa0>
        case YELLOW:
        case YELLOW_SHORT:
        	HAL_GPIO_WritePin_Impl(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fb6:	4810      	ldr	r0, [pc, #64]	; (8000ff8 <write_color+0xa8>)
 8000fb8:	f7ff ffb0 	bl	8000f1c <HAL_GPIO_WritePin_Impl>
            break;
 8000fbc:	e018      	b.n	8000ff0 <write_color+0xa0>
        case GREEN_FLUSHING:
        case GREEN_FLUSHING_SHORT:
            if ((HAL_GetTick() / 300) % 2 == 0) {
 8000fbe:	f000 fed9 	bl	8001d74 <HAL_GetTick>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <write_color+0xac>)
 8000fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d106      	bne.n	8000fe2 <write_color+0x92>
            	HAL_GPIO_WritePin_Impl(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fda:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <write_color+0xa8>)
 8000fdc:	f7ff ff9e 	bl	8000f1c <HAL_GPIO_WritePin_Impl>
            } else {
            	HAL_GPIO_WritePin_Impl(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
            }
            break;
 8000fe0:	e005      	b.n	8000fee <write_color+0x9e>
            	HAL_GPIO_WritePin_Impl(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <write_color+0xa8>)
 8000fea:	f7ff ff97 	bl	8000f1c <HAL_GPIO_WritePin_Impl>
            break;
 8000fee:	bf00      	nop
    }
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40020c00 	.word	0x40020c00
 8000ffc:	1b4e81b5 	.word	0x1b4e81b5

08001000 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_GPIO_Init+0x68>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a16      	ldr	r2, [pc, #88]	; (8001068 <MX_GPIO_Init+0x68>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_GPIO_Init+0x68>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <MX_GPIO_Init+0x68>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <MX_GPIO_Init+0x68>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <MX_GPIO_Init+0x68>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_GPIO_Init+0x68>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a08      	ldr	r2, [pc, #32]	; (8001068 <MX_GPIO_Init+0x68>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_GPIO_Init+0x68>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800

0800106c <switch_to_button_with_timer_flush>:
};

int button_tick = 0;


void switch_to_button_with_timer_flush(enum LightState new_state) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
    state = new_state;
 8001076:	4a06      	ldr	r2, [pc, #24]	; (8001090 <switch_to_button_with_timer_flush+0x24>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	7013      	strb	r3, [r2, #0]
    button_tick = HAL_GetTick();
 800107c:	f000 fe7a 	bl	8001d74 <HAL_GetTick>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <switch_to_button_with_timer_flush+0x28>)
 8001086:	601a      	str	r2, [r3, #0]
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200000ce 	.word	0x200000ce
 8001094:	200000d0 	.word	0x200000d0

08001098 <switch_to_button>:

void switch_to_button(enum LightState new_state) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
    state = new_state;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <switch_to_button+0x1c>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	7013      	strb	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	200000ce 	.word	0x200000ce

080010b8 <HAL_UART_TxCpltCallback>:
struct ReadBuffer read_buffer = {
	.content = (uint8_t*) "\0"
};


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 80010be:	af00      	add	r7, sp, #0
 80010c0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80010c4:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80010c8:	6018      	str	r0, [r3, #0]
  uint8_t temp_buffer[1000];
  int string_length = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  while (!is_queue_empty()) {
 80010d0:	e00d      	b.n	80010ee <HAL_UART_TxCpltCallback+0x36>
	  temp_buffer[string_length++] = take_element_from_queue();
 80010d2:	f8d7 43f4 	ldr.w	r4, [r7, #1012]	; 0x3f4
 80010d6:	1c63      	adds	r3, r4, #1
 80010d8:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 80010dc:	f000 fd5e 	bl	8001b9c <take_element_from_queue>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80010e8:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 80010ec:	551a      	strb	r2, [r3, r4]
  while (!is_queue_empty()) {
 80010ee:	f000 fd89 	bl	8001c04 <is_queue_empty>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0ec      	beq.n	80010d2 <HAL_UART_TxCpltCallback+0x1a>
  }
  if (string_length > 0) {
 80010f8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	dd09      	ble.n	8001114 <HAL_UART_TxCpltCallback+0x5c>
	  HAL_UART_Transmit_IT(&huart6, temp_buffer, string_length);
 8001100:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8001104:	b29a      	uxth	r2, r3
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <HAL_UART_TxCpltCallback+0x6c>)
 800110e:	f001 ff66 	bl	8002fde <HAL_UART_Transmit_IT>
  } else {
	  irq_state.is_active = 0;
  }
}
 8001112:	e002      	b.n	800111a <HAL_UART_TxCpltCallback+0x62>
	  irq_state.is_active = 0;
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <HAL_UART_TxCpltCallback+0x70>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	f507 777f 	add.w	r7, r7, #1020	; 0x3fc
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}
 8001124:	20000858 	.word	0x20000858
 8001128:	200000d4 	.word	0x200000d4

0800112c <HAL_UART_RxCpltCallback>:

char last_entered_command[COMMAND_MAX_SIZE];
char str_buffer[COMMAND_MAX_SIZE];
size_t command_tail_index = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	receive_uart_interrupt_cb(&read_buffer, &irq_state);
 8001134:	491c      	ldr	r1, [pc, #112]	; (80011a8 <HAL_UART_RxCpltCallback+0x7c>)
 8001136:	481d      	ldr	r0, [pc, #116]	; (80011ac <HAL_UART_RxCpltCallback+0x80>)
 8001138:	f7ff feca 	bl	8000ed0 <receive_uart_interrupt_cb>
	if (strcmp((char*)read_buffer.content, "\n\r") == 0) {
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <HAL_UART_RxCpltCallback+0x80>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	491b      	ldr	r1, [pc, #108]	; (80011b0 <HAL_UART_RxCpltCallback+0x84>)
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f854 	bl	80001f0 <strcmp>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d112      	bne.n	8001174 <HAL_UART_RxCpltCallback+0x48>
		last_entered_command[command_tail_index] = '\0';
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_UART_RxCpltCallback+0x88>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a19      	ldr	r2, [pc, #100]	; (80011b8 <HAL_UART_RxCpltCallback+0x8c>)
 8001154:	2100      	movs	r1, #0
 8001156:	54d1      	strb	r1, [r2, r3]
		strcpy(str_buffer, last_entered_command);
 8001158:	4917      	ldr	r1, [pc, #92]	; (80011b8 <HAL_UART_RxCpltCallback+0x8c>)
 800115a:	4818      	ldr	r0, [pc, #96]	; (80011bc <HAL_UART_RxCpltCallback+0x90>)
 800115c:	f002 ff68 	bl	8004030 <strcpy>
		execute_command(str_buffer);
 8001160:	4816      	ldr	r0, [pc, #88]	; (80011bc <HAL_UART_RxCpltCallback+0x90>)
 8001162:	f000 f8b5 	bl	80012d0 <execute_command>
		last_entered_command[0] = '\0';
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <HAL_UART_RxCpltCallback+0x8c>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
		command_tail_index = 0;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_UART_RxCpltCallback+0x88>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
			command_tail_index--;
		} else {
			last_entered_command[command_tail_index++] = read_buffer.content[0];
		}
	}
}
 8001172:	e014      	b.n	800119e <HAL_UART_RxCpltCallback+0x72>
		if (read_buffer.content[0] == 127) {
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <HAL_UART_RxCpltCallback+0x80>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b7f      	cmp	r3, #127	; 0x7f
 800117c:	d105      	bne.n	800118a <HAL_UART_RxCpltCallback+0x5e>
			command_tail_index--;
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HAL_UART_RxCpltCallback+0x88>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3b01      	subs	r3, #1
 8001184:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_UART_RxCpltCallback+0x88>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	e009      	b.n	800119e <HAL_UART_RxCpltCallback+0x72>
			last_entered_command[command_tail_index++] = read_buffer.content[0];
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_UART_RxCpltCallback+0x80>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_UART_RxCpltCallback+0x88>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	1c59      	adds	r1, r3, #1
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <HAL_UART_RxCpltCallback+0x88>)
 8001196:	6001      	str	r1, [r0, #0]
 8001198:	7811      	ldrb	r1, [r2, #0]
 800119a:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_UART_RxCpltCallback+0x8c>)
 800119c:	54d1      	strb	r1, [r2, r3]
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000d4 	.word	0x200000d4
 80011ac:	20000028 	.word	0x20000028
 80011b0:	08004a8c 	.word	0x08004a8c
 80011b4:	20000850 	.word	0x20000850
 80011b8:	200000d8 	.word	0x200000d8
 80011bc:	20000494 	.word	0x20000494

080011c0 <print>:
 * set interrupts on или set interrupts off – включить или выключить прерывания.
 */

uint8_t interrupts_mode = 1;

void print(char* content) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	size_t length = strlen(content);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff f81b 	bl	8000204 <strlen>
 80011ce:	60f8      	str	r0, [r7, #12]
	if (interrupts_mode) {
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <print+0x34>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <print+0x24>
		transmit_uart_interrupt((uint8_t *) content, length, &irq_state);
 80011d8:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <print+0x38>)
 80011da:	68f9      	ldr	r1, [r7, #12]
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff fe3d 	bl	8000e5c <transmit_uart_interrupt>
	} else {
		transmit_uart_blocking((uint8_t *) content, length);
	}
}
 80011e2:	e003      	b.n	80011ec <print+0x2c>
		transmit_uart_blocking((uint8_t *) content, length);
 80011e4:	68f9      	ldr	r1, [r7, #12]
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fdf4 	bl	8000dd4 <transmit_uart_blocking>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000034 	.word	0x20000034
 80011f8:	200000d4 	.word	0x200000d4

080011fc <read>:



void read() {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
	if (interrupts_mode) {
 8001202:	4b22      	ldr	r3, [pc, #136]	; (800128c <read+0x90>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <read+0x14>
		receive_uart_interrupt();
 800120a:	f7ff fe53 	bl	8000eb4 <receive_uart_interrupt>
				}

			}
		}
	}
}
 800120e:	e038      	b.n	8001282 <read+0x86>
		uint8_t received = receive_uart_blocking(&read_buffer);
 8001210:	481f      	ldr	r0, [pc, #124]	; (8001290 <read+0x94>)
 8001212:	f7ff fdf1 	bl	8000df8 <receive_uart_blocking>
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
		if (received) {
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d030      	beq.n	8001282 <read+0x86>
			if (strcmp((char*)read_buffer.content, "\n\r") == 0) {
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <read+0x94>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	491b      	ldr	r1, [pc, #108]	; (8001294 <read+0x98>)
 8001226:	4618      	mov	r0, r3
 8001228:	f7fe ffe2 	bl	80001f0 <strcmp>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d112      	bne.n	8001258 <read+0x5c>
				last_entered_command[command_tail_index] = '\0';
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <read+0x9c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a19      	ldr	r2, [pc, #100]	; (800129c <read+0xa0>)
 8001238:	2100      	movs	r1, #0
 800123a:	54d1      	strb	r1, [r2, r3]
				strcpy(str_buffer, last_entered_command);
 800123c:	4917      	ldr	r1, [pc, #92]	; (800129c <read+0xa0>)
 800123e:	4818      	ldr	r0, [pc, #96]	; (80012a0 <read+0xa4>)
 8001240:	f002 fef6 	bl	8004030 <strcpy>
				execute_command(str_buffer);
 8001244:	4816      	ldr	r0, [pc, #88]	; (80012a0 <read+0xa4>)
 8001246:	f000 f843 	bl	80012d0 <execute_command>
				last_entered_command[0] = '\0';
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <read+0xa0>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
				command_tail_index = 0;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <read+0x9c>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
}
 8001256:	e014      	b.n	8001282 <read+0x86>
				if (read_buffer.content[0] == 127) {
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <read+0x94>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b7f      	cmp	r3, #127	; 0x7f
 8001260:	d105      	bne.n	800126e <read+0x72>
					command_tail_index--;
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <read+0x9c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	3b01      	subs	r3, #1
 8001268:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <read+0x9c>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	e009      	b.n	8001282 <read+0x86>
					last_entered_command[command_tail_index++] = read_buffer.content[0];
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <read+0x94>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <read+0x9c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	1c59      	adds	r1, r3, #1
 8001278:	4807      	ldr	r0, [pc, #28]	; (8001298 <read+0x9c>)
 800127a:	6001      	str	r1, [r0, #0]
 800127c:	7811      	ldrb	r1, [r2, #0]
 800127e:	4a07      	ldr	r2, [pc, #28]	; (800129c <read+0xa0>)
 8001280:	54d1      	strb	r1, [r2, r3]
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000034 	.word	0x20000034
 8001290:	20000028 	.word	0x20000028
 8001294:	08004a8c 	.word	0x08004a8c
 8001298:	20000850 	.word	0x20000850
 800129c:	200000d8 	.word	0x200000d8
 80012a0:	20000494 	.word	0x20000494

080012a4 <debug_command_info>:

void debug_command_info(char* command) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	print("command `");
 80012ac:	4806      	ldr	r0, [pc, #24]	; (80012c8 <debug_command_info+0x24>)
 80012ae:	f7ff ff87 	bl	80011c0 <print>
	print(command);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ff84 	bl	80011c0 <print>
	print("` executed. \n");
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <debug_command_info+0x28>)
 80012ba:	f7ff ff81 	bl	80011c0 <print>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	08004a90 	.word	0x08004a90
 80012cc:	08004a9c 	.word	0x08004a9c

080012d0 <execute_command>:

void execute_command(char* command) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

	if (strcmp(command, "?") == 0) {
 80012d8:	4975      	ldr	r1, [pc, #468]	; (80014b0 <execute_command+0x1e0>)
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7fe ff88 	bl	80001f0 <strcmp>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d149      	bne.n	800137a <execute_command+0xaa>
		debug_command_info(command);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffdc 	bl	80012a4 <debug_command_info>
		char buffer[10];
		print("State: ");
 80012ec:	4871      	ldr	r0, [pc, #452]	; (80014b4 <execute_command+0x1e4>)
 80012ee:	f7ff ff67 	bl	80011c0 <print>
		print(enumStrings[state]);
 80012f2:	4b71      	ldr	r3, [pc, #452]	; (80014b8 <execute_command+0x1e8>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b70      	ldr	r3, [pc, #448]	; (80014bc <execute_command+0x1ec>)
 80012fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff5e 	bl	80011c0 <print>
		print("\n");
 8001304:	486e      	ldr	r0, [pc, #440]	; (80014c0 <execute_command+0x1f0>)
 8001306:	f7ff ff5b 	bl	80011c0 <print>
		print("Mode: ");
 800130a:	486e      	ldr	r0, [pc, #440]	; (80014c4 <execute_command+0x1f4>)
 800130c:	f7ff ff58 	bl	80011c0 <print>
		sprintf(buffer, "%d", button_mode);
 8001310:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <execute_command+0x1f8>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	496c      	ldr	r1, [pc, #432]	; (80014cc <execute_command+0x1fc>)
 800131c:	4618      	mov	r0, r3
 800131e:	f002 fe67 	bl	8003ff0 <siprintf>
		print(buffer);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff4a 	bl	80011c0 <print>
		print("\n");
 800132c:	4864      	ldr	r0, [pc, #400]	; (80014c0 <execute_command+0x1f0>)
 800132e:	f7ff ff47 	bl	80011c0 <print>
		print("Timeout: ");
 8001332:	4867      	ldr	r0, [pc, #412]	; (80014d0 <execute_command+0x200>)
 8001334:	f7ff ff44 	bl	80011c0 <print>
		sprintf(buffer, "%d", timeout);
 8001338:	4b66      	ldr	r3, [pc, #408]	; (80014d4 <execute_command+0x204>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4962      	ldr	r1, [pc, #392]	; (80014cc <execute_command+0x1fc>)
 8001342:	4618      	mov	r0, r3
 8001344:	f002 fe54 	bl	8003ff0 <siprintf>
		print(buffer);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff37 	bl	80011c0 <print>
		print("\n");
 8001352:	485b      	ldr	r0, [pc, #364]	; (80014c0 <execute_command+0x1f0>)
 8001354:	f7ff ff34 	bl	80011c0 <print>
		print("Interrupt / Polling: ");
 8001358:	485f      	ldr	r0, [pc, #380]	; (80014d8 <execute_command+0x208>)
 800135a:	f7ff ff31 	bl	80011c0 <print>
		print(interrupts_mode ? "I" : "P");
 800135e:	4b5f      	ldr	r3, [pc, #380]	; (80014dc <execute_command+0x20c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <execute_command+0x9a>
 8001366:	4b5e      	ldr	r3, [pc, #376]	; (80014e0 <execute_command+0x210>)
 8001368:	e000      	b.n	800136c <execute_command+0x9c>
 800136a:	4b5e      	ldr	r3, [pc, #376]	; (80014e4 <execute_command+0x214>)
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff27 	bl	80011c0 <print>
		print("\n");
 8001372:	4853      	ldr	r0, [pc, #332]	; (80014c0 <execute_command+0x1f0>)
 8001374:	f7ff ff24 	bl	80011c0 <print>
 8001378:	e096      	b.n	80014a8 <execute_command+0x1d8>
	} else if (strcmp(command, "set interrupts on") == 0) {
 800137a:	495b      	ldr	r1, [pc, #364]	; (80014e8 <execute_command+0x218>)
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7fe ff37 	bl	80001f0 <strcmp>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d106      	bne.n	8001396 <execute_command+0xc6>
		debug_command_info(command);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff8b 	bl	80012a4 <debug_command_info>
		interrupts_mode = 1;
 800138e:	4b53      	ldr	r3, [pc, #332]	; (80014dc <execute_command+0x20c>)
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	e088      	b.n	80014a8 <execute_command+0x1d8>
	} else if (strcmp(command, "set interrupts off") == 0) {
 8001396:	4955      	ldr	r1, [pc, #340]	; (80014ec <execute_command+0x21c>)
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7fe ff29 	bl	80001f0 <strcmp>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d106      	bne.n	80013b2 <execute_command+0xe2>
		debug_command_info(command);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff7d 	bl	80012a4 <debug_command_info>
		interrupts_mode = 0;
 80013aa:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <execute_command+0x20c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	e07a      	b.n	80014a8 <execute_command+0x1d8>
	} else if (strcmp(command, "set mode 1") == 0) {
 80013b2:	494f      	ldr	r1, [pc, #316]	; (80014f0 <execute_command+0x220>)
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7fe ff1b 	bl	80001f0 <strcmp>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d106      	bne.n	80013ce <execute_command+0xfe>
		debug_command_info(command);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff6f 	bl	80012a4 <debug_command_info>
		button_mode = 1;
 80013c6:	4b40      	ldr	r3, [pc, #256]	; (80014c8 <execute_command+0x1f8>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
 80013cc:	e06c      	b.n	80014a8 <execute_command+0x1d8>
	} else if (strcmp(command, "set mode 2") == 0) {
 80013ce:	4949      	ldr	r1, [pc, #292]	; (80014f4 <execute_command+0x224>)
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7fe ff0d 	bl	80001f0 <strcmp>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d106      	bne.n	80013ea <execute_command+0x11a>
		debug_command_info(command);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff61 	bl	80012a4 <debug_command_info>
		button_mode = 2;
 80013e2:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <execute_command+0x1f8>)
 80013e4:	2202      	movs	r2, #2
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	e05e      	b.n	80014a8 <execute_command+0x1d8>
	} else if (prefix("set timeout ", command)) {
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4842      	ldr	r0, [pc, #264]	; (80014f8 <execute_command+0x228>)
 80013ee:	f000 fc19 	bl	8001c24 <prefix>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d04e      	beq.n	8001496 <execute_command+0x1c6>
		char timeout_number_as_str[10];
		strncpy(timeout_number_as_str, &command[12], 10);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f103 010c 	add.w	r1, r3, #12
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	220a      	movs	r2, #10
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fe2f 	bl	8004068 <strncpy>
		for (size_t i = 0; i < strlen(timeout_number_as_str); i++) {
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
 800140e:	e01e      	b.n	800144e <execute_command+0x17e>
			if (timeout_number_as_str[i] != '\0' && (timeout_number_as_str[i] < '0' || timeout_number_as_str[i] > '9')) {
 8001410:	f107 0208 	add.w	r2, r7, #8
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d014      	beq.n	8001448 <execute_command+0x178>
 800141e:	f107 0208 	add.w	r2, r7, #8
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b2f      	cmp	r3, #47	; 0x2f
 800142a:	d906      	bls.n	800143a <execute_command+0x16a>
 800142c:	f107 0208 	add.w	r2, r7, #8
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	4413      	add	r3, r2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b39      	cmp	r3, #57	; 0x39
 8001438:	d906      	bls.n	8001448 <execute_command+0x178>
				print("timeout must be a positive number less than 1000 seconds");
 800143a:	4830      	ldr	r0, [pc, #192]	; (80014fc <execute_command+0x22c>)
 800143c:	f7ff fec0 	bl	80011c0 <print>
				print("\n");
 8001440:	481f      	ldr	r0, [pc, #124]	; (80014c0 <execute_command+0x1f0>)
 8001442:	f7ff febd 	bl	80011c0 <print>
 8001446:	e02f      	b.n	80014a8 <execute_command+0x1d8>
		for (size_t i = 0; i < strlen(timeout_number_as_str); i++) {
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	3301      	adds	r3, #1
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	4618      	mov	r0, r3
 8001454:	f7fe fed6 	bl	8000204 <strlen>
 8001458:	4602      	mov	r2, r0
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	4293      	cmp	r3, r2
 800145e:	d3d7      	bcc.n	8001410 <execute_command+0x140>
				return;
			}
		}
		int timeout_number = atoi(timeout_number_as_str);
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	4618      	mov	r0, r3
 8001466:	f002 fd8d 	bl	8003f84 <atoi>
 800146a:	6238      	str	r0, [r7, #32]
		if (timeout_number >= 0 && timeout_number < 1000) {
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0a      	blt.n	8001488 <execute_command+0x1b8>
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001478:	da06      	bge.n	8001488 <execute_command+0x1b8>
			debug_command_info(command);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ff12 	bl	80012a4 <debug_command_info>
			timeout = timeout_number;
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <execute_command+0x204>)
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e00f      	b.n	80014a8 <execute_command+0x1d8>
		} else {
			print("timeout must be a positive number less than 1000 seconds");
 8001488:	481c      	ldr	r0, [pc, #112]	; (80014fc <execute_command+0x22c>)
 800148a:	f7ff fe99 	bl	80011c0 <print>
			print("\n");
 800148e:	480c      	ldr	r0, [pc, #48]	; (80014c0 <execute_command+0x1f0>)
 8001490:	f7ff fe96 	bl	80011c0 <print>
 8001494:	e008      	b.n	80014a8 <execute_command+0x1d8>
		}
	} else {
		print("cannot recognize this command: ");
 8001496:	481a      	ldr	r0, [pc, #104]	; (8001500 <execute_command+0x230>)
 8001498:	f7ff fe92 	bl	80011c0 <print>
		print(command);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fe8f 	bl	80011c0 <print>
		print("\n");
 80014a2:	4807      	ldr	r0, [pc, #28]	; (80014c0 <execute_command+0x1f0>)
 80014a4:	f7ff fe8c 	bl	80011c0 <print>
	}
}
 80014a8:	3728      	adds	r7, #40	; 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	08004aac 	.word	0x08004aac
 80014b4:	08004ab0 	.word	0x08004ab0
 80014b8:	200000ce 	.word	0x200000ce
 80014bc:	20000008 	.word	0x20000008
 80014c0:	08004ab8 	.word	0x08004ab8
 80014c4:	08004abc 	.word	0x08004abc
 80014c8:	2000002c 	.word	0x2000002c
 80014cc:	08004ac4 	.word	0x08004ac4
 80014d0:	08004ac8 	.word	0x08004ac8
 80014d4:	20000030 	.word	0x20000030
 80014d8:	08004ad4 	.word	0x08004ad4
 80014dc:	20000034 	.word	0x20000034
 80014e0:	08004aec 	.word	0x08004aec
 80014e4:	08004af0 	.word	0x08004af0
 80014e8:	08004af4 	.word	0x08004af4
 80014ec:	08004b08 	.word	0x08004b08
 80014f0:	08004b1c 	.word	0x08004b1c
 80014f4:	08004b28 	.word	0x08004b28
 80014f8:	08004b34 	.word	0x08004b34
 80014fc:	08004b44 	.word	0x08004b44
 8001500:	08004b80 	.word	0x08004b80

08001504 <get_time_of_color>:

int get_time_of_color(enum LightState current_state) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
    switch (current_state) {
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b07      	cmp	r3, #7
 8001512:	d839      	bhi.n	8001588 <get_time_of_color+0x84>
 8001514:	a201      	add	r2, pc, #4	; (adr r2, 800151c <get_time_of_color+0x18>)
 8001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151a:	bf00      	nop
 800151c:	08001543 	.word	0x08001543
 8001520:	0800153d 	.word	0x0800153d
 8001524:	0800154f 	.word	0x0800154f
 8001528:	08001549 	.word	0x08001549
 800152c:	08001543 	.word	0x08001543
 8001530:	0800153d 	.word	0x0800153d
 8001534:	0800155d 	.word	0x0800155d
 8001538:	08001549 	.word	0x08001549
        case YELLOW_SHORT:
        case YELLOW:
            return YELLOW_TIME;
 800153c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001540:	e028      	b.n	8001594 <get_time_of_color+0x90>
        case GREEN:
        case GREEN_SHORT:
            return GREEN_TIME;
 8001542:	f641 3358 	movw	r3, #7000	; 0x1b58
 8001546:	e025      	b.n	8001594 <get_time_of_color+0x90>
        case GREEN_FLUSHING:
        case GREEN_FLUSHING_SHORT:
            return GREEN_FLUSHING_TIME;
 8001548:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800154c:	e022      	b.n	8001594 <get_time_of_color+0x90>
        case RED:
            return timeout * 1000;
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <get_time_of_color+0x98>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	e01b      	b.n	8001594 <get_time_of_color+0x90>
        case RED_SHORT:
            return timeout * 1000 / 4.0;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <get_time_of_color+0x98>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001564:	fb02 f303 	mul.w	r3, r2, r3
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ffeb 	bl	8000544 <__aeabi_ui2d>
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <get_time_of_color+0x9c>)
 8001574:	f7ff f98a 	bl	800088c <__aeabi_ddiv>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fa6c 	bl	8000a5c <__aeabi_d2iz>
 8001584:	4603      	mov	r3, r0
 8001586:	e005      	b.n	8001594 <get_time_of_color+0x90>
    }
    return timeout * 1000;
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <get_time_of_color+0x98>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001590:	fb02 f303 	mul.w	r3, r2, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000030 	.word	0x20000030
 80015a0:	40100000 	.word	0x40100000

080015a4 <ready_to_switch>:

int ready_to_switch() {
 80015a4:	b598      	push	{r3, r4, r7, lr}
 80015a6:	af00      	add	r7, sp, #0
    return (HAL_GetTick() - button_tick) > get_time_of_color(state);
 80015a8:	f000 fbe4 	bl	8001d74 <HAL_GetTick>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <ready_to_switch+0x2c>)
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	1a9c      	subs	r4, r3, r2
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <ready_to_switch+0x30>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ffa3 	bl	8001504 <get_time_of_color>
 80015be:	4603      	mov	r3, r0
 80015c0:	429c      	cmp	r4, r3
 80015c2:	bf8c      	ite	hi
 80015c4:	2301      	movhi	r3, #1
 80015c6:	2300      	movls	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd98      	pop	{r3, r4, r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200000d0 	.word	0x200000d0
 80015d4:	200000ce 	.word	0x200000ce

080015d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b090      	sub	sp, #64	; 0x40
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015de:	f000 fb63 	bl	8001ca8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e2:	f000 f923 	bl	800182c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e6:	f7ff fd0b 	bl	8001000 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80015ea:	f000 fa29 	bl	8001a40 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b84      	ldr	r3, [pc, #528]	; (8001814 <main+0x23c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a83      	ldr	r2, [pc, #524]	; (8001814 <main+0x23c>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b81      	ldr	r3, [pc, #516]	; (8001814 <main+0x23c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b7d      	ldr	r3, [pc, #500]	; (8001814 <main+0x23c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a7c      	ldr	r2, [pc, #496]	; (8001814 <main+0x23c>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b7a      	ldr	r3, [pc, #488]	; (8001814 <main+0x23c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b76      	ldr	r3, [pc, #472]	; (8001814 <main+0x23c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a75      	ldr	r2, [pc, #468]	; (8001814 <main+0x23c>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b73      	ldr	r3, [pc, #460]	; (8001814 <main+0x23c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b6f      	ldr	r3, [pc, #444]	; (8001814 <main+0x23c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a6e      	ldr	r2, [pc, #440]	; (8001814 <main+0x23c>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b6c      	ldr	r3, [pc, #432]	; (8001814 <main+0x23c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b68      	ldr	r3, [pc, #416]	; (8001814 <main+0x23c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a67      	ldr	r2, [pc, #412]	; (8001814 <main+0x23c>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b65      	ldr	r3, [pc, #404]	; (8001814 <main+0x23c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800168a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800169c:	4619      	mov	r1, r3
 800169e:	485e      	ldr	r0, [pc, #376]	; (8001818 <main+0x240>)
 80016a0:	f000 fd18 	bl	80020d4 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016a4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4857      	ldr	r0, [pc, #348]	; (800181c <main+0x244>)
 80016be:	f000 fd09 	bl	80020d4 <HAL_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char h[] = "h";
 80016c2:	2368      	movs	r3, #104	; 0x68
 80016c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  char e[] = "e";
 80016c6:	2365      	movs	r3, #101	; 0x65
 80016c8:	843b      	strh	r3, [r7, #32]
  char l[] = "ll";
 80016ca:	4a55      	ldr	r2, [pc, #340]	; (8001820 <main+0x248>)
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	4611      	mov	r1, r2
 80016d4:	8019      	strh	r1, [r3, #0]
 80016d6:	3302      	adds	r3, #2
 80016d8:	0c12      	lsrs	r2, r2, #16
 80016da:	701a      	strb	r2, [r3, #0]
  char o[] = "o";
 80016dc:	236f      	movs	r3, #111	; 0x6f
 80016de:	833b      	strh	r3, [r7, #24]
  char nl[] = "\n";
 80016e0:	230a      	movs	r3, #10
 80016e2:	82bb      	strh	r3, [r7, #20]
    /* USER CODE BEGIN 3 */

	//HAL_UART_Transmit( &huart6, (uint8_t *) s, sizeof( s ), 10 );
	//HAL_Delay( 1000 );

	read();
 80016e4:	f7ff fd8a 	bl	80011fc <read>


	int is_button_pressed = read_button() && button_mode == 1;
 80016e8:	f7ff fb62 	bl	8000db0 <read_button>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <main+0x126>
 80016f2:	4b4c      	ldr	r3, [pc, #304]	; (8001824 <main+0x24c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <main+0x126>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <main+0x128>
 80016fe:	2300      	movs	r3, #0
 8001700:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch (state) {
 8001702:	4b49      	ldr	r3, [pc, #292]	; (8001828 <main+0x250>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b07      	cmp	r3, #7
 8001708:	d87e      	bhi.n	8001808 <main+0x230>
 800170a:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <main+0x138>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	08001731 	.word	0x08001731
 8001714:	08001783 	.word	0x08001783
 8001718:	08001763 	.word	0x08001763
 800171c:	08001743 	.word	0x08001743
 8001720:	080017a3 	.word	0x080017a3
 8001724:	080017d9 	.word	0x080017d9
 8001728:	080017c7 	.word	0x080017c7
 800172c:	080017b5 	.word	0x080017b5
	 case GREEN:
		 if (ready_to_switch()) switch_to_button_with_timer_flush(GREEN_FLUSHING);
 8001730:	f7ff ff38 	bl	80015a4 <ready_to_switch>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d057      	beq.n	80017ea <main+0x212>
 800173a:	2003      	movs	r0, #3
 800173c:	f7ff fc96 	bl	800106c <switch_to_button_with_timer_flush>
		 break;
 8001740:	e053      	b.n	80017ea <main+0x212>
	 case GREEN_FLUSHING:
		 if (is_button_pressed) switch_to_button(GREEN_FLUSHING_SHORT);
 8001742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <main+0x178>
 8001748:	2007      	movs	r0, #7
 800174a:	f7ff fca5 	bl	8001098 <switch_to_button>
		 else if (ready_to_switch()) switch_to_button_with_timer_flush(YELLOW);
		 break;
 800174e:	e04e      	b.n	80017ee <main+0x216>
		 else if (ready_to_switch()) switch_to_button_with_timer_flush(YELLOW);
 8001750:	f7ff ff28 	bl	80015a4 <ready_to_switch>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d049      	beq.n	80017ee <main+0x216>
 800175a:	2001      	movs	r0, #1
 800175c:	f7ff fc86 	bl	800106c <switch_to_button_with_timer_flush>
		 break;
 8001760:	e045      	b.n	80017ee <main+0x216>
	 case RED:
		 if (is_button_pressed) switch_to_button(RED_SHORT);
 8001762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <main+0x198>
 8001768:	2006      	movs	r0, #6
 800176a:	f7ff fc95 	bl	8001098 <switch_to_button>
		 else if (ready_to_switch()) switch_to_button_with_timer_flush(GREEN);
		 break;
 800176e:	e040      	b.n	80017f2 <main+0x21a>
		 else if (ready_to_switch()) switch_to_button_with_timer_flush(GREEN);
 8001770:	f7ff ff18 	bl	80015a4 <ready_to_switch>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d03b      	beq.n	80017f2 <main+0x21a>
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff fc76 	bl	800106c <switch_to_button_with_timer_flush>
		 break;
 8001780:	e037      	b.n	80017f2 <main+0x21a>
	 case YELLOW:
		 if (is_button_pressed) switch_to_button(YELLOW_SHORT);
 8001782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <main+0x1b8>
 8001788:	2005      	movs	r0, #5
 800178a:	f7ff fc85 	bl	8001098 <switch_to_button>
		 else if (ready_to_switch()) switch_to_button_with_timer_flush(RED);
		 break;
 800178e:	e032      	b.n	80017f6 <main+0x21e>
		 else if (ready_to_switch()) switch_to_button_with_timer_flush(RED);
 8001790:	f7ff ff08 	bl	80015a4 <ready_to_switch>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d02d      	beq.n	80017f6 <main+0x21e>
 800179a:	2002      	movs	r0, #2
 800179c:	f7ff fc66 	bl	800106c <switch_to_button_with_timer_flush>
		 break;
 80017a0:	e029      	b.n	80017f6 <main+0x21e>
	 case GREEN_SHORT:
		 if (ready_to_switch()) switch_to_button_with_timer_flush(GREEN_FLUSHING_SHORT);
 80017a2:	f7ff feff 	bl	80015a4 <ready_to_switch>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d026      	beq.n	80017fa <main+0x222>
 80017ac:	2007      	movs	r0, #7
 80017ae:	f7ff fc5d 	bl	800106c <switch_to_button_with_timer_flush>
		 break;
 80017b2:	e022      	b.n	80017fa <main+0x222>
	 case GREEN_FLUSHING_SHORT:
		 if (ready_to_switch()) switch_to_button_with_timer_flush(YELLOW_SHORT);
 80017b4:	f7ff fef6 	bl	80015a4 <ready_to_switch>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d01f      	beq.n	80017fe <main+0x226>
 80017be:	2005      	movs	r0, #5
 80017c0:	f7ff fc54 	bl	800106c <switch_to_button_with_timer_flush>
		 break;
 80017c4:	e01b      	b.n	80017fe <main+0x226>
	 case RED_SHORT:
		 if (ready_to_switch()) switch_to_button_with_timer_flush(GREEN);
 80017c6:	f7ff feed 	bl	80015a4 <ready_to_switch>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d018      	beq.n	8001802 <main+0x22a>
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff fc4b 	bl	800106c <switch_to_button_with_timer_flush>
		 break;
 80017d6:	e014      	b.n	8001802 <main+0x22a>
	 case YELLOW_SHORT:
		 if (ready_to_switch()) switch_to_button_with_timer_flush(RED_SHORT);
 80017d8:	f7ff fee4 	bl	80015a4 <ready_to_switch>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d011      	beq.n	8001806 <main+0x22e>
 80017e2:	2006      	movs	r0, #6
 80017e4:	f7ff fc42 	bl	800106c <switch_to_button_with_timer_flush>
		 break;
 80017e8:	e00d      	b.n	8001806 <main+0x22e>
		 break;
 80017ea:	bf00      	nop
 80017ec:	e00c      	b.n	8001808 <main+0x230>
		 break;
 80017ee:	bf00      	nop
 80017f0:	e00a      	b.n	8001808 <main+0x230>
		 break;
 80017f2:	bf00      	nop
 80017f4:	e008      	b.n	8001808 <main+0x230>
		 break;
 80017f6:	bf00      	nop
 80017f8:	e006      	b.n	8001808 <main+0x230>
		 break;
 80017fa:	bf00      	nop
 80017fc:	e004      	b.n	8001808 <main+0x230>
		 break;
 80017fe:	bf00      	nop
 8001800:	e002      	b.n	8001808 <main+0x230>
		 break;
 8001802:	bf00      	nop
 8001804:	e000      	b.n	8001808 <main+0x230>
		 break;
 8001806:	bf00      	nop
	}

	write_color(state);
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <main+0x250>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fb9f 	bl	8000f50 <write_color>
  {
 8001812:	e767      	b.n	80016e4 <main+0x10c>
 8001814:	40023800 	.word	0x40023800
 8001818:	40020800 	.word	0x40020800
 800181c:	40020c00 	.word	0x40020c00
 8001820:	08004ba0 	.word	0x08004ba0
 8001824:	2000002c 	.word	0x2000002c
 8001828:	200000ce 	.word	0x200000ce

0800182c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b094      	sub	sp, #80	; 0x50
 8001830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001832:	f107 0320 	add.w	r3, r7, #32
 8001836:	2230      	movs	r2, #48	; 0x30
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f002 fbd0 	bl	8003fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <SystemClock_Config+0xb8>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	4a22      	ldr	r2, [pc, #136]	; (80018e4 <SystemClock_Config+0xb8>)
 800185a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
 8001860:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <SystemClock_Config+0xb8>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800186c:	2300      	movs	r3, #0
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <SystemClock_Config+0xbc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001878:	4a1b      	ldr	r2, [pc, #108]	; (80018e8 <SystemClock_Config+0xbc>)
 800187a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <SystemClock_Config+0xbc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800188c:	2302      	movs	r3, #2
 800188e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001890:	2301      	movs	r3, #1
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001894:	2310      	movs	r3, #16
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001898:	2300      	movs	r3, #0
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800189c:	f107 0320 	add.w	r3, r7, #32
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fdc3 	bl	800242c <HAL_RCC_OscConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80018ac:	f000 f81e 	bl	80018ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b0:	230f      	movs	r3, #15
 80018b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 f826 	bl	800291c <HAL_RCC_ClockConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80018d6:	f000 f809 	bl	80018ec <Error_Handler>
  }
}
 80018da:	bf00      	nop
 80018dc:	3750      	adds	r7, #80	; 0x50
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000

080018ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f0:	b672      	cpsid	i
}
 80018f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <Error_Handler+0x8>
	...

080018f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <HAL_MspInit+0x4c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a0f      	ldr	r2, [pc, #60]	; (8001944 <HAL_MspInit+0x4c>)
 8001908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_MspInit+0x4c>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_MspInit+0x4c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_MspInit+0x4c>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_MspInit+0x4c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800194c:	e7fe      	b.n	800194c <NMI_Handler+0x4>

0800194e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <MemManage_Handler+0x4>

0800195a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <UsageFault_Handler+0x4>

08001966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001994:	f000 f9da 	bl	8001d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <USART6_IRQHandler+0x10>)
 80019a2:	f001 fb91 	bl	80030c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000858 	.word	0x20000858

080019b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b8:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <_sbrk+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <_sbrk+0x60>)
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <_sbrk+0x64>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <_sbrk+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d207      	bcs.n	80019f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e0:	f002 fad4 	bl	8003f8c <__errno>
 80019e4:	4603      	mov	r3, r0
 80019e6:	220c      	movs	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20030000 	.word	0x20030000
 8001a10:	00000400 	.word	0x00000400
 8001a14:	20000854 	.word	0x20000854
 8001a18:	20000ca0 	.word	0x20000ca0

08001a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <SystemInit+0x20>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <SystemInit+0x20>)
 8001a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_USART6_UART_Init+0x4c>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <MX_USART6_UART_Init+0x50>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <MX_USART6_UART_Init+0x4c>)
 8001a4c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_USART6_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_USART6_UART_Init+0x4c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <MX_USART6_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_USART6_UART_Init+0x4c>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <MX_USART6_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_USART6_UART_Init+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_USART6_UART_Init+0x4c>)
 8001a78:	f001 f930 	bl	8002cdc <HAL_UART_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001a82:	f7ff ff33 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000858 	.word	0x20000858
 8001a90:	40011400 	.word	0x40011400

08001a94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <HAL_UART_MspInit+0x94>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d133      	bne.n	8001b1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <HAL_UART_MspInit+0x98>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <HAL_UART_MspInit+0x98>)
 8001ac0:	f043 0320 	orr.w	r3, r3, #32
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_UART_MspInit+0x98>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_UART_MspInit+0x98>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <HAL_UART_MspInit+0x98>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_UART_MspInit+0x98>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aee:	23c0      	movs	r3, #192	; 0xc0
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001afe:	2308      	movs	r3, #8
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4809      	ldr	r0, [pc, #36]	; (8001b30 <HAL_UART_MspInit+0x9c>)
 8001b0a:	f000 fae3 	bl	80020d4 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	2047      	movs	r0, #71	; 0x47
 8001b14:	f000 fa15 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001b18:	2047      	movs	r0, #71	; 0x47
 8001b1a:	f000 fa2e 	bl	8001f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	; 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40011400 	.word	0x40011400
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020800 	.word	0x40020800

08001b34 <insert_in_queue>:

static uint8_t queue[QUEUE_SIZE];
static int insertion_index = 0;
static int queue_size = 0;

void insert_in_queue(uint8_t x) {
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
	if (queue_size >= QUEUE_SIZE) return;
 8001b3e:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <insert_in_queue+0x58>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b46:	da1a      	bge.n	8001b7e <insert_in_queue+0x4a>
	queue_size += 1;
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <insert_in_queue+0x58>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <insert_in_queue+0x58>)
 8001b50:	6013      	str	r3, [r2, #0]
	queue[insertion_index] = x;
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <insert_in_queue+0x5c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	490f      	ldr	r1, [pc, #60]	; (8001b94 <insert_in_queue+0x60>)
 8001b58:	79fa      	ldrb	r2, [r7, #7]
 8001b5a:	54ca      	strb	r2, [r1, r3]
	insertion_index = (insertion_index + 1) % QUEUE_SIZE;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <insert_in_queue+0x5c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <insert_in_queue+0x64>)
 8001b64:	fb83 1302 	smull	r1, r3, r3, r2
 8001b68:	1199      	asrs	r1, r3, #6
 8001b6a:	17d3      	asrs	r3, r2, #31
 8001b6c:	1acb      	subs	r3, r1, r3
 8001b6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b72:	fb01 f303 	mul.w	r3, r1, r3
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <insert_in_queue+0x5c>)
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e000      	b.n	8001b80 <insert_in_queue+0x4c>
	if (queue_size >= QUEUE_SIZE) return;
 8001b7e:	bf00      	nop
}
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000c88 	.word	0x20000c88
 8001b90:	20000c84 	.word	0x20000c84
 8001b94:	2000089c 	.word	0x2000089c
 8001b98:	10624dd3 	.word	0x10624dd3

08001b9c <take_element_from_queue>:

uint8_t take_element_from_queue() {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
	if (queue_size <= 0) return 0;
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <take_element_from_queue+0x58>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	dc01      	bgt.n	8001bae <take_element_from_queue+0x12>
 8001baa:	2300      	movs	r3, #0
 8001bac:	e01b      	b.n	8001be6 <take_element_from_queue+0x4a>
	int dequeue_index = (insertion_index - queue_size + QUEUE_SIZE) % QUEUE_SIZE;
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <take_element_from_queue+0x5c>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <take_element_from_queue+0x58>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001bbc:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <take_element_from_queue+0x60>)
 8001bbe:	fb82 1203 	smull	r1, r2, r2, r3
 8001bc2:	1191      	asrs	r1, r2, #6
 8001bc4:	17da      	asrs	r2, r3, #31
 8001bc6:	1a8a      	subs	r2, r1, r2
 8001bc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bcc:	fb01 f202 	mul.w	r2, r1, r2
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	607b      	str	r3, [r7, #4]
	queue_size -= 1;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <take_element_from_queue+0x58>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <take_element_from_queue+0x58>)
 8001bdc:	6013      	str	r3, [r2, #0]
	return queue[dequeue_index];
 8001bde:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <take_element_from_queue+0x64>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	781b      	ldrb	r3, [r3, #0]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000c88 	.word	0x20000c88
 8001bf8:	20000c84 	.word	0x20000c84
 8001bfc:	10624dd3 	.word	0x10624dd3
 8001c00:	2000089c 	.word	0x2000089c

08001c04 <is_queue_empty>:

uint8_t is_queue_empty() {
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
	return queue_size == 0;
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <is_queue_empty+0x1c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	20000c88 	.word	0x20000c88

08001c24 <prefix>:
 */

#include "./string_utils.h"

uint8_t prefix(const char *pre, const char *str)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
	 return strncmp(pre, str, strlen(pre)) == 0;
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe fae8 	bl	8000204 <strlen>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	6839      	ldr	r1, [r7, #0]
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f002 fa00 	bl	8004040 <strncmp>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bf0c      	ite	eq
 8001c46:	2301      	moveq	r3, #1
 8001c48:	2300      	movne	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c58:	480d      	ldr	r0, [pc, #52]	; (8001c90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c5a:	490e      	ldr	r1, [pc, #56]	; (8001c94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c60:	e002      	b.n	8001c68 <LoopCopyDataInit>

08001c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c66:	3304      	adds	r3, #4

08001c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c6c:	d3f9      	bcc.n	8001c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c70:	4c0b      	ldr	r4, [pc, #44]	; (8001ca0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c74:	e001      	b.n	8001c7a <LoopFillZerobss>

08001c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c78:	3204      	adds	r2, #4

08001c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c7c:	d3fb      	bcc.n	8001c76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c7e:	f7ff fecd 	bl	8001a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c82:	f002 f989 	bl	8003f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c86:	f7ff fca7 	bl	80015d8 <main>
  bx  lr    
 8001c8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c8c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c94:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001c98:	08004d00 	.word	0x08004d00
  ldr r2, =_sbss
 8001c9c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001ca0:	20000ca0 	.word	0x20000ca0

08001ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca4:	e7fe      	b.n	8001ca4 <ADC_IRQHandler>
	...

08001ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_Init+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <HAL_Init+0x40>)
 8001cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_Init+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_Init+0x40>)
 8001cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <HAL_Init+0x40>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <HAL_Init+0x40>)
 8001cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	f000 f92b 	bl	8001f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd6:	200f      	movs	r0, #15
 8001cd8:	f000 f808 	bl	8001cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cdc:	f7ff fe0c 	bl	80018f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023c00 	.word	0x40023c00

08001cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_InitTick+0x54>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_InitTick+0x58>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f943 	bl	8001f96 <HAL_SYSTICK_Config>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00e      	b.n	8001d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	d80a      	bhi.n	8001d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d20:	2200      	movs	r2, #0
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f000 f90b 	bl	8001f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d2c:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <HAL_InitTick+0x5c>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e000      	b.n	8001d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000038 	.word	0x20000038
 8001d44:	20000040 	.word	0x20000040
 8001d48:	2000003c 	.word	0x2000003c

08001d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x24>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <HAL_IncTick+0x24>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000040 	.word	0x20000040
 8001d70:	20000c8c 	.word	0x20000c8c

08001d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <HAL_GetTick+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000c8c 	.word	0x20000c8c

08001d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0307 	and.w	r3, r3, #7
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	db0b      	blt.n	8001e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	f003 021f 	and.w	r2, r3, #31
 8001e08:	4907      	ldr	r1, [pc, #28]	; (8001e28 <__NVIC_EnableIRQ+0x38>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	2001      	movs	r0, #1
 8001e12:	fa00 f202 	lsl.w	r2, r0, r2
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e100 	.word	0xe000e100

08001e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	; (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	; (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f1c3 0307 	rsb	r3, r3, #7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf28      	it	cs
 8001e9e:	2304      	movcs	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d902      	bls.n	8001eb0 <NVIC_EncodePriority+0x30>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b03      	subs	r3, #3
 8001eae:	e000      	b.n	8001eb2 <NVIC_EncodePriority+0x32>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	4313      	orrs	r3, r2
         );
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef8:	d301      	bcc.n	8001efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00f      	b.n	8001f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <SysTick_Config+0x40>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f06:	210f      	movs	r1, #15
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f7ff ff8e 	bl	8001e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <SysTick_Config+0x40>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <SysTick_Config+0x40>)
 8001f18:	2207      	movs	r2, #7
 8001f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	e000e010 	.word	0xe000e010

08001f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff29 	bl	8001d8c <__NVIC_SetPriorityGrouping>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f54:	f7ff ff3e 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff ff8e 	bl	8001e80 <NVIC_EncodePriority>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff5d 	bl	8001e2c <__NVIC_SetPriority>
}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff31 	bl	8001df0 <__NVIC_EnableIRQ>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffa2 	bl	8001ee8 <SysTick_Config>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff feda 	bl	8001d74 <HAL_GetTick>
 8001fc0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d008      	beq.n	8001fe0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2280      	movs	r2, #128	; 0x80
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e052      	b.n	8002086 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0216 	bic.w	r2, r2, #22
 8001fee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ffe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	2b00      	cmp	r3, #0
 8002006:	d103      	bne.n	8002010 <HAL_DMA_Abort+0x62>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0208 	bic.w	r2, r2, #8
 800201e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0201 	bic.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002030:	e013      	b.n	800205a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002032:	f7ff fe9f 	bl	8001d74 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b05      	cmp	r3, #5
 800203e:	d90c      	bls.n	800205a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2203      	movs	r2, #3
 800204a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e015      	b.n	8002086 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e4      	bne.n	8002032 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	223f      	movs	r2, #63	; 0x3f
 800206e:	409a      	lsls	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d004      	beq.n	80020ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2280      	movs	r2, #128	; 0x80
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e00c      	b.n	80020c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2205      	movs	r2, #5
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	e177      	b.n	80023e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020f0:	2201      	movs	r2, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	429a      	cmp	r2, r3
 800210a:	f040 8166 	bne.w	80023da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d005      	beq.n	8002126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002122:	2b02      	cmp	r3, #2
 8002124:	d130      	bne.n	8002188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	2203      	movs	r2, #3
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 0201 	and.w	r2, r3, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b03      	cmp	r3, #3
 8002192:	d017      	beq.n	80021c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d123      	bne.n	8002218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	08da      	lsrs	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3208      	adds	r2, #8
 80021d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	08da      	lsrs	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3208      	adds	r2, #8
 8002212:	69b9      	ldr	r1, [r7, #24]
 8002214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0203 	and.w	r2, r3, #3
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80c0 	beq.w	80023da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b66      	ldr	r3, [pc, #408]	; (80023f8 <HAL_GPIO_Init+0x324>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a65      	ldr	r2, [pc, #404]	; (80023f8 <HAL_GPIO_Init+0x324>)
 8002264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b63      	ldr	r3, [pc, #396]	; (80023f8 <HAL_GPIO_Init+0x324>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002276:	4a61      	ldr	r2, [pc, #388]	; (80023fc <HAL_GPIO_Init+0x328>)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	3302      	adds	r3, #2
 800227e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a58      	ldr	r2, [pc, #352]	; (8002400 <HAL_GPIO_Init+0x32c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d037      	beq.n	8002312 <HAL_GPIO_Init+0x23e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a57      	ldr	r2, [pc, #348]	; (8002404 <HAL_GPIO_Init+0x330>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d031      	beq.n	800230e <HAL_GPIO_Init+0x23a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a56      	ldr	r2, [pc, #344]	; (8002408 <HAL_GPIO_Init+0x334>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d02b      	beq.n	800230a <HAL_GPIO_Init+0x236>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a55      	ldr	r2, [pc, #340]	; (800240c <HAL_GPIO_Init+0x338>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d025      	beq.n	8002306 <HAL_GPIO_Init+0x232>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a54      	ldr	r2, [pc, #336]	; (8002410 <HAL_GPIO_Init+0x33c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01f      	beq.n	8002302 <HAL_GPIO_Init+0x22e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a53      	ldr	r2, [pc, #332]	; (8002414 <HAL_GPIO_Init+0x340>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d019      	beq.n	80022fe <HAL_GPIO_Init+0x22a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a52      	ldr	r2, [pc, #328]	; (8002418 <HAL_GPIO_Init+0x344>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_GPIO_Init+0x226>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a51      	ldr	r2, [pc, #324]	; (800241c <HAL_GPIO_Init+0x348>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00d      	beq.n	80022f6 <HAL_GPIO_Init+0x222>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a50      	ldr	r2, [pc, #320]	; (8002420 <HAL_GPIO_Init+0x34c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <HAL_GPIO_Init+0x21e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4f      	ldr	r2, [pc, #316]	; (8002424 <HAL_GPIO_Init+0x350>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_GPIO_Init+0x21a>
 80022ea:	2309      	movs	r3, #9
 80022ec:	e012      	b.n	8002314 <HAL_GPIO_Init+0x240>
 80022ee:	230a      	movs	r3, #10
 80022f0:	e010      	b.n	8002314 <HAL_GPIO_Init+0x240>
 80022f2:	2308      	movs	r3, #8
 80022f4:	e00e      	b.n	8002314 <HAL_GPIO_Init+0x240>
 80022f6:	2307      	movs	r3, #7
 80022f8:	e00c      	b.n	8002314 <HAL_GPIO_Init+0x240>
 80022fa:	2306      	movs	r3, #6
 80022fc:	e00a      	b.n	8002314 <HAL_GPIO_Init+0x240>
 80022fe:	2305      	movs	r3, #5
 8002300:	e008      	b.n	8002314 <HAL_GPIO_Init+0x240>
 8002302:	2304      	movs	r3, #4
 8002304:	e006      	b.n	8002314 <HAL_GPIO_Init+0x240>
 8002306:	2303      	movs	r3, #3
 8002308:	e004      	b.n	8002314 <HAL_GPIO_Init+0x240>
 800230a:	2302      	movs	r3, #2
 800230c:	e002      	b.n	8002314 <HAL_GPIO_Init+0x240>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_GPIO_Init+0x240>
 8002312:	2300      	movs	r3, #0
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	f002 0203 	and.w	r2, r2, #3
 800231a:	0092      	lsls	r2, r2, #2
 800231c:	4093      	lsls	r3, r2
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002324:	4935      	ldr	r1, [pc, #212]	; (80023fc <HAL_GPIO_Init+0x328>)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	3302      	adds	r3, #2
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_GPIO_Init+0x354>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002356:	4a34      	ldr	r2, [pc, #208]	; (8002428 <HAL_GPIO_Init+0x354>)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800235c:	4b32      	ldr	r3, [pc, #200]	; (8002428 <HAL_GPIO_Init+0x354>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002380:	4a29      	ldr	r2, [pc, #164]	; (8002428 <HAL_GPIO_Init+0x354>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002386:	4b28      	ldr	r3, [pc, #160]	; (8002428 <HAL_GPIO_Init+0x354>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023aa:	4a1f      	ldr	r2, [pc, #124]	; (8002428 <HAL_GPIO_Init+0x354>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b0:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_GPIO_Init+0x354>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d4:	4a14      	ldr	r2, [pc, #80]	; (8002428 <HAL_GPIO_Init+0x354>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3301      	adds	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2b0f      	cmp	r3, #15
 80023e4:	f67f ae84 	bls.w	80020f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3724      	adds	r7, #36	; 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40013800 	.word	0x40013800
 8002400:	40020000 	.word	0x40020000
 8002404:	40020400 	.word	0x40020400
 8002408:	40020800 	.word	0x40020800
 800240c:	40020c00 	.word	0x40020c00
 8002410:	40021000 	.word	0x40021000
 8002414:	40021400 	.word	0x40021400
 8002418:	40021800 	.word	0x40021800
 800241c:	40021c00 	.word	0x40021c00
 8002420:	40022000 	.word	0x40022000
 8002424:	40022400 	.word	0x40022400
 8002428:	40013c00 	.word	0x40013c00

0800242c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e267      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d075      	beq.n	8002536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800244a:	4b88      	ldr	r3, [pc, #544]	; (800266c <HAL_RCC_OscConfig+0x240>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b04      	cmp	r3, #4
 8002454:	d00c      	beq.n	8002470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002456:	4b85      	ldr	r3, [pc, #532]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800245e:	2b08      	cmp	r3, #8
 8002460:	d112      	bne.n	8002488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002462:	4b82      	ldr	r3, [pc, #520]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800246e:	d10b      	bne.n	8002488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	4b7e      	ldr	r3, [pc, #504]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d05b      	beq.n	8002534 <HAL_RCC_OscConfig+0x108>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d157      	bne.n	8002534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e242      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002490:	d106      	bne.n	80024a0 <HAL_RCC_OscConfig+0x74>
 8002492:	4b76      	ldr	r3, [pc, #472]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a75      	ldr	r2, [pc, #468]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e01d      	b.n	80024dc <HAL_RCC_OscConfig+0xb0>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x98>
 80024aa:	4b70      	ldr	r3, [pc, #448]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a6f      	ldr	r2, [pc, #444]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4b6d      	ldr	r3, [pc, #436]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a6c      	ldr	r2, [pc, #432]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e00b      	b.n	80024dc <HAL_RCC_OscConfig+0xb0>
 80024c4:	4b69      	ldr	r3, [pc, #420]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a68      	ldr	r2, [pc, #416]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	4b66      	ldr	r3, [pc, #408]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a65      	ldr	r2, [pc, #404]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7ff fc46 	bl	8001d74 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ec:	f7ff fc42 	bl	8001d74 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	; 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e207      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	4b5b      	ldr	r3, [pc, #364]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0xc0>
 800250a:	e014      	b.n	8002536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7ff fc32 	bl	8001d74 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002514:	f7ff fc2e 	bl	8001d74 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e1f3      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002526:	4b51      	ldr	r3, [pc, #324]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0xe8>
 8002532:	e000      	b.n	8002536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d063      	beq.n	800260a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002542:	4b4a      	ldr	r3, [pc, #296]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254e:	4b47      	ldr	r3, [pc, #284]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002556:	2b08      	cmp	r3, #8
 8002558:	d11c      	bne.n	8002594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255a:	4b44      	ldr	r3, [pc, #272]	; (800266c <HAL_RCC_OscConfig+0x240>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d116      	bne.n	8002594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	4b41      	ldr	r3, [pc, #260]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_RCC_OscConfig+0x152>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e1c7      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257e:	4b3b      	ldr	r3, [pc, #236]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4937      	ldr	r1, [pc, #220]	; (800266c <HAL_RCC_OscConfig+0x240>)
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002592:	e03a      	b.n	800260a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d020      	beq.n	80025de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800259c:	4b34      	ldr	r3, [pc, #208]	; (8002670 <HAL_RCC_OscConfig+0x244>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7ff fbe7 	bl	8001d74 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025aa:	f7ff fbe3 	bl	8001d74 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e1a8      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025bc:	4b2b      	ldr	r3, [pc, #172]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c8:	4b28      	ldr	r3, [pc, #160]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4925      	ldr	r1, [pc, #148]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	600b      	str	r3, [r1, #0]
 80025dc:	e015      	b.n	800260a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025de:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_RCC_OscConfig+0x244>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7ff fbc6 	bl	8001d74 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ec:	f7ff fbc2 	bl	8001d74 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e187      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d036      	beq.n	8002684 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d016      	beq.n	800264c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <HAL_RCC_OscConfig+0x248>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7ff fba6 	bl	8001d74 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262c:	f7ff fba2 	bl	8001d74 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e167      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x200>
 800264a:	e01b      	b.n	8002684 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_RCC_OscConfig+0x248>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002652:	f7ff fb8f 	bl	8001d74 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002658:	e00e      	b.n	8002678 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800265a:	f7ff fb8b 	bl	8001d74 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d907      	bls.n	8002678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e150      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
 800266c:	40023800 	.word	0x40023800
 8002670:	42470000 	.word	0x42470000
 8002674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002678:	4b88      	ldr	r3, [pc, #544]	; (800289c <HAL_RCC_OscConfig+0x470>)
 800267a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1ea      	bne.n	800265a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8097 	beq.w	80027c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4b81      	ldr	r3, [pc, #516]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10f      	bne.n	80026c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	4b7d      	ldr	r3, [pc, #500]	; (800289c <HAL_RCC_OscConfig+0x470>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a7c      	ldr	r2, [pc, #496]	; (800289c <HAL_RCC_OscConfig+0x470>)
 80026ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
 80026b2:	4b7a      	ldr	r3, [pc, #488]	; (800289c <HAL_RCC_OscConfig+0x470>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026be:	2301      	movs	r3, #1
 80026c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c2:	4b77      	ldr	r3, [pc, #476]	; (80028a0 <HAL_RCC_OscConfig+0x474>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d118      	bne.n	8002700 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ce:	4b74      	ldr	r3, [pc, #464]	; (80028a0 <HAL_RCC_OscConfig+0x474>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a73      	ldr	r2, [pc, #460]	; (80028a0 <HAL_RCC_OscConfig+0x474>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026da:	f7ff fb4b 	bl	8001d74 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e2:	f7ff fb47 	bl	8001d74 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e10c      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	4b6a      	ldr	r3, [pc, #424]	; (80028a0 <HAL_RCC_OscConfig+0x474>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d106      	bne.n	8002716 <HAL_RCC_OscConfig+0x2ea>
 8002708:	4b64      	ldr	r3, [pc, #400]	; (800289c <HAL_RCC_OscConfig+0x470>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	4a63      	ldr	r2, [pc, #396]	; (800289c <HAL_RCC_OscConfig+0x470>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6713      	str	r3, [r2, #112]	; 0x70
 8002714:	e01c      	b.n	8002750 <HAL_RCC_OscConfig+0x324>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b05      	cmp	r3, #5
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x30c>
 800271e:	4b5f      	ldr	r3, [pc, #380]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	4a5e      	ldr	r2, [pc, #376]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002724:	f043 0304 	orr.w	r3, r3, #4
 8002728:	6713      	str	r3, [r2, #112]	; 0x70
 800272a:	4b5c      	ldr	r3, [pc, #368]	; (800289c <HAL_RCC_OscConfig+0x470>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	4a5b      	ldr	r2, [pc, #364]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6713      	str	r3, [r2, #112]	; 0x70
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0x324>
 8002738:	4b58      	ldr	r3, [pc, #352]	; (800289c <HAL_RCC_OscConfig+0x470>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a57      	ldr	r2, [pc, #348]	; (800289c <HAL_RCC_OscConfig+0x470>)
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
 8002744:	4b55      	ldr	r3, [pc, #340]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	4a54      	ldr	r2, [pc, #336]	; (800289c <HAL_RCC_OscConfig+0x470>)
 800274a:	f023 0304 	bic.w	r3, r3, #4
 800274e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d015      	beq.n	8002784 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7ff fb0c 	bl	8001d74 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275e:	e00a      	b.n	8002776 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7ff fb08 	bl	8001d74 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0cb      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002776:	4b49      	ldr	r3, [pc, #292]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0ee      	beq.n	8002760 <HAL_RCC_OscConfig+0x334>
 8002782:	e014      	b.n	80027ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002784:	f7ff faf6 	bl	8001d74 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800278c:	f7ff faf2 	bl	8001d74 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	; 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e0b5      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a2:	4b3e      	ldr	r3, [pc, #248]	; (800289c <HAL_RCC_OscConfig+0x470>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1ee      	bne.n	800278c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d105      	bne.n	80027c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b4:	4b39      	ldr	r3, [pc, #228]	; (800289c <HAL_RCC_OscConfig+0x470>)
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	4a38      	ldr	r2, [pc, #224]	; (800289c <HAL_RCC_OscConfig+0x470>)
 80027ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80a1 	beq.w	800290c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ca:	4b34      	ldr	r3, [pc, #208]	; (800289c <HAL_RCC_OscConfig+0x470>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d05c      	beq.n	8002890 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d141      	bne.n	8002862 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027de:	4b31      	ldr	r3, [pc, #196]	; (80028a4 <HAL_RCC_OscConfig+0x478>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7ff fac6 	bl	8001d74 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ec:	f7ff fac2 	bl	8001d74 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e087      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fe:	4b27      	ldr	r3, [pc, #156]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	019b      	lsls	r3, r3, #6
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	3b01      	subs	r3, #1
 8002824:	041b      	lsls	r3, r3, #16
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	061b      	lsls	r3, r3, #24
 800282e:	491b      	ldr	r1, [pc, #108]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <HAL_RCC_OscConfig+0x478>)
 8002836:	2201      	movs	r2, #1
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283a:	f7ff fa9b 	bl	8001d74 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002842:	f7ff fa97 	bl	8001d74 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e05c      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x416>
 8002860:	e054      	b.n	800290c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_RCC_OscConfig+0x478>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7ff fa84 	bl	8001d74 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002870:	f7ff fa80 	bl	8001d74 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e045      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x444>
 800288e:	e03d      	b.n	800290c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d107      	bne.n	80028a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e038      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
 800289c:	40023800 	.word	0x40023800
 80028a0:	40007000 	.word	0x40007000
 80028a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_RCC_OscConfig+0x4ec>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d028      	beq.n	8002908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d121      	bne.n	8002908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d11a      	bne.n	8002908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d8:	4013      	ands	r3, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d111      	bne.n	8002908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	085b      	lsrs	r3, r3, #1
 80028f0:	3b01      	subs	r3, #1
 80028f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d107      	bne.n	8002908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800

0800291c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0cc      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002930:	4b68      	ldr	r3, [pc, #416]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d90c      	bls.n	8002958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b65      	ldr	r3, [pc, #404]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0b8      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d020      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002970:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800297a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002988:	4b53      	ldr	r3, [pc, #332]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4a52      	ldr	r2, [pc, #328]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002994:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	494d      	ldr	r1, [pc, #308]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d044      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d119      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e07f      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d003      	beq.n	80029da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029da:	4b3f      	ldr	r3, [pc, #252]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e06f      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ea:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e067      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fa:	4b37      	ldr	r3, [pc, #220]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f023 0203 	bic.w	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4934      	ldr	r1, [pc, #208]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a0c:	f7ff f9b2 	bl	8001d74 <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	e00a      	b.n	8002a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a14:	f7ff f9ae 	bl	8001d74 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e04f      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 020c 	and.w	r2, r3, #12
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d1eb      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b25      	ldr	r3, [pc, #148]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d20c      	bcs.n	8002a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e032      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4916      	ldr	r1, [pc, #88]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	490e      	ldr	r1, [pc, #56]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aa2:	f000 f821 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	490a      	ldr	r1, [pc, #40]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	5ccb      	ldrb	r3, [r1, r3]
 8002ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff f912 	bl	8001cec <HAL_InitTick>

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023c00 	.word	0x40023c00
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	08004ba4 	.word	0x08004ba4
 8002ae0:	20000038 	.word	0x20000038
 8002ae4:	2000003c 	.word	0x2000003c

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aec:	b090      	sub	sp, #64	; 0x40
 8002aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
 8002af4:	2300      	movs	r3, #0
 8002af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002af8:	2300      	movs	r3, #0
 8002afa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b00:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 030c 	and.w	r3, r3, #12
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d00d      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x40>
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	f200 80a1 	bhi.w	8002c54 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x34>
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d003      	beq.n	8002b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b1a:	e09b      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b1c:	4b53      	ldr	r3, [pc, #332]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x184>)
 8002b1e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b20:	e09b      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b22:	4b53      	ldr	r3, [pc, #332]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b26:	e098      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b28:	4b4f      	ldr	r3, [pc, #316]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b32:	4b4d      	ldr	r3, [pc, #308]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d028      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	099b      	lsrs	r3, r3, #6
 8002b44:	2200      	movs	r2, #0
 8002b46:	623b      	str	r3, [r7, #32]
 8002b48:	627a      	str	r2, [r7, #36]	; 0x24
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b50:	2100      	movs	r1, #0
 8002b52:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b54:	fb03 f201 	mul.w	r2, r3, r1
 8002b58:	2300      	movs	r3, #0
 8002b5a:	fb00 f303 	mul.w	r3, r0, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	4a43      	ldr	r2, [pc, #268]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b62:	fba0 1202 	umull	r1, r2, r0, r2
 8002b66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b68:	460a      	mov	r2, r1
 8002b6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b6e:	4413      	add	r3, r2
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b74:	2200      	movs	r2, #0
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	61fa      	str	r2, [r7, #28]
 8002b7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b82:	f7fd ff93 	bl	8000aac <__aeabi_uldivmod>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b8e:	e053      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b90:	4b35      	ldr	r3, [pc, #212]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	099b      	lsrs	r3, r3, #6
 8002b96:	2200      	movs	r2, #0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	617a      	str	r2, [r7, #20]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ba2:	f04f 0b00 	mov.w	fp, #0
 8002ba6:	4652      	mov	r2, sl
 8002ba8:	465b      	mov	r3, fp
 8002baa:	f04f 0000 	mov.w	r0, #0
 8002bae:	f04f 0100 	mov.w	r1, #0
 8002bb2:	0159      	lsls	r1, r3, #5
 8002bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb8:	0150      	lsls	r0, r2, #5
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	ebb2 080a 	subs.w	r8, r2, sl
 8002bc2:	eb63 090b 	sbc.w	r9, r3, fp
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bda:	ebb2 0408 	subs.w	r4, r2, r8
 8002bde:	eb63 0509 	sbc.w	r5, r3, r9
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	00eb      	lsls	r3, r5, #3
 8002bec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bf0:	00e2      	lsls	r2, r4, #3
 8002bf2:	4614      	mov	r4, r2
 8002bf4:	461d      	mov	r5, r3
 8002bf6:	eb14 030a 	adds.w	r3, r4, sl
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	eb45 030b 	adc.w	r3, r5, fp
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c0e:	4629      	mov	r1, r5
 8002c10:	028b      	lsls	r3, r1, #10
 8002c12:	4621      	mov	r1, r4
 8002c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c18:	4621      	mov	r1, r4
 8002c1a:	028a      	lsls	r2, r1, #10
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c22:	2200      	movs	r2, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	60fa      	str	r2, [r7, #12]
 8002c28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c2c:	f7fd ff3e 	bl	8000aac <__aeabi_uldivmod>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4613      	mov	r3, r2
 8002c36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	0c1b      	lsrs	r3, r3, #16
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	3301      	adds	r3, #1
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c52:	e002      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3740      	adds	r7, #64	; 0x40
 8002c60:	46bd      	mov	sp, r7
 8002c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	00f42400 	.word	0x00f42400
 8002c70:	017d7840 	.word	0x017d7840

08002c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c78:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	20000038 	.word	0x20000038

08002c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c90:	f7ff fff0 	bl	8002c74 <HAL_RCC_GetHCLKFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	0a9b      	lsrs	r3, r3, #10
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4903      	ldr	r1, [pc, #12]	; (8002cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	08004bb4 	.word	0x08004bb4

08002cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cb8:	f7ff ffdc 	bl	8002c74 <HAL_RCC_GetHCLKFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	0b5b      	lsrs	r3, r3, #13
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4903      	ldr	r1, [pc, #12]	; (8002cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	08004bb4 	.word	0x08004bb4

08002cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e03f      	b.n	8002d6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fe fec6 	bl	8001a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2224      	movs	r2, #36	; 0x24
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 febb 	bl	8003a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b08a      	sub	sp, #40	; 0x28
 8002d7a:	af02      	add	r7, sp, #8
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	4613      	mov	r3, r2
 8002d84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d17c      	bne.n	8002e90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_UART_Transmit+0x2c>
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e075      	b.n	8002e92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_UART_Transmit+0x3e>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e06e      	b.n	8002e92 <HAL_UART_Transmit+0x11c>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2221      	movs	r2, #33	; 0x21
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dca:	f7fe ffd3 	bl	8001d74 <HAL_GetTick>
 8002dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	88fa      	ldrh	r2, [r7, #6]
 8002dd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	88fa      	ldrh	r2, [r7, #6]
 8002dda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de4:	d108      	bne.n	8002df8 <HAL_UART_Transmit+0x82>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d104      	bne.n	8002df8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	61bb      	str	r3, [r7, #24]
 8002df6:	e003      	b.n	8002e00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e08:	e02a      	b.n	8002e60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2200      	movs	r2, #0
 8002e12:	2180      	movs	r1, #128	; 0x80
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 fbfb 	bl	8003610 <UART_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e036      	b.n	8002e92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10b      	bne.n	8002e42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	e007      	b.n	8002e52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1cf      	bne.n	8002e0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2200      	movs	r2, #0
 8002e72:	2140      	movs	r1, #64	; 0x40
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fbcb 	bl	8003610 <UART_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e006      	b.n	8002e92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e000      	b.n	8002e92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e90:	2302      	movs	r3, #2
  }
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3720      	adds	r7, #32
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b08a      	sub	sp, #40	; 0x28
 8002e9e:	af02      	add	r7, sp, #8
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	f040 808c 	bne.w	8002fd4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_UART_Receive+0x2e>
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e084      	b.n	8002fd6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_UART_Receive+0x40>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e07d      	b.n	8002fd6 <HAL_UART_Receive+0x13c>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2222      	movs	r2, #34	; 0x22
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ef6:	f7fe ff3d 	bl	8001d74 <HAL_GetTick>
 8002efa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	88fa      	ldrh	r2, [r7, #6]
 8002f00:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	88fa      	ldrh	r2, [r7, #6]
 8002f06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f10:	d108      	bne.n	8002f24 <HAL_UART_Receive+0x8a>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d104      	bne.n	8002f24 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	61bb      	str	r3, [r7, #24]
 8002f22:	e003      	b.n	8002f2c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f34:	e043      	b.n	8002fbe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2120      	movs	r1, #32
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fb65 	bl	8003610 <UART_WaitOnFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e042      	b.n	8002fd6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10c      	bne.n	8002f70 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	e01f      	b.n	8002fb0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f78:	d007      	beq.n	8002f8a <HAL_UART_Receive+0xf0>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <HAL_UART_Receive+0xfe>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e008      	b.n	8002faa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3301      	adds	r3, #1
 8002fae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1b6      	bne.n	8002f36 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e000      	b.n	8002fd6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002fd4:	2302      	movs	r3, #2
  }
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3720      	adds	r7, #32
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d130      	bne.n	800305a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_UART_Transmit_IT+0x26>
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e029      	b.n	800305c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_UART_Transmit_IT+0x38>
 8003012:	2302      	movs	r3, #2
 8003014:	e022      	b.n	800305c <HAL_UART_Transmit_IT+0x7e>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	88fa      	ldrh	r2, [r7, #6]
 8003028:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	88fa      	ldrh	r2, [r7, #6]
 800302e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2221      	movs	r2, #33	; 0x21
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003054:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e000      	b.n	800305c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800305a:	2302      	movs	r3, #2
  }
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	4613      	mov	r3, r2
 8003074:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b20      	cmp	r3, #32
 8003080:	d11d      	bne.n	80030be <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_UART_Receive_IT+0x26>
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e016      	b.n	80030c0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_UART_Receive_IT+0x38>
 800309c:	2302      	movs	r3, #2
 800309e:	e00f      	b.n	80030c0 <HAL_UART_Receive_IT+0x58>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	461a      	mov	r2, r3
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fb19 	bl	80036ec <UART_Start_Receive_IT>
 80030ba:	4603      	mov	r3, r0
 80030bc:	e000      	b.n	80030c0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
  }
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b0ba      	sub	sp, #232	; 0xe8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10f      	bne.n	800312e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800310e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_UART_IRQHandler+0x66>
 800311a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fbfd 	bl	8003926 <UART_Receive_IT>
      return;
 800312c:	e256      	b.n	80035dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800312e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80de 	beq.w	80032f4 <HAL_UART_IRQHandler+0x22c>
 8003138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d106      	bne.n	8003152 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003148:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80d1 	beq.w	80032f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <HAL_UART_IRQHandler+0xae>
 800315e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f043 0201 	orr.w	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_UART_IRQHandler+0xd2>
 8003182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f043 0202 	orr.w	r2, r3, #2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800319a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <HAL_UART_IRQHandler+0xf6>
 80031a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f043 0204 	orr.w	r2, r3, #4
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d011      	beq.n	80031ee <HAL_UART_IRQHandler+0x126>
 80031ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d105      	bne.n	80031e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f043 0208 	orr.w	r2, r3, #8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 81ed 	beq.w	80035d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_UART_IRQHandler+0x14e>
 8003204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fb88 	bl	8003926 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <HAL_UART_IRQHandler+0x17a>
 800323a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800323e:	2b00      	cmp	r3, #0
 8003240:	d04f      	beq.n	80032e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fa90 	bl	8003768 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d141      	bne.n	80032da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3314      	adds	r3, #20
 800325c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003264:	e853 3f00 	ldrex	r3, [r3]
 8003268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800326c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3314      	adds	r3, #20
 800327e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003282:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800328e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003292:	e841 2300 	strex	r3, r2, [r1]
 8003296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800329a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1d9      	bne.n	8003256 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d013      	beq.n	80032d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	4a7d      	ldr	r2, [pc, #500]	; (80034a4 <HAL_UART_IRQHandler+0x3dc>)
 80032b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fee9 	bl	800208e <HAL_DMA_Abort_IT>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032cc:	4610      	mov	r0, r2
 80032ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d0:	e00e      	b.n	80032f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f986 	bl	80035e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	e00a      	b.n	80032f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f982 	bl	80035e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	e006      	b.n	80032f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f97e 	bl	80035e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032ee:	e170      	b.n	80035d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	bf00      	nop
    return;
 80032f2:	e16e      	b.n	80035d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	f040 814a 	bne.w	8003592 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8143 	beq.w	8003592 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800330c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 813c 	beq.w	8003592 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b40      	cmp	r3, #64	; 0x40
 800333c:	f040 80b4 	bne.w	80034a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800334c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8140 	beq.w	80035d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800335a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800335e:	429a      	cmp	r2, r3
 8003360:	f080 8139 	bcs.w	80035d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800336a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003376:	f000 8088 	beq.w	800348a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	330c      	adds	r3, #12
 8003380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003384:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1d9      	bne.n	800337a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3314      	adds	r3, #20
 80033cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d0:	e853 3f00 	ldrex	r3, [r3]
 80033d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3314      	adds	r3, #20
 80033e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e1      	bne.n	80033c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3314      	adds	r3, #20
 8003408:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3314      	adds	r3, #20
 8003422:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003426:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003428:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800342c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e3      	bne.n	8003402 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003452:	e853 3f00 	ldrex	r3, [r3]
 8003456:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345a:	f023 0310 	bic.w	r3, r3, #16
 800345e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	330c      	adds	r3, #12
 8003468:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800346c:	65ba      	str	r2, [r7, #88]	; 0x58
 800346e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003470:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003472:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003474:	e841 2300 	strex	r3, r2, [r1]
 8003478:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800347a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e3      	bne.n	8003448 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe fd92 	bl	8001fae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003492:	b29b      	uxth	r3, r3
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	b29b      	uxth	r3, r3
 8003498:	4619      	mov	r1, r3
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f8ac 	bl	80035f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034a0:	e099      	b.n	80035d6 <HAL_UART_IRQHandler+0x50e>
 80034a2:	bf00      	nop
 80034a4:	0800382f 	.word	0x0800382f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 808b 	beq.w	80035da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80034c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8086 	beq.w	80035da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	330c      	adds	r3, #12
 80034d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	e853 3f00 	ldrex	r3, [r3]
 80034dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034f2:	647a      	str	r2, [r7, #68]	; 0x44
 80034f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e3      	bne.n	80034ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3314      	adds	r3, #20
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	e853 3f00 	ldrex	r3, [r3]
 8003514:	623b      	str	r3, [r7, #32]
   return(result);
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3314      	adds	r3, #20
 8003526:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800352a:	633a      	str	r2, [r7, #48]	; 0x30
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e3      	bne.n	8003506 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	330c      	adds	r3, #12
 8003552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	60fb      	str	r3, [r7, #12]
   return(result);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0310 	bic.w	r3, r3, #16
 8003562:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	330c      	adds	r3, #12
 800356c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003570:	61fa      	str	r2, [r7, #28]
 8003572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	69b9      	ldr	r1, [r7, #24]
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	617b      	str	r3, [r7, #20]
   return(result);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e3      	bne.n	800354c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003584:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f834 	bl	80035f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003590:	e023      	b.n	80035da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_UART_IRQHandler+0x4ea>
 800359e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f953 	bl	8003856 <UART_Transmit_IT>
    return;
 80035b0:	e014      	b.n	80035dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00e      	beq.n	80035dc <HAL_UART_IRQHandler+0x514>
 80035be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f993 	bl	80038f6 <UART_EndTransmit_IT>
    return;
 80035d0:	e004      	b.n	80035dc <HAL_UART_IRQHandler+0x514>
    return;
 80035d2:	bf00      	nop
 80035d4:	e002      	b.n	80035dc <HAL_UART_IRQHandler+0x514>
      return;
 80035d6:	bf00      	nop
 80035d8:	e000      	b.n	80035dc <HAL_UART_IRQHandler+0x514>
      return;
 80035da:	bf00      	nop
  }
}
 80035dc:	37e8      	adds	r7, #232	; 0xe8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop

080035e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b090      	sub	sp, #64	; 0x40
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003620:	e050      	b.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d04c      	beq.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800362a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800362c:	2b00      	cmp	r3, #0
 800362e:	d007      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0x30>
 8003630:	f7fe fba0 	bl	8001d74 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800363c:	429a      	cmp	r2, r3
 800363e:	d241      	bcs.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003660:	637a      	str	r2, [r7, #52]	; 0x34
 8003662:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e5      	bne.n	8003640 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3314      	adds	r3, #20
 800367a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	e853 3f00 	ldrex	r3, [r3]
 8003682:	613b      	str	r3, [r7, #16]
   return(result);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3314      	adds	r3, #20
 8003692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003694:	623a      	str	r2, [r7, #32]
 8003696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003698:	69f9      	ldr	r1, [r7, #28]
 800369a:	6a3a      	ldr	r2, [r7, #32]
 800369c:	e841 2300 	strex	r3, r2, [r1]
 80036a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e5      	bne.n	8003674 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e00f      	b.n	80036e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d09f      	beq.n	8003622 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3740      	adds	r7, #64	; 0x40
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	88fa      	ldrh	r2, [r7, #6]
 8003704:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	88fa      	ldrh	r2, [r7, #6]
 800370a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2222      	movs	r2, #34	; 0x22
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003738:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0220 	orr.w	r2, r2, #32
 8003758:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003768:	b480      	push	{r7}
 800376a:	b095      	sub	sp, #84	; 0x54
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003790:	643a      	str	r2, [r7, #64]	; 0x40
 8003792:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e5      	bne.n	8003770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3314      	adds	r3, #20
 80037aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3314      	adds	r3, #20
 80037c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e5      	bne.n	80037a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d119      	bne.n	8003814 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	330c      	adds	r3, #12
 80037e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f023 0310 	bic.w	r3, r3, #16
 80037f6:	647b      	str	r3, [r7, #68]	; 0x44
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003800:	61ba      	str	r2, [r7, #24]
 8003802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6979      	ldr	r1, [r7, #20]
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	613b      	str	r3, [r7, #16]
   return(result);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e5      	bne.n	80037e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003822:	bf00      	nop
 8003824:	3754      	adds	r7, #84	; 0x54
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f7ff fecb 	bl	80035e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003856:	b480      	push	{r7}
 8003858:	b085      	sub	sp, #20
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b21      	cmp	r3, #33	; 0x21
 8003868:	d13e      	bne.n	80038e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003872:	d114      	bne.n	800389e <UART_Transmit_IT+0x48>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d110      	bne.n	800389e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003890:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	1c9a      	adds	r2, r3, #2
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	621a      	str	r2, [r3, #32]
 800389c:	e008      	b.n	80038b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	1c59      	adds	r1, r3, #1
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6211      	str	r1, [r2, #32]
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4619      	mov	r1, r3
 80038be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10f      	bne.n	80038e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd fbce 	bl	80010b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b08c      	sub	sp, #48	; 0x30
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b22      	cmp	r3, #34	; 0x22
 8003938:	f040 80ab 	bne.w	8003a92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003944:	d117      	bne.n	8003976 <UART_Receive_IT+0x50>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d113      	bne.n	8003976 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	b29b      	uxth	r3, r3
 8003960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003964:	b29a      	uxth	r2, r3
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	1c9a      	adds	r2, r3, #2
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	629a      	str	r2, [r3, #40]	; 0x28
 8003974:	e026      	b.n	80039c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800397c:	2300      	movs	r3, #0
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003988:	d007      	beq.n	800399a <UART_Receive_IT+0x74>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10a      	bne.n	80039a8 <UART_Receive_IT+0x82>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	e008      	b.n	80039ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4619      	mov	r1, r3
 80039d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d15a      	bne.n	8003a8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0220 	bic.w	r2, r2, #32
 80039e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d135      	bne.n	8003a84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f023 0310 	bic.w	r3, r3, #16
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	330c      	adds	r3, #12
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3e:	623a      	str	r2, [r7, #32]
 8003a40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	69f9      	ldr	r1, [r7, #28]
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e5      	bne.n	8003a1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	d10a      	bne.n	8003a76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff fdbb 	bl	80035f8 <HAL_UARTEx_RxEventCallback>
 8003a82:	e002      	b.n	8003a8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7fd fb51 	bl	800112c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e002      	b.n	8003a94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3730      	adds	r7, #48	; 0x30
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa0:	b0c0      	sub	sp, #256	; 0x100
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab8:	68d9      	ldr	r1, [r3, #12]
 8003aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	ea40 0301 	orr.w	r3, r0, r1
 8003ac4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003af4:	f021 010c 	bic.w	r1, r1, #12
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b02:	430b      	orrs	r3, r1
 8003b04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b16:	6999      	ldr	r1, [r3, #24]
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	ea40 0301 	orr.w	r3, r0, r1
 8003b22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4b8f      	ldr	r3, [pc, #572]	; (8003d68 <UART_SetConfig+0x2cc>)
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d005      	beq.n	8003b3c <UART_SetConfig+0xa0>
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4b8d      	ldr	r3, [pc, #564]	; (8003d6c <UART_SetConfig+0x2d0>)
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d104      	bne.n	8003b46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b3c:	f7ff f8ba 	bl	8002cb4 <HAL_RCC_GetPCLK2Freq>
 8003b40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b44:	e003      	b.n	8003b4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b46:	f7ff f8a1 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8003b4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b58:	f040 810c 	bne.w	8003d74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b60:	2200      	movs	r2, #0
 8003b62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b6e:	4622      	mov	r2, r4
 8003b70:	462b      	mov	r3, r5
 8003b72:	1891      	adds	r1, r2, r2
 8003b74:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b76:	415b      	adcs	r3, r3
 8003b78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b7e:	4621      	mov	r1, r4
 8003b80:	eb12 0801 	adds.w	r8, r2, r1
 8003b84:	4629      	mov	r1, r5
 8003b86:	eb43 0901 	adc.w	r9, r3, r1
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b9e:	4690      	mov	r8, r2
 8003ba0:	4699      	mov	r9, r3
 8003ba2:	4623      	mov	r3, r4
 8003ba4:	eb18 0303 	adds.w	r3, r8, r3
 8003ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bac:	462b      	mov	r3, r5
 8003bae:	eb49 0303 	adc.w	r3, r9, r3
 8003bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bca:	460b      	mov	r3, r1
 8003bcc:	18db      	adds	r3, r3, r3
 8003bce:	653b      	str	r3, [r7, #80]	; 0x50
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	eb42 0303 	adc.w	r3, r2, r3
 8003bd6:	657b      	str	r3, [r7, #84]	; 0x54
 8003bd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003be0:	f7fc ff64 	bl	8000aac <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4b61      	ldr	r3, [pc, #388]	; (8003d70 <UART_SetConfig+0x2d4>)
 8003bea:	fba3 2302 	umull	r2, r3, r3, r2
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	011c      	lsls	r4, r3, #4
 8003bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c04:	4642      	mov	r2, r8
 8003c06:	464b      	mov	r3, r9
 8003c08:	1891      	adds	r1, r2, r2
 8003c0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c0c:	415b      	adcs	r3, r3
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c14:	4641      	mov	r1, r8
 8003c16:	eb12 0a01 	adds.w	sl, r2, r1
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c34:	4692      	mov	sl, r2
 8003c36:	469b      	mov	fp, r3
 8003c38:	4643      	mov	r3, r8
 8003c3a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c42:	464b      	mov	r3, r9
 8003c44:	eb4b 0303 	adc.w	r3, fp, r3
 8003c48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c60:	460b      	mov	r3, r1
 8003c62:	18db      	adds	r3, r3, r3
 8003c64:	643b      	str	r3, [r7, #64]	; 0x40
 8003c66:	4613      	mov	r3, r2
 8003c68:	eb42 0303 	adc.w	r3, r2, r3
 8003c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c76:	f7fc ff19 	bl	8000aac <__aeabi_uldivmod>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4b3b      	ldr	r3, [pc, #236]	; (8003d70 <UART_SetConfig+0x2d4>)
 8003c82:	fba3 2301 	umull	r2, r3, r3, r1
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2264      	movs	r2, #100	; 0x64
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	1acb      	subs	r3, r1, r3
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c96:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <UART_SetConfig+0x2d4>)
 8003c98:	fba3 2302 	umull	r2, r3, r3, r2
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ca4:	441c      	add	r4, r3
 8003ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cb8:	4642      	mov	r2, r8
 8003cba:	464b      	mov	r3, r9
 8003cbc:	1891      	adds	r1, r2, r2
 8003cbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cc0:	415b      	adcs	r3, r3
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cc8:	4641      	mov	r1, r8
 8003cca:	1851      	adds	r1, r2, r1
 8003ccc:	6339      	str	r1, [r7, #48]	; 0x30
 8003cce:	4649      	mov	r1, r9
 8003cd0:	414b      	adcs	r3, r1
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ce0:	4659      	mov	r1, fp
 8003ce2:	00cb      	lsls	r3, r1, #3
 8003ce4:	4651      	mov	r1, sl
 8003ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cea:	4651      	mov	r1, sl
 8003cec:	00ca      	lsls	r2, r1, #3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	189b      	adds	r3, r3, r2
 8003cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cfc:	464b      	mov	r3, r9
 8003cfe:	460a      	mov	r2, r1
 8003d00:	eb42 0303 	adc.w	r3, r2, r3
 8003d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	18db      	adds	r3, r3, r3
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d22:	4613      	mov	r3, r2
 8003d24:	eb42 0303 	adc.w	r3, r2, r3
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d32:	f7fc febb 	bl	8000aac <__aeabi_uldivmod>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <UART_SetConfig+0x2d4>)
 8003d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	2164      	movs	r1, #100	; 0x64
 8003d44:	fb01 f303 	mul.w	r3, r1, r3
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	3332      	adds	r3, #50	; 0x32
 8003d4e:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <UART_SetConfig+0x2d4>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	f003 0207 	and.w	r2, r3, #7
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4422      	add	r2, r4
 8003d62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d64:	e105      	b.n	8003f72 <UART_SetConfig+0x4d6>
 8003d66:	bf00      	nop
 8003d68:	40011000 	.word	0x40011000
 8003d6c:	40011400 	.word	0x40011400
 8003d70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d86:	4642      	mov	r2, r8
 8003d88:	464b      	mov	r3, r9
 8003d8a:	1891      	adds	r1, r2, r2
 8003d8c:	6239      	str	r1, [r7, #32]
 8003d8e:	415b      	adcs	r3, r3
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
 8003d92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d96:	4641      	mov	r1, r8
 8003d98:	1854      	adds	r4, r2, r1
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	eb43 0501 	adc.w	r5, r3, r1
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	00eb      	lsls	r3, r5, #3
 8003daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dae:	00e2      	lsls	r2, r4, #3
 8003db0:	4614      	mov	r4, r2
 8003db2:	461d      	mov	r5, r3
 8003db4:	4643      	mov	r3, r8
 8003db6:	18e3      	adds	r3, r4, r3
 8003db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dbc:	464b      	mov	r3, r9
 8003dbe:	eb45 0303 	adc.w	r3, r5, r3
 8003dc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003de2:	4629      	mov	r1, r5
 8003de4:	008b      	lsls	r3, r1, #2
 8003de6:	4621      	mov	r1, r4
 8003de8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dec:	4621      	mov	r1, r4
 8003dee:	008a      	lsls	r2, r1, #2
 8003df0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003df4:	f7fc fe5a 	bl	8000aac <__aeabi_uldivmod>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4b60      	ldr	r3, [pc, #384]	; (8003f80 <UART_SetConfig+0x4e4>)
 8003dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	011c      	lsls	r4, r3, #4
 8003e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e18:	4642      	mov	r2, r8
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	1891      	adds	r1, r2, r2
 8003e1e:	61b9      	str	r1, [r7, #24]
 8003e20:	415b      	adcs	r3, r3
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e28:	4641      	mov	r1, r8
 8003e2a:	1851      	adds	r1, r2, r1
 8003e2c:	6139      	str	r1, [r7, #16]
 8003e2e:	4649      	mov	r1, r9
 8003e30:	414b      	adcs	r3, r1
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e40:	4659      	mov	r1, fp
 8003e42:	00cb      	lsls	r3, r1, #3
 8003e44:	4651      	mov	r1, sl
 8003e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e4a:	4651      	mov	r1, sl
 8003e4c:	00ca      	lsls	r2, r1, #3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	4619      	mov	r1, r3
 8003e52:	4603      	mov	r3, r0
 8003e54:	4642      	mov	r2, r8
 8003e56:	189b      	adds	r3, r3, r2
 8003e58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e5c:	464b      	mov	r3, r9
 8003e5e:	460a      	mov	r2, r1
 8003e60:	eb42 0303 	adc.w	r3, r2, r3
 8003e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e80:	4649      	mov	r1, r9
 8003e82:	008b      	lsls	r3, r1, #2
 8003e84:	4641      	mov	r1, r8
 8003e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e8a:	4641      	mov	r1, r8
 8003e8c:	008a      	lsls	r2, r1, #2
 8003e8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e92:	f7fc fe0b 	bl	8000aac <__aeabi_uldivmod>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4b39      	ldr	r3, [pc, #228]	; (8003f80 <UART_SetConfig+0x4e4>)
 8003e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	2164      	movs	r1, #100	; 0x64
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	3332      	adds	r3, #50	; 0x32
 8003eae:	4a34      	ldr	r2, [pc, #208]	; (8003f80 <UART_SetConfig+0x4e4>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eba:	441c      	add	r4, r3
 8003ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ec4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ec6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003eca:	4642      	mov	r2, r8
 8003ecc:	464b      	mov	r3, r9
 8003ece:	1891      	adds	r1, r2, r2
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	415b      	adcs	r3, r3
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eda:	4641      	mov	r1, r8
 8003edc:	1851      	adds	r1, r2, r1
 8003ede:	6039      	str	r1, [r7, #0]
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	414b      	adcs	r3, r1
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ef2:	4659      	mov	r1, fp
 8003ef4:	00cb      	lsls	r3, r1, #3
 8003ef6:	4651      	mov	r1, sl
 8003ef8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003efc:	4651      	mov	r1, sl
 8003efe:	00ca      	lsls	r2, r1, #3
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	4603      	mov	r3, r0
 8003f06:	4642      	mov	r2, r8
 8003f08:	189b      	adds	r3, r3, r2
 8003f0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f0c:	464b      	mov	r3, r9
 8003f0e:	460a      	mov	r2, r1
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f20:	667a      	str	r2, [r7, #100]	; 0x64
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f2e:	4649      	mov	r1, r9
 8003f30:	008b      	lsls	r3, r1, #2
 8003f32:	4641      	mov	r1, r8
 8003f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f38:	4641      	mov	r1, r8
 8003f3a:	008a      	lsls	r2, r1, #2
 8003f3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f40:	f7fc fdb4 	bl	8000aac <__aeabi_uldivmod>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <UART_SetConfig+0x4e4>)
 8003f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	2164      	movs	r1, #100	; 0x64
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	3332      	adds	r3, #50	; 0x32
 8003f5c:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <UART_SetConfig+0x4e4>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	f003 020f 	and.w	r2, r3, #15
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4422      	add	r2, r4
 8003f70:	609a      	str	r2, [r3, #8]
}
 8003f72:	bf00      	nop
 8003f74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f7e:	bf00      	nop
 8003f80:	51eb851f 	.word	0x51eb851f

08003f84 <atoi>:
 8003f84:	220a      	movs	r2, #10
 8003f86:	2100      	movs	r1, #0
 8003f88:	f000 b904 	b.w	8004194 <strtol>

08003f8c <__errno>:
 8003f8c:	4b01      	ldr	r3, [pc, #4]	; (8003f94 <__errno+0x8>)
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	20000044 	.word	0x20000044

08003f98 <__libc_init_array>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	4d0d      	ldr	r5, [pc, #52]	; (8003fd0 <__libc_init_array+0x38>)
 8003f9c:	4c0d      	ldr	r4, [pc, #52]	; (8003fd4 <__libc_init_array+0x3c>)
 8003f9e:	1b64      	subs	r4, r4, r5
 8003fa0:	10a4      	asrs	r4, r4, #2
 8003fa2:	2600      	movs	r6, #0
 8003fa4:	42a6      	cmp	r6, r4
 8003fa6:	d109      	bne.n	8003fbc <__libc_init_array+0x24>
 8003fa8:	4d0b      	ldr	r5, [pc, #44]	; (8003fd8 <__libc_init_array+0x40>)
 8003faa:	4c0c      	ldr	r4, [pc, #48]	; (8003fdc <__libc_init_array+0x44>)
 8003fac:	f000 fd4a 	bl	8004a44 <_init>
 8003fb0:	1b64      	subs	r4, r4, r5
 8003fb2:	10a4      	asrs	r4, r4, #2
 8003fb4:	2600      	movs	r6, #0
 8003fb6:	42a6      	cmp	r6, r4
 8003fb8:	d105      	bne.n	8003fc6 <__libc_init_array+0x2e>
 8003fba:	bd70      	pop	{r4, r5, r6, pc}
 8003fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc0:	4798      	blx	r3
 8003fc2:	3601      	adds	r6, #1
 8003fc4:	e7ee      	b.n	8003fa4 <__libc_init_array+0xc>
 8003fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fca:	4798      	blx	r3
 8003fcc:	3601      	adds	r6, #1
 8003fce:	e7f2      	b.n	8003fb6 <__libc_init_array+0x1e>
 8003fd0:	08004cf8 	.word	0x08004cf8
 8003fd4:	08004cf8 	.word	0x08004cf8
 8003fd8:	08004cf8 	.word	0x08004cf8
 8003fdc:	08004cfc 	.word	0x08004cfc

08003fe0 <memset>:
 8003fe0:	4402      	add	r2, r0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d100      	bne.n	8003fea <memset+0xa>
 8003fe8:	4770      	bx	lr
 8003fea:	f803 1b01 	strb.w	r1, [r3], #1
 8003fee:	e7f9      	b.n	8003fe4 <memset+0x4>

08003ff0 <siprintf>:
 8003ff0:	b40e      	push	{r1, r2, r3}
 8003ff2:	b500      	push	{lr}
 8003ff4:	b09c      	sub	sp, #112	; 0x70
 8003ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ff8:	9002      	str	r0, [sp, #8]
 8003ffa:	9006      	str	r0, [sp, #24]
 8003ffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004000:	4809      	ldr	r0, [pc, #36]	; (8004028 <siprintf+0x38>)
 8004002:	9107      	str	r1, [sp, #28]
 8004004:	9104      	str	r1, [sp, #16]
 8004006:	4909      	ldr	r1, [pc, #36]	; (800402c <siprintf+0x3c>)
 8004008:	f853 2b04 	ldr.w	r2, [r3], #4
 800400c:	9105      	str	r1, [sp, #20]
 800400e:	6800      	ldr	r0, [r0, #0]
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	a902      	add	r1, sp, #8
 8004014:	f000 f924 	bl	8004260 <_svfiprintf_r>
 8004018:	9b02      	ldr	r3, [sp, #8]
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	b01c      	add	sp, #112	; 0x70
 8004020:	f85d eb04 	ldr.w	lr, [sp], #4
 8004024:	b003      	add	sp, #12
 8004026:	4770      	bx	lr
 8004028:	20000044 	.word	0x20000044
 800402c:	ffff0208 	.word	0xffff0208

08004030 <strcpy>:
 8004030:	4603      	mov	r3, r0
 8004032:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004036:	f803 2b01 	strb.w	r2, [r3], #1
 800403a:	2a00      	cmp	r2, #0
 800403c:	d1f9      	bne.n	8004032 <strcpy+0x2>
 800403e:	4770      	bx	lr

08004040 <strncmp>:
 8004040:	b510      	push	{r4, lr}
 8004042:	b17a      	cbz	r2, 8004064 <strncmp+0x24>
 8004044:	4603      	mov	r3, r0
 8004046:	3901      	subs	r1, #1
 8004048:	1884      	adds	r4, r0, r2
 800404a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800404e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004052:	4290      	cmp	r0, r2
 8004054:	d101      	bne.n	800405a <strncmp+0x1a>
 8004056:	42a3      	cmp	r3, r4
 8004058:	d101      	bne.n	800405e <strncmp+0x1e>
 800405a:	1a80      	subs	r0, r0, r2
 800405c:	bd10      	pop	{r4, pc}
 800405e:	2800      	cmp	r0, #0
 8004060:	d1f3      	bne.n	800404a <strncmp+0xa>
 8004062:	e7fa      	b.n	800405a <strncmp+0x1a>
 8004064:	4610      	mov	r0, r2
 8004066:	e7f9      	b.n	800405c <strncmp+0x1c>

08004068 <strncpy>:
 8004068:	b510      	push	{r4, lr}
 800406a:	3901      	subs	r1, #1
 800406c:	4603      	mov	r3, r0
 800406e:	b132      	cbz	r2, 800407e <strncpy+0x16>
 8004070:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004074:	f803 4b01 	strb.w	r4, [r3], #1
 8004078:	3a01      	subs	r2, #1
 800407a:	2c00      	cmp	r4, #0
 800407c:	d1f7      	bne.n	800406e <strncpy+0x6>
 800407e:	441a      	add	r2, r3
 8004080:	2100      	movs	r1, #0
 8004082:	4293      	cmp	r3, r2
 8004084:	d100      	bne.n	8004088 <strncpy+0x20>
 8004086:	bd10      	pop	{r4, pc}
 8004088:	f803 1b01 	strb.w	r1, [r3], #1
 800408c:	e7f9      	b.n	8004082 <strncpy+0x1a>
	...

08004090 <_strtol_l.constprop.0>:
 8004090:	2b01      	cmp	r3, #1
 8004092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004096:	d001      	beq.n	800409c <_strtol_l.constprop.0+0xc>
 8004098:	2b24      	cmp	r3, #36	; 0x24
 800409a:	d906      	bls.n	80040aa <_strtol_l.constprop.0+0x1a>
 800409c:	f7ff ff76 	bl	8003f8c <__errno>
 80040a0:	2316      	movs	r3, #22
 80040a2:	6003      	str	r3, [r0, #0]
 80040a4:	2000      	movs	r0, #0
 80040a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004190 <_strtol_l.constprop.0+0x100>
 80040ae:	460d      	mov	r5, r1
 80040b0:	462e      	mov	r6, r5
 80040b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80040ba:	f017 0708 	ands.w	r7, r7, #8
 80040be:	d1f7      	bne.n	80040b0 <_strtol_l.constprop.0+0x20>
 80040c0:	2c2d      	cmp	r4, #45	; 0x2d
 80040c2:	d132      	bne.n	800412a <_strtol_l.constprop.0+0x9a>
 80040c4:	782c      	ldrb	r4, [r5, #0]
 80040c6:	2701      	movs	r7, #1
 80040c8:	1cb5      	adds	r5, r6, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d05b      	beq.n	8004186 <_strtol_l.constprop.0+0xf6>
 80040ce:	2b10      	cmp	r3, #16
 80040d0:	d109      	bne.n	80040e6 <_strtol_l.constprop.0+0x56>
 80040d2:	2c30      	cmp	r4, #48	; 0x30
 80040d4:	d107      	bne.n	80040e6 <_strtol_l.constprop.0+0x56>
 80040d6:	782c      	ldrb	r4, [r5, #0]
 80040d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80040dc:	2c58      	cmp	r4, #88	; 0x58
 80040de:	d14d      	bne.n	800417c <_strtol_l.constprop.0+0xec>
 80040e0:	786c      	ldrb	r4, [r5, #1]
 80040e2:	2310      	movs	r3, #16
 80040e4:	3502      	adds	r5, #2
 80040e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80040ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80040ee:	f04f 0c00 	mov.w	ip, #0
 80040f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80040f6:	4666      	mov	r6, ip
 80040f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80040fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004100:	f1be 0f09 	cmp.w	lr, #9
 8004104:	d816      	bhi.n	8004134 <_strtol_l.constprop.0+0xa4>
 8004106:	4674      	mov	r4, lr
 8004108:	42a3      	cmp	r3, r4
 800410a:	dd24      	ble.n	8004156 <_strtol_l.constprop.0+0xc6>
 800410c:	f1bc 0f00 	cmp.w	ip, #0
 8004110:	db1e      	blt.n	8004150 <_strtol_l.constprop.0+0xc0>
 8004112:	45b1      	cmp	r9, r6
 8004114:	d31c      	bcc.n	8004150 <_strtol_l.constprop.0+0xc0>
 8004116:	d101      	bne.n	800411c <_strtol_l.constprop.0+0x8c>
 8004118:	45a2      	cmp	sl, r4
 800411a:	db19      	blt.n	8004150 <_strtol_l.constprop.0+0xc0>
 800411c:	fb06 4603 	mla	r6, r6, r3, r4
 8004120:	f04f 0c01 	mov.w	ip, #1
 8004124:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004128:	e7e8      	b.n	80040fc <_strtol_l.constprop.0+0x6c>
 800412a:	2c2b      	cmp	r4, #43	; 0x2b
 800412c:	bf04      	itt	eq
 800412e:	782c      	ldrbeq	r4, [r5, #0]
 8004130:	1cb5      	addeq	r5, r6, #2
 8004132:	e7ca      	b.n	80040ca <_strtol_l.constprop.0+0x3a>
 8004134:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004138:	f1be 0f19 	cmp.w	lr, #25
 800413c:	d801      	bhi.n	8004142 <_strtol_l.constprop.0+0xb2>
 800413e:	3c37      	subs	r4, #55	; 0x37
 8004140:	e7e2      	b.n	8004108 <_strtol_l.constprop.0+0x78>
 8004142:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004146:	f1be 0f19 	cmp.w	lr, #25
 800414a:	d804      	bhi.n	8004156 <_strtol_l.constprop.0+0xc6>
 800414c:	3c57      	subs	r4, #87	; 0x57
 800414e:	e7db      	b.n	8004108 <_strtol_l.constprop.0+0x78>
 8004150:	f04f 3cff 	mov.w	ip, #4294967295
 8004154:	e7e6      	b.n	8004124 <_strtol_l.constprop.0+0x94>
 8004156:	f1bc 0f00 	cmp.w	ip, #0
 800415a:	da05      	bge.n	8004168 <_strtol_l.constprop.0+0xd8>
 800415c:	2322      	movs	r3, #34	; 0x22
 800415e:	6003      	str	r3, [r0, #0]
 8004160:	4646      	mov	r6, r8
 8004162:	b942      	cbnz	r2, 8004176 <_strtol_l.constprop.0+0xe6>
 8004164:	4630      	mov	r0, r6
 8004166:	e79e      	b.n	80040a6 <_strtol_l.constprop.0+0x16>
 8004168:	b107      	cbz	r7, 800416c <_strtol_l.constprop.0+0xdc>
 800416a:	4276      	negs	r6, r6
 800416c:	2a00      	cmp	r2, #0
 800416e:	d0f9      	beq.n	8004164 <_strtol_l.constprop.0+0xd4>
 8004170:	f1bc 0f00 	cmp.w	ip, #0
 8004174:	d000      	beq.n	8004178 <_strtol_l.constprop.0+0xe8>
 8004176:	1e69      	subs	r1, r5, #1
 8004178:	6011      	str	r1, [r2, #0]
 800417a:	e7f3      	b.n	8004164 <_strtol_l.constprop.0+0xd4>
 800417c:	2430      	movs	r4, #48	; 0x30
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1b1      	bne.n	80040e6 <_strtol_l.constprop.0+0x56>
 8004182:	2308      	movs	r3, #8
 8004184:	e7af      	b.n	80040e6 <_strtol_l.constprop.0+0x56>
 8004186:	2c30      	cmp	r4, #48	; 0x30
 8004188:	d0a5      	beq.n	80040d6 <_strtol_l.constprop.0+0x46>
 800418a:	230a      	movs	r3, #10
 800418c:	e7ab      	b.n	80040e6 <_strtol_l.constprop.0+0x56>
 800418e:	bf00      	nop
 8004190:	08004bbd 	.word	0x08004bbd

08004194 <strtol>:
 8004194:	4613      	mov	r3, r2
 8004196:	460a      	mov	r2, r1
 8004198:	4601      	mov	r1, r0
 800419a:	4802      	ldr	r0, [pc, #8]	; (80041a4 <strtol+0x10>)
 800419c:	6800      	ldr	r0, [r0, #0]
 800419e:	f7ff bf77 	b.w	8004090 <_strtol_l.constprop.0>
 80041a2:	bf00      	nop
 80041a4:	20000044 	.word	0x20000044

080041a8 <__ssputs_r>:
 80041a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ac:	688e      	ldr	r6, [r1, #8]
 80041ae:	429e      	cmp	r6, r3
 80041b0:	4682      	mov	sl, r0
 80041b2:	460c      	mov	r4, r1
 80041b4:	4690      	mov	r8, r2
 80041b6:	461f      	mov	r7, r3
 80041b8:	d838      	bhi.n	800422c <__ssputs_r+0x84>
 80041ba:	898a      	ldrh	r2, [r1, #12]
 80041bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041c0:	d032      	beq.n	8004228 <__ssputs_r+0x80>
 80041c2:	6825      	ldr	r5, [r4, #0]
 80041c4:	6909      	ldr	r1, [r1, #16]
 80041c6:	eba5 0901 	sub.w	r9, r5, r1
 80041ca:	6965      	ldr	r5, [r4, #20]
 80041cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041d4:	3301      	adds	r3, #1
 80041d6:	444b      	add	r3, r9
 80041d8:	106d      	asrs	r5, r5, #1
 80041da:	429d      	cmp	r5, r3
 80041dc:	bf38      	it	cc
 80041de:	461d      	movcc	r5, r3
 80041e0:	0553      	lsls	r3, r2, #21
 80041e2:	d531      	bpl.n	8004248 <__ssputs_r+0xa0>
 80041e4:	4629      	mov	r1, r5
 80041e6:	f000 fb63 	bl	80048b0 <_malloc_r>
 80041ea:	4606      	mov	r6, r0
 80041ec:	b950      	cbnz	r0, 8004204 <__ssputs_r+0x5c>
 80041ee:	230c      	movs	r3, #12
 80041f0:	f8ca 3000 	str.w	r3, [sl]
 80041f4:	89a3      	ldrh	r3, [r4, #12]
 80041f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041fa:	81a3      	strh	r3, [r4, #12]
 80041fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004204:	6921      	ldr	r1, [r4, #16]
 8004206:	464a      	mov	r2, r9
 8004208:	f000 fabe 	bl	8004788 <memcpy>
 800420c:	89a3      	ldrh	r3, [r4, #12]
 800420e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004216:	81a3      	strh	r3, [r4, #12]
 8004218:	6126      	str	r6, [r4, #16]
 800421a:	6165      	str	r5, [r4, #20]
 800421c:	444e      	add	r6, r9
 800421e:	eba5 0509 	sub.w	r5, r5, r9
 8004222:	6026      	str	r6, [r4, #0]
 8004224:	60a5      	str	r5, [r4, #8]
 8004226:	463e      	mov	r6, r7
 8004228:	42be      	cmp	r6, r7
 800422a:	d900      	bls.n	800422e <__ssputs_r+0x86>
 800422c:	463e      	mov	r6, r7
 800422e:	6820      	ldr	r0, [r4, #0]
 8004230:	4632      	mov	r2, r6
 8004232:	4641      	mov	r1, r8
 8004234:	f000 fab6 	bl	80047a4 <memmove>
 8004238:	68a3      	ldr	r3, [r4, #8]
 800423a:	1b9b      	subs	r3, r3, r6
 800423c:	60a3      	str	r3, [r4, #8]
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	4433      	add	r3, r6
 8004242:	6023      	str	r3, [r4, #0]
 8004244:	2000      	movs	r0, #0
 8004246:	e7db      	b.n	8004200 <__ssputs_r+0x58>
 8004248:	462a      	mov	r2, r5
 800424a:	f000 fba5 	bl	8004998 <_realloc_r>
 800424e:	4606      	mov	r6, r0
 8004250:	2800      	cmp	r0, #0
 8004252:	d1e1      	bne.n	8004218 <__ssputs_r+0x70>
 8004254:	6921      	ldr	r1, [r4, #16]
 8004256:	4650      	mov	r0, sl
 8004258:	f000 fabe 	bl	80047d8 <_free_r>
 800425c:	e7c7      	b.n	80041ee <__ssputs_r+0x46>
	...

08004260 <_svfiprintf_r>:
 8004260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004264:	4698      	mov	r8, r3
 8004266:	898b      	ldrh	r3, [r1, #12]
 8004268:	061b      	lsls	r3, r3, #24
 800426a:	b09d      	sub	sp, #116	; 0x74
 800426c:	4607      	mov	r7, r0
 800426e:	460d      	mov	r5, r1
 8004270:	4614      	mov	r4, r2
 8004272:	d50e      	bpl.n	8004292 <_svfiprintf_r+0x32>
 8004274:	690b      	ldr	r3, [r1, #16]
 8004276:	b963      	cbnz	r3, 8004292 <_svfiprintf_r+0x32>
 8004278:	2140      	movs	r1, #64	; 0x40
 800427a:	f000 fb19 	bl	80048b0 <_malloc_r>
 800427e:	6028      	str	r0, [r5, #0]
 8004280:	6128      	str	r0, [r5, #16]
 8004282:	b920      	cbnz	r0, 800428e <_svfiprintf_r+0x2e>
 8004284:	230c      	movs	r3, #12
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	e0d1      	b.n	8004432 <_svfiprintf_r+0x1d2>
 800428e:	2340      	movs	r3, #64	; 0x40
 8004290:	616b      	str	r3, [r5, #20]
 8004292:	2300      	movs	r3, #0
 8004294:	9309      	str	r3, [sp, #36]	; 0x24
 8004296:	2320      	movs	r3, #32
 8004298:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800429c:	f8cd 800c 	str.w	r8, [sp, #12]
 80042a0:	2330      	movs	r3, #48	; 0x30
 80042a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800444c <_svfiprintf_r+0x1ec>
 80042a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042aa:	f04f 0901 	mov.w	r9, #1
 80042ae:	4623      	mov	r3, r4
 80042b0:	469a      	mov	sl, r3
 80042b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042b6:	b10a      	cbz	r2, 80042bc <_svfiprintf_r+0x5c>
 80042b8:	2a25      	cmp	r2, #37	; 0x25
 80042ba:	d1f9      	bne.n	80042b0 <_svfiprintf_r+0x50>
 80042bc:	ebba 0b04 	subs.w	fp, sl, r4
 80042c0:	d00b      	beq.n	80042da <_svfiprintf_r+0x7a>
 80042c2:	465b      	mov	r3, fp
 80042c4:	4622      	mov	r2, r4
 80042c6:	4629      	mov	r1, r5
 80042c8:	4638      	mov	r0, r7
 80042ca:	f7ff ff6d 	bl	80041a8 <__ssputs_r>
 80042ce:	3001      	adds	r0, #1
 80042d0:	f000 80aa 	beq.w	8004428 <_svfiprintf_r+0x1c8>
 80042d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042d6:	445a      	add	r2, fp
 80042d8:	9209      	str	r2, [sp, #36]	; 0x24
 80042da:	f89a 3000 	ldrb.w	r3, [sl]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80a2 	beq.w	8004428 <_svfiprintf_r+0x1c8>
 80042e4:	2300      	movs	r3, #0
 80042e6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ee:	f10a 0a01 	add.w	sl, sl, #1
 80042f2:	9304      	str	r3, [sp, #16]
 80042f4:	9307      	str	r3, [sp, #28]
 80042f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042fa:	931a      	str	r3, [sp, #104]	; 0x68
 80042fc:	4654      	mov	r4, sl
 80042fe:	2205      	movs	r2, #5
 8004300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004304:	4851      	ldr	r0, [pc, #324]	; (800444c <_svfiprintf_r+0x1ec>)
 8004306:	f7fb ff8b 	bl	8000220 <memchr>
 800430a:	9a04      	ldr	r2, [sp, #16]
 800430c:	b9d8      	cbnz	r0, 8004346 <_svfiprintf_r+0xe6>
 800430e:	06d0      	lsls	r0, r2, #27
 8004310:	bf44      	itt	mi
 8004312:	2320      	movmi	r3, #32
 8004314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004318:	0711      	lsls	r1, r2, #28
 800431a:	bf44      	itt	mi
 800431c:	232b      	movmi	r3, #43	; 0x2b
 800431e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004322:	f89a 3000 	ldrb.w	r3, [sl]
 8004326:	2b2a      	cmp	r3, #42	; 0x2a
 8004328:	d015      	beq.n	8004356 <_svfiprintf_r+0xf6>
 800432a:	9a07      	ldr	r2, [sp, #28]
 800432c:	4654      	mov	r4, sl
 800432e:	2000      	movs	r0, #0
 8004330:	f04f 0c0a 	mov.w	ip, #10
 8004334:	4621      	mov	r1, r4
 8004336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800433a:	3b30      	subs	r3, #48	; 0x30
 800433c:	2b09      	cmp	r3, #9
 800433e:	d94e      	bls.n	80043de <_svfiprintf_r+0x17e>
 8004340:	b1b0      	cbz	r0, 8004370 <_svfiprintf_r+0x110>
 8004342:	9207      	str	r2, [sp, #28]
 8004344:	e014      	b.n	8004370 <_svfiprintf_r+0x110>
 8004346:	eba0 0308 	sub.w	r3, r0, r8
 800434a:	fa09 f303 	lsl.w	r3, r9, r3
 800434e:	4313      	orrs	r3, r2
 8004350:	9304      	str	r3, [sp, #16]
 8004352:	46a2      	mov	sl, r4
 8004354:	e7d2      	b.n	80042fc <_svfiprintf_r+0x9c>
 8004356:	9b03      	ldr	r3, [sp, #12]
 8004358:	1d19      	adds	r1, r3, #4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	9103      	str	r1, [sp, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	bfbb      	ittet	lt
 8004362:	425b      	neglt	r3, r3
 8004364:	f042 0202 	orrlt.w	r2, r2, #2
 8004368:	9307      	strge	r3, [sp, #28]
 800436a:	9307      	strlt	r3, [sp, #28]
 800436c:	bfb8      	it	lt
 800436e:	9204      	strlt	r2, [sp, #16]
 8004370:	7823      	ldrb	r3, [r4, #0]
 8004372:	2b2e      	cmp	r3, #46	; 0x2e
 8004374:	d10c      	bne.n	8004390 <_svfiprintf_r+0x130>
 8004376:	7863      	ldrb	r3, [r4, #1]
 8004378:	2b2a      	cmp	r3, #42	; 0x2a
 800437a:	d135      	bne.n	80043e8 <_svfiprintf_r+0x188>
 800437c:	9b03      	ldr	r3, [sp, #12]
 800437e:	1d1a      	adds	r2, r3, #4
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	9203      	str	r2, [sp, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	bfb8      	it	lt
 8004388:	f04f 33ff 	movlt.w	r3, #4294967295
 800438c:	3402      	adds	r4, #2
 800438e:	9305      	str	r3, [sp, #20]
 8004390:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800445c <_svfiprintf_r+0x1fc>
 8004394:	7821      	ldrb	r1, [r4, #0]
 8004396:	2203      	movs	r2, #3
 8004398:	4650      	mov	r0, sl
 800439a:	f7fb ff41 	bl	8000220 <memchr>
 800439e:	b140      	cbz	r0, 80043b2 <_svfiprintf_r+0x152>
 80043a0:	2340      	movs	r3, #64	; 0x40
 80043a2:	eba0 000a 	sub.w	r0, r0, sl
 80043a6:	fa03 f000 	lsl.w	r0, r3, r0
 80043aa:	9b04      	ldr	r3, [sp, #16]
 80043ac:	4303      	orrs	r3, r0
 80043ae:	3401      	adds	r4, #1
 80043b0:	9304      	str	r3, [sp, #16]
 80043b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b6:	4826      	ldr	r0, [pc, #152]	; (8004450 <_svfiprintf_r+0x1f0>)
 80043b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043bc:	2206      	movs	r2, #6
 80043be:	f7fb ff2f 	bl	8000220 <memchr>
 80043c2:	2800      	cmp	r0, #0
 80043c4:	d038      	beq.n	8004438 <_svfiprintf_r+0x1d8>
 80043c6:	4b23      	ldr	r3, [pc, #140]	; (8004454 <_svfiprintf_r+0x1f4>)
 80043c8:	bb1b      	cbnz	r3, 8004412 <_svfiprintf_r+0x1b2>
 80043ca:	9b03      	ldr	r3, [sp, #12]
 80043cc:	3307      	adds	r3, #7
 80043ce:	f023 0307 	bic.w	r3, r3, #7
 80043d2:	3308      	adds	r3, #8
 80043d4:	9303      	str	r3, [sp, #12]
 80043d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d8:	4433      	add	r3, r6
 80043da:	9309      	str	r3, [sp, #36]	; 0x24
 80043dc:	e767      	b.n	80042ae <_svfiprintf_r+0x4e>
 80043de:	fb0c 3202 	mla	r2, ip, r2, r3
 80043e2:	460c      	mov	r4, r1
 80043e4:	2001      	movs	r0, #1
 80043e6:	e7a5      	b.n	8004334 <_svfiprintf_r+0xd4>
 80043e8:	2300      	movs	r3, #0
 80043ea:	3401      	adds	r4, #1
 80043ec:	9305      	str	r3, [sp, #20]
 80043ee:	4619      	mov	r1, r3
 80043f0:	f04f 0c0a 	mov.w	ip, #10
 80043f4:	4620      	mov	r0, r4
 80043f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043fa:	3a30      	subs	r2, #48	; 0x30
 80043fc:	2a09      	cmp	r2, #9
 80043fe:	d903      	bls.n	8004408 <_svfiprintf_r+0x1a8>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0c5      	beq.n	8004390 <_svfiprintf_r+0x130>
 8004404:	9105      	str	r1, [sp, #20]
 8004406:	e7c3      	b.n	8004390 <_svfiprintf_r+0x130>
 8004408:	fb0c 2101 	mla	r1, ip, r1, r2
 800440c:	4604      	mov	r4, r0
 800440e:	2301      	movs	r3, #1
 8004410:	e7f0      	b.n	80043f4 <_svfiprintf_r+0x194>
 8004412:	ab03      	add	r3, sp, #12
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	462a      	mov	r2, r5
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <_svfiprintf_r+0x1f8>)
 800441a:	a904      	add	r1, sp, #16
 800441c:	4638      	mov	r0, r7
 800441e:	f3af 8000 	nop.w
 8004422:	1c42      	adds	r2, r0, #1
 8004424:	4606      	mov	r6, r0
 8004426:	d1d6      	bne.n	80043d6 <_svfiprintf_r+0x176>
 8004428:	89ab      	ldrh	r3, [r5, #12]
 800442a:	065b      	lsls	r3, r3, #25
 800442c:	f53f af2c 	bmi.w	8004288 <_svfiprintf_r+0x28>
 8004430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004432:	b01d      	add	sp, #116	; 0x74
 8004434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004438:	ab03      	add	r3, sp, #12
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	462a      	mov	r2, r5
 800443e:	4b06      	ldr	r3, [pc, #24]	; (8004458 <_svfiprintf_r+0x1f8>)
 8004440:	a904      	add	r1, sp, #16
 8004442:	4638      	mov	r0, r7
 8004444:	f000 f87a 	bl	800453c <_printf_i>
 8004448:	e7eb      	b.n	8004422 <_svfiprintf_r+0x1c2>
 800444a:	bf00      	nop
 800444c:	08004cbd 	.word	0x08004cbd
 8004450:	08004cc7 	.word	0x08004cc7
 8004454:	00000000 	.word	0x00000000
 8004458:	080041a9 	.word	0x080041a9
 800445c:	08004cc3 	.word	0x08004cc3

08004460 <_printf_common>:
 8004460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004464:	4616      	mov	r6, r2
 8004466:	4699      	mov	r9, r3
 8004468:	688a      	ldr	r2, [r1, #8]
 800446a:	690b      	ldr	r3, [r1, #16]
 800446c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004470:	4293      	cmp	r3, r2
 8004472:	bfb8      	it	lt
 8004474:	4613      	movlt	r3, r2
 8004476:	6033      	str	r3, [r6, #0]
 8004478:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800447c:	4607      	mov	r7, r0
 800447e:	460c      	mov	r4, r1
 8004480:	b10a      	cbz	r2, 8004486 <_printf_common+0x26>
 8004482:	3301      	adds	r3, #1
 8004484:	6033      	str	r3, [r6, #0]
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	0699      	lsls	r1, r3, #26
 800448a:	bf42      	ittt	mi
 800448c:	6833      	ldrmi	r3, [r6, #0]
 800448e:	3302      	addmi	r3, #2
 8004490:	6033      	strmi	r3, [r6, #0]
 8004492:	6825      	ldr	r5, [r4, #0]
 8004494:	f015 0506 	ands.w	r5, r5, #6
 8004498:	d106      	bne.n	80044a8 <_printf_common+0x48>
 800449a:	f104 0a19 	add.w	sl, r4, #25
 800449e:	68e3      	ldr	r3, [r4, #12]
 80044a0:	6832      	ldr	r2, [r6, #0]
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	42ab      	cmp	r3, r5
 80044a6:	dc26      	bgt.n	80044f6 <_printf_common+0x96>
 80044a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044ac:	1e13      	subs	r3, r2, #0
 80044ae:	6822      	ldr	r2, [r4, #0]
 80044b0:	bf18      	it	ne
 80044b2:	2301      	movne	r3, #1
 80044b4:	0692      	lsls	r2, r2, #26
 80044b6:	d42b      	bmi.n	8004510 <_printf_common+0xb0>
 80044b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044bc:	4649      	mov	r1, r9
 80044be:	4638      	mov	r0, r7
 80044c0:	47c0      	blx	r8
 80044c2:	3001      	adds	r0, #1
 80044c4:	d01e      	beq.n	8004504 <_printf_common+0xa4>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	68e5      	ldr	r5, [r4, #12]
 80044ca:	6832      	ldr	r2, [r6, #0]
 80044cc:	f003 0306 	and.w	r3, r3, #6
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	bf08      	it	eq
 80044d4:	1aad      	subeq	r5, r5, r2
 80044d6:	68a3      	ldr	r3, [r4, #8]
 80044d8:	6922      	ldr	r2, [r4, #16]
 80044da:	bf0c      	ite	eq
 80044dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044e0:	2500      	movne	r5, #0
 80044e2:	4293      	cmp	r3, r2
 80044e4:	bfc4      	itt	gt
 80044e6:	1a9b      	subgt	r3, r3, r2
 80044e8:	18ed      	addgt	r5, r5, r3
 80044ea:	2600      	movs	r6, #0
 80044ec:	341a      	adds	r4, #26
 80044ee:	42b5      	cmp	r5, r6
 80044f0:	d11a      	bne.n	8004528 <_printf_common+0xc8>
 80044f2:	2000      	movs	r0, #0
 80044f4:	e008      	b.n	8004508 <_printf_common+0xa8>
 80044f6:	2301      	movs	r3, #1
 80044f8:	4652      	mov	r2, sl
 80044fa:	4649      	mov	r1, r9
 80044fc:	4638      	mov	r0, r7
 80044fe:	47c0      	blx	r8
 8004500:	3001      	adds	r0, #1
 8004502:	d103      	bne.n	800450c <_printf_common+0xac>
 8004504:	f04f 30ff 	mov.w	r0, #4294967295
 8004508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450c:	3501      	adds	r5, #1
 800450e:	e7c6      	b.n	800449e <_printf_common+0x3e>
 8004510:	18e1      	adds	r1, r4, r3
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	2030      	movs	r0, #48	; 0x30
 8004516:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800451a:	4422      	add	r2, r4
 800451c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004520:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004524:	3302      	adds	r3, #2
 8004526:	e7c7      	b.n	80044b8 <_printf_common+0x58>
 8004528:	2301      	movs	r3, #1
 800452a:	4622      	mov	r2, r4
 800452c:	4649      	mov	r1, r9
 800452e:	4638      	mov	r0, r7
 8004530:	47c0      	blx	r8
 8004532:	3001      	adds	r0, #1
 8004534:	d0e6      	beq.n	8004504 <_printf_common+0xa4>
 8004536:	3601      	adds	r6, #1
 8004538:	e7d9      	b.n	80044ee <_printf_common+0x8e>
	...

0800453c <_printf_i>:
 800453c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004540:	7e0f      	ldrb	r7, [r1, #24]
 8004542:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004544:	2f78      	cmp	r7, #120	; 0x78
 8004546:	4691      	mov	r9, r2
 8004548:	4680      	mov	r8, r0
 800454a:	460c      	mov	r4, r1
 800454c:	469a      	mov	sl, r3
 800454e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004552:	d807      	bhi.n	8004564 <_printf_i+0x28>
 8004554:	2f62      	cmp	r7, #98	; 0x62
 8004556:	d80a      	bhi.n	800456e <_printf_i+0x32>
 8004558:	2f00      	cmp	r7, #0
 800455a:	f000 80d8 	beq.w	800470e <_printf_i+0x1d2>
 800455e:	2f58      	cmp	r7, #88	; 0x58
 8004560:	f000 80a3 	beq.w	80046aa <_printf_i+0x16e>
 8004564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004568:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800456c:	e03a      	b.n	80045e4 <_printf_i+0xa8>
 800456e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004572:	2b15      	cmp	r3, #21
 8004574:	d8f6      	bhi.n	8004564 <_printf_i+0x28>
 8004576:	a101      	add	r1, pc, #4	; (adr r1, 800457c <_printf_i+0x40>)
 8004578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800457c:	080045d5 	.word	0x080045d5
 8004580:	080045e9 	.word	0x080045e9
 8004584:	08004565 	.word	0x08004565
 8004588:	08004565 	.word	0x08004565
 800458c:	08004565 	.word	0x08004565
 8004590:	08004565 	.word	0x08004565
 8004594:	080045e9 	.word	0x080045e9
 8004598:	08004565 	.word	0x08004565
 800459c:	08004565 	.word	0x08004565
 80045a0:	08004565 	.word	0x08004565
 80045a4:	08004565 	.word	0x08004565
 80045a8:	080046f5 	.word	0x080046f5
 80045ac:	08004619 	.word	0x08004619
 80045b0:	080046d7 	.word	0x080046d7
 80045b4:	08004565 	.word	0x08004565
 80045b8:	08004565 	.word	0x08004565
 80045bc:	08004717 	.word	0x08004717
 80045c0:	08004565 	.word	0x08004565
 80045c4:	08004619 	.word	0x08004619
 80045c8:	08004565 	.word	0x08004565
 80045cc:	08004565 	.word	0x08004565
 80045d0:	080046df 	.word	0x080046df
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	1d1a      	adds	r2, r3, #4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	602a      	str	r2, [r5, #0]
 80045dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0a3      	b.n	8004730 <_printf_i+0x1f4>
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	6829      	ldr	r1, [r5, #0]
 80045ec:	0606      	lsls	r6, r0, #24
 80045ee:	f101 0304 	add.w	r3, r1, #4
 80045f2:	d50a      	bpl.n	800460a <_printf_i+0xce>
 80045f4:	680e      	ldr	r6, [r1, #0]
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	2e00      	cmp	r6, #0
 80045fa:	da03      	bge.n	8004604 <_printf_i+0xc8>
 80045fc:	232d      	movs	r3, #45	; 0x2d
 80045fe:	4276      	negs	r6, r6
 8004600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004604:	485e      	ldr	r0, [pc, #376]	; (8004780 <_printf_i+0x244>)
 8004606:	230a      	movs	r3, #10
 8004608:	e019      	b.n	800463e <_printf_i+0x102>
 800460a:	680e      	ldr	r6, [r1, #0]
 800460c:	602b      	str	r3, [r5, #0]
 800460e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004612:	bf18      	it	ne
 8004614:	b236      	sxthne	r6, r6
 8004616:	e7ef      	b.n	80045f8 <_printf_i+0xbc>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	6820      	ldr	r0, [r4, #0]
 800461c:	1d19      	adds	r1, r3, #4
 800461e:	6029      	str	r1, [r5, #0]
 8004620:	0601      	lsls	r1, r0, #24
 8004622:	d501      	bpl.n	8004628 <_printf_i+0xec>
 8004624:	681e      	ldr	r6, [r3, #0]
 8004626:	e002      	b.n	800462e <_printf_i+0xf2>
 8004628:	0646      	lsls	r6, r0, #25
 800462a:	d5fb      	bpl.n	8004624 <_printf_i+0xe8>
 800462c:	881e      	ldrh	r6, [r3, #0]
 800462e:	4854      	ldr	r0, [pc, #336]	; (8004780 <_printf_i+0x244>)
 8004630:	2f6f      	cmp	r7, #111	; 0x6f
 8004632:	bf0c      	ite	eq
 8004634:	2308      	moveq	r3, #8
 8004636:	230a      	movne	r3, #10
 8004638:	2100      	movs	r1, #0
 800463a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800463e:	6865      	ldr	r5, [r4, #4]
 8004640:	60a5      	str	r5, [r4, #8]
 8004642:	2d00      	cmp	r5, #0
 8004644:	bfa2      	ittt	ge
 8004646:	6821      	ldrge	r1, [r4, #0]
 8004648:	f021 0104 	bicge.w	r1, r1, #4
 800464c:	6021      	strge	r1, [r4, #0]
 800464e:	b90e      	cbnz	r6, 8004654 <_printf_i+0x118>
 8004650:	2d00      	cmp	r5, #0
 8004652:	d04d      	beq.n	80046f0 <_printf_i+0x1b4>
 8004654:	4615      	mov	r5, r2
 8004656:	fbb6 f1f3 	udiv	r1, r6, r3
 800465a:	fb03 6711 	mls	r7, r3, r1, r6
 800465e:	5dc7      	ldrb	r7, [r0, r7]
 8004660:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004664:	4637      	mov	r7, r6
 8004666:	42bb      	cmp	r3, r7
 8004668:	460e      	mov	r6, r1
 800466a:	d9f4      	bls.n	8004656 <_printf_i+0x11a>
 800466c:	2b08      	cmp	r3, #8
 800466e:	d10b      	bne.n	8004688 <_printf_i+0x14c>
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	07de      	lsls	r6, r3, #31
 8004674:	d508      	bpl.n	8004688 <_printf_i+0x14c>
 8004676:	6923      	ldr	r3, [r4, #16]
 8004678:	6861      	ldr	r1, [r4, #4]
 800467a:	4299      	cmp	r1, r3
 800467c:	bfde      	ittt	le
 800467e:	2330      	movle	r3, #48	; 0x30
 8004680:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004684:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004688:	1b52      	subs	r2, r2, r5
 800468a:	6122      	str	r2, [r4, #16]
 800468c:	f8cd a000 	str.w	sl, [sp]
 8004690:	464b      	mov	r3, r9
 8004692:	aa03      	add	r2, sp, #12
 8004694:	4621      	mov	r1, r4
 8004696:	4640      	mov	r0, r8
 8004698:	f7ff fee2 	bl	8004460 <_printf_common>
 800469c:	3001      	adds	r0, #1
 800469e:	d14c      	bne.n	800473a <_printf_i+0x1fe>
 80046a0:	f04f 30ff 	mov.w	r0, #4294967295
 80046a4:	b004      	add	sp, #16
 80046a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046aa:	4835      	ldr	r0, [pc, #212]	; (8004780 <_printf_i+0x244>)
 80046ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046b0:	6829      	ldr	r1, [r5, #0]
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80046b8:	6029      	str	r1, [r5, #0]
 80046ba:	061d      	lsls	r5, r3, #24
 80046bc:	d514      	bpl.n	80046e8 <_printf_i+0x1ac>
 80046be:	07df      	lsls	r7, r3, #31
 80046c0:	bf44      	itt	mi
 80046c2:	f043 0320 	orrmi.w	r3, r3, #32
 80046c6:	6023      	strmi	r3, [r4, #0]
 80046c8:	b91e      	cbnz	r6, 80046d2 <_printf_i+0x196>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	f023 0320 	bic.w	r3, r3, #32
 80046d0:	6023      	str	r3, [r4, #0]
 80046d2:	2310      	movs	r3, #16
 80046d4:	e7b0      	b.n	8004638 <_printf_i+0xfc>
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	f043 0320 	orr.w	r3, r3, #32
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	2378      	movs	r3, #120	; 0x78
 80046e0:	4828      	ldr	r0, [pc, #160]	; (8004784 <_printf_i+0x248>)
 80046e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046e6:	e7e3      	b.n	80046b0 <_printf_i+0x174>
 80046e8:	0659      	lsls	r1, r3, #25
 80046ea:	bf48      	it	mi
 80046ec:	b2b6      	uxthmi	r6, r6
 80046ee:	e7e6      	b.n	80046be <_printf_i+0x182>
 80046f0:	4615      	mov	r5, r2
 80046f2:	e7bb      	b.n	800466c <_printf_i+0x130>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	6826      	ldr	r6, [r4, #0]
 80046f8:	6961      	ldr	r1, [r4, #20]
 80046fa:	1d18      	adds	r0, r3, #4
 80046fc:	6028      	str	r0, [r5, #0]
 80046fe:	0635      	lsls	r5, r6, #24
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	d501      	bpl.n	8004708 <_printf_i+0x1cc>
 8004704:	6019      	str	r1, [r3, #0]
 8004706:	e002      	b.n	800470e <_printf_i+0x1d2>
 8004708:	0670      	lsls	r0, r6, #25
 800470a:	d5fb      	bpl.n	8004704 <_printf_i+0x1c8>
 800470c:	8019      	strh	r1, [r3, #0]
 800470e:	2300      	movs	r3, #0
 8004710:	6123      	str	r3, [r4, #16]
 8004712:	4615      	mov	r5, r2
 8004714:	e7ba      	b.n	800468c <_printf_i+0x150>
 8004716:	682b      	ldr	r3, [r5, #0]
 8004718:	1d1a      	adds	r2, r3, #4
 800471a:	602a      	str	r2, [r5, #0]
 800471c:	681d      	ldr	r5, [r3, #0]
 800471e:	6862      	ldr	r2, [r4, #4]
 8004720:	2100      	movs	r1, #0
 8004722:	4628      	mov	r0, r5
 8004724:	f7fb fd7c 	bl	8000220 <memchr>
 8004728:	b108      	cbz	r0, 800472e <_printf_i+0x1f2>
 800472a:	1b40      	subs	r0, r0, r5
 800472c:	6060      	str	r0, [r4, #4]
 800472e:	6863      	ldr	r3, [r4, #4]
 8004730:	6123      	str	r3, [r4, #16]
 8004732:	2300      	movs	r3, #0
 8004734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004738:	e7a8      	b.n	800468c <_printf_i+0x150>
 800473a:	6923      	ldr	r3, [r4, #16]
 800473c:	462a      	mov	r2, r5
 800473e:	4649      	mov	r1, r9
 8004740:	4640      	mov	r0, r8
 8004742:	47d0      	blx	sl
 8004744:	3001      	adds	r0, #1
 8004746:	d0ab      	beq.n	80046a0 <_printf_i+0x164>
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	079b      	lsls	r3, r3, #30
 800474c:	d413      	bmi.n	8004776 <_printf_i+0x23a>
 800474e:	68e0      	ldr	r0, [r4, #12]
 8004750:	9b03      	ldr	r3, [sp, #12]
 8004752:	4298      	cmp	r0, r3
 8004754:	bfb8      	it	lt
 8004756:	4618      	movlt	r0, r3
 8004758:	e7a4      	b.n	80046a4 <_printf_i+0x168>
 800475a:	2301      	movs	r3, #1
 800475c:	4632      	mov	r2, r6
 800475e:	4649      	mov	r1, r9
 8004760:	4640      	mov	r0, r8
 8004762:	47d0      	blx	sl
 8004764:	3001      	adds	r0, #1
 8004766:	d09b      	beq.n	80046a0 <_printf_i+0x164>
 8004768:	3501      	adds	r5, #1
 800476a:	68e3      	ldr	r3, [r4, #12]
 800476c:	9903      	ldr	r1, [sp, #12]
 800476e:	1a5b      	subs	r3, r3, r1
 8004770:	42ab      	cmp	r3, r5
 8004772:	dcf2      	bgt.n	800475a <_printf_i+0x21e>
 8004774:	e7eb      	b.n	800474e <_printf_i+0x212>
 8004776:	2500      	movs	r5, #0
 8004778:	f104 0619 	add.w	r6, r4, #25
 800477c:	e7f5      	b.n	800476a <_printf_i+0x22e>
 800477e:	bf00      	nop
 8004780:	08004cce 	.word	0x08004cce
 8004784:	08004cdf 	.word	0x08004cdf

08004788 <memcpy>:
 8004788:	440a      	add	r2, r1
 800478a:	4291      	cmp	r1, r2
 800478c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004790:	d100      	bne.n	8004794 <memcpy+0xc>
 8004792:	4770      	bx	lr
 8004794:	b510      	push	{r4, lr}
 8004796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800479a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800479e:	4291      	cmp	r1, r2
 80047a0:	d1f9      	bne.n	8004796 <memcpy+0xe>
 80047a2:	bd10      	pop	{r4, pc}

080047a4 <memmove>:
 80047a4:	4288      	cmp	r0, r1
 80047a6:	b510      	push	{r4, lr}
 80047a8:	eb01 0402 	add.w	r4, r1, r2
 80047ac:	d902      	bls.n	80047b4 <memmove+0x10>
 80047ae:	4284      	cmp	r4, r0
 80047b0:	4623      	mov	r3, r4
 80047b2:	d807      	bhi.n	80047c4 <memmove+0x20>
 80047b4:	1e43      	subs	r3, r0, #1
 80047b6:	42a1      	cmp	r1, r4
 80047b8:	d008      	beq.n	80047cc <memmove+0x28>
 80047ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047c2:	e7f8      	b.n	80047b6 <memmove+0x12>
 80047c4:	4402      	add	r2, r0
 80047c6:	4601      	mov	r1, r0
 80047c8:	428a      	cmp	r2, r1
 80047ca:	d100      	bne.n	80047ce <memmove+0x2a>
 80047cc:	bd10      	pop	{r4, pc}
 80047ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047d6:	e7f7      	b.n	80047c8 <memmove+0x24>

080047d8 <_free_r>:
 80047d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047da:	2900      	cmp	r1, #0
 80047dc:	d044      	beq.n	8004868 <_free_r+0x90>
 80047de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e2:	9001      	str	r0, [sp, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f1a1 0404 	sub.w	r4, r1, #4
 80047ea:	bfb8      	it	lt
 80047ec:	18e4      	addlt	r4, r4, r3
 80047ee:	f000 f913 	bl	8004a18 <__malloc_lock>
 80047f2:	4a1e      	ldr	r2, [pc, #120]	; (800486c <_free_r+0x94>)
 80047f4:	9801      	ldr	r0, [sp, #4]
 80047f6:	6813      	ldr	r3, [r2, #0]
 80047f8:	b933      	cbnz	r3, 8004808 <_free_r+0x30>
 80047fa:	6063      	str	r3, [r4, #4]
 80047fc:	6014      	str	r4, [r2, #0]
 80047fe:	b003      	add	sp, #12
 8004800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004804:	f000 b90e 	b.w	8004a24 <__malloc_unlock>
 8004808:	42a3      	cmp	r3, r4
 800480a:	d908      	bls.n	800481e <_free_r+0x46>
 800480c:	6825      	ldr	r5, [r4, #0]
 800480e:	1961      	adds	r1, r4, r5
 8004810:	428b      	cmp	r3, r1
 8004812:	bf01      	itttt	eq
 8004814:	6819      	ldreq	r1, [r3, #0]
 8004816:	685b      	ldreq	r3, [r3, #4]
 8004818:	1949      	addeq	r1, r1, r5
 800481a:	6021      	streq	r1, [r4, #0]
 800481c:	e7ed      	b.n	80047fa <_free_r+0x22>
 800481e:	461a      	mov	r2, r3
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	b10b      	cbz	r3, 8004828 <_free_r+0x50>
 8004824:	42a3      	cmp	r3, r4
 8004826:	d9fa      	bls.n	800481e <_free_r+0x46>
 8004828:	6811      	ldr	r1, [r2, #0]
 800482a:	1855      	adds	r5, r2, r1
 800482c:	42a5      	cmp	r5, r4
 800482e:	d10b      	bne.n	8004848 <_free_r+0x70>
 8004830:	6824      	ldr	r4, [r4, #0]
 8004832:	4421      	add	r1, r4
 8004834:	1854      	adds	r4, r2, r1
 8004836:	42a3      	cmp	r3, r4
 8004838:	6011      	str	r1, [r2, #0]
 800483a:	d1e0      	bne.n	80047fe <_free_r+0x26>
 800483c:	681c      	ldr	r4, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	6053      	str	r3, [r2, #4]
 8004842:	4421      	add	r1, r4
 8004844:	6011      	str	r1, [r2, #0]
 8004846:	e7da      	b.n	80047fe <_free_r+0x26>
 8004848:	d902      	bls.n	8004850 <_free_r+0x78>
 800484a:	230c      	movs	r3, #12
 800484c:	6003      	str	r3, [r0, #0]
 800484e:	e7d6      	b.n	80047fe <_free_r+0x26>
 8004850:	6825      	ldr	r5, [r4, #0]
 8004852:	1961      	adds	r1, r4, r5
 8004854:	428b      	cmp	r3, r1
 8004856:	bf04      	itt	eq
 8004858:	6819      	ldreq	r1, [r3, #0]
 800485a:	685b      	ldreq	r3, [r3, #4]
 800485c:	6063      	str	r3, [r4, #4]
 800485e:	bf04      	itt	eq
 8004860:	1949      	addeq	r1, r1, r5
 8004862:	6021      	streq	r1, [r4, #0]
 8004864:	6054      	str	r4, [r2, #4]
 8004866:	e7ca      	b.n	80047fe <_free_r+0x26>
 8004868:	b003      	add	sp, #12
 800486a:	bd30      	pop	{r4, r5, pc}
 800486c:	20000c90 	.word	0x20000c90

08004870 <sbrk_aligned>:
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	4e0e      	ldr	r6, [pc, #56]	; (80048ac <sbrk_aligned+0x3c>)
 8004874:	460c      	mov	r4, r1
 8004876:	6831      	ldr	r1, [r6, #0]
 8004878:	4605      	mov	r5, r0
 800487a:	b911      	cbnz	r1, 8004882 <sbrk_aligned+0x12>
 800487c:	f000 f8bc 	bl	80049f8 <_sbrk_r>
 8004880:	6030      	str	r0, [r6, #0]
 8004882:	4621      	mov	r1, r4
 8004884:	4628      	mov	r0, r5
 8004886:	f000 f8b7 	bl	80049f8 <_sbrk_r>
 800488a:	1c43      	adds	r3, r0, #1
 800488c:	d00a      	beq.n	80048a4 <sbrk_aligned+0x34>
 800488e:	1cc4      	adds	r4, r0, #3
 8004890:	f024 0403 	bic.w	r4, r4, #3
 8004894:	42a0      	cmp	r0, r4
 8004896:	d007      	beq.n	80048a8 <sbrk_aligned+0x38>
 8004898:	1a21      	subs	r1, r4, r0
 800489a:	4628      	mov	r0, r5
 800489c:	f000 f8ac 	bl	80049f8 <_sbrk_r>
 80048a0:	3001      	adds	r0, #1
 80048a2:	d101      	bne.n	80048a8 <sbrk_aligned+0x38>
 80048a4:	f04f 34ff 	mov.w	r4, #4294967295
 80048a8:	4620      	mov	r0, r4
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	20000c94 	.word	0x20000c94

080048b0 <_malloc_r>:
 80048b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b4:	1ccd      	adds	r5, r1, #3
 80048b6:	f025 0503 	bic.w	r5, r5, #3
 80048ba:	3508      	adds	r5, #8
 80048bc:	2d0c      	cmp	r5, #12
 80048be:	bf38      	it	cc
 80048c0:	250c      	movcc	r5, #12
 80048c2:	2d00      	cmp	r5, #0
 80048c4:	4607      	mov	r7, r0
 80048c6:	db01      	blt.n	80048cc <_malloc_r+0x1c>
 80048c8:	42a9      	cmp	r1, r5
 80048ca:	d905      	bls.n	80048d8 <_malloc_r+0x28>
 80048cc:	230c      	movs	r3, #12
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	2600      	movs	r6, #0
 80048d2:	4630      	mov	r0, r6
 80048d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d8:	4e2e      	ldr	r6, [pc, #184]	; (8004994 <_malloc_r+0xe4>)
 80048da:	f000 f89d 	bl	8004a18 <__malloc_lock>
 80048de:	6833      	ldr	r3, [r6, #0]
 80048e0:	461c      	mov	r4, r3
 80048e2:	bb34      	cbnz	r4, 8004932 <_malloc_r+0x82>
 80048e4:	4629      	mov	r1, r5
 80048e6:	4638      	mov	r0, r7
 80048e8:	f7ff ffc2 	bl	8004870 <sbrk_aligned>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	4604      	mov	r4, r0
 80048f0:	d14d      	bne.n	800498e <_malloc_r+0xde>
 80048f2:	6834      	ldr	r4, [r6, #0]
 80048f4:	4626      	mov	r6, r4
 80048f6:	2e00      	cmp	r6, #0
 80048f8:	d140      	bne.n	800497c <_malloc_r+0xcc>
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	4631      	mov	r1, r6
 80048fe:	4638      	mov	r0, r7
 8004900:	eb04 0803 	add.w	r8, r4, r3
 8004904:	f000 f878 	bl	80049f8 <_sbrk_r>
 8004908:	4580      	cmp	r8, r0
 800490a:	d13a      	bne.n	8004982 <_malloc_r+0xd2>
 800490c:	6821      	ldr	r1, [r4, #0]
 800490e:	3503      	adds	r5, #3
 8004910:	1a6d      	subs	r5, r5, r1
 8004912:	f025 0503 	bic.w	r5, r5, #3
 8004916:	3508      	adds	r5, #8
 8004918:	2d0c      	cmp	r5, #12
 800491a:	bf38      	it	cc
 800491c:	250c      	movcc	r5, #12
 800491e:	4629      	mov	r1, r5
 8004920:	4638      	mov	r0, r7
 8004922:	f7ff ffa5 	bl	8004870 <sbrk_aligned>
 8004926:	3001      	adds	r0, #1
 8004928:	d02b      	beq.n	8004982 <_malloc_r+0xd2>
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	442b      	add	r3, r5
 800492e:	6023      	str	r3, [r4, #0]
 8004930:	e00e      	b.n	8004950 <_malloc_r+0xa0>
 8004932:	6822      	ldr	r2, [r4, #0]
 8004934:	1b52      	subs	r2, r2, r5
 8004936:	d41e      	bmi.n	8004976 <_malloc_r+0xc6>
 8004938:	2a0b      	cmp	r2, #11
 800493a:	d916      	bls.n	800496a <_malloc_r+0xba>
 800493c:	1961      	adds	r1, r4, r5
 800493e:	42a3      	cmp	r3, r4
 8004940:	6025      	str	r5, [r4, #0]
 8004942:	bf18      	it	ne
 8004944:	6059      	strne	r1, [r3, #4]
 8004946:	6863      	ldr	r3, [r4, #4]
 8004948:	bf08      	it	eq
 800494a:	6031      	streq	r1, [r6, #0]
 800494c:	5162      	str	r2, [r4, r5]
 800494e:	604b      	str	r3, [r1, #4]
 8004950:	4638      	mov	r0, r7
 8004952:	f104 060b 	add.w	r6, r4, #11
 8004956:	f000 f865 	bl	8004a24 <__malloc_unlock>
 800495a:	f026 0607 	bic.w	r6, r6, #7
 800495e:	1d23      	adds	r3, r4, #4
 8004960:	1af2      	subs	r2, r6, r3
 8004962:	d0b6      	beq.n	80048d2 <_malloc_r+0x22>
 8004964:	1b9b      	subs	r3, r3, r6
 8004966:	50a3      	str	r3, [r4, r2]
 8004968:	e7b3      	b.n	80048d2 <_malloc_r+0x22>
 800496a:	6862      	ldr	r2, [r4, #4]
 800496c:	42a3      	cmp	r3, r4
 800496e:	bf0c      	ite	eq
 8004970:	6032      	streq	r2, [r6, #0]
 8004972:	605a      	strne	r2, [r3, #4]
 8004974:	e7ec      	b.n	8004950 <_malloc_r+0xa0>
 8004976:	4623      	mov	r3, r4
 8004978:	6864      	ldr	r4, [r4, #4]
 800497a:	e7b2      	b.n	80048e2 <_malloc_r+0x32>
 800497c:	4634      	mov	r4, r6
 800497e:	6876      	ldr	r6, [r6, #4]
 8004980:	e7b9      	b.n	80048f6 <_malloc_r+0x46>
 8004982:	230c      	movs	r3, #12
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	4638      	mov	r0, r7
 8004988:	f000 f84c 	bl	8004a24 <__malloc_unlock>
 800498c:	e7a1      	b.n	80048d2 <_malloc_r+0x22>
 800498e:	6025      	str	r5, [r4, #0]
 8004990:	e7de      	b.n	8004950 <_malloc_r+0xa0>
 8004992:	bf00      	nop
 8004994:	20000c90 	.word	0x20000c90

08004998 <_realloc_r>:
 8004998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499c:	4680      	mov	r8, r0
 800499e:	4614      	mov	r4, r2
 80049a0:	460e      	mov	r6, r1
 80049a2:	b921      	cbnz	r1, 80049ae <_realloc_r+0x16>
 80049a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049a8:	4611      	mov	r1, r2
 80049aa:	f7ff bf81 	b.w	80048b0 <_malloc_r>
 80049ae:	b92a      	cbnz	r2, 80049bc <_realloc_r+0x24>
 80049b0:	f7ff ff12 	bl	80047d8 <_free_r>
 80049b4:	4625      	mov	r5, r4
 80049b6:	4628      	mov	r0, r5
 80049b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049bc:	f000 f838 	bl	8004a30 <_malloc_usable_size_r>
 80049c0:	4284      	cmp	r4, r0
 80049c2:	4607      	mov	r7, r0
 80049c4:	d802      	bhi.n	80049cc <_realloc_r+0x34>
 80049c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049ca:	d812      	bhi.n	80049f2 <_realloc_r+0x5a>
 80049cc:	4621      	mov	r1, r4
 80049ce:	4640      	mov	r0, r8
 80049d0:	f7ff ff6e 	bl	80048b0 <_malloc_r>
 80049d4:	4605      	mov	r5, r0
 80049d6:	2800      	cmp	r0, #0
 80049d8:	d0ed      	beq.n	80049b6 <_realloc_r+0x1e>
 80049da:	42bc      	cmp	r4, r7
 80049dc:	4622      	mov	r2, r4
 80049de:	4631      	mov	r1, r6
 80049e0:	bf28      	it	cs
 80049e2:	463a      	movcs	r2, r7
 80049e4:	f7ff fed0 	bl	8004788 <memcpy>
 80049e8:	4631      	mov	r1, r6
 80049ea:	4640      	mov	r0, r8
 80049ec:	f7ff fef4 	bl	80047d8 <_free_r>
 80049f0:	e7e1      	b.n	80049b6 <_realloc_r+0x1e>
 80049f2:	4635      	mov	r5, r6
 80049f4:	e7df      	b.n	80049b6 <_realloc_r+0x1e>
	...

080049f8 <_sbrk_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4d06      	ldr	r5, [pc, #24]	; (8004a14 <_sbrk_r+0x1c>)
 80049fc:	2300      	movs	r3, #0
 80049fe:	4604      	mov	r4, r0
 8004a00:	4608      	mov	r0, r1
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	f7fc ffd4 	bl	80019b0 <_sbrk>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d102      	bne.n	8004a12 <_sbrk_r+0x1a>
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	b103      	cbz	r3, 8004a12 <_sbrk_r+0x1a>
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	20000c98 	.word	0x20000c98

08004a18 <__malloc_lock>:
 8004a18:	4801      	ldr	r0, [pc, #4]	; (8004a20 <__malloc_lock+0x8>)
 8004a1a:	f000 b811 	b.w	8004a40 <__retarget_lock_acquire_recursive>
 8004a1e:	bf00      	nop
 8004a20:	20000c9c 	.word	0x20000c9c

08004a24 <__malloc_unlock>:
 8004a24:	4801      	ldr	r0, [pc, #4]	; (8004a2c <__malloc_unlock+0x8>)
 8004a26:	f000 b80c 	b.w	8004a42 <__retarget_lock_release_recursive>
 8004a2a:	bf00      	nop
 8004a2c:	20000c9c 	.word	0x20000c9c

08004a30 <_malloc_usable_size_r>:
 8004a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a34:	1f18      	subs	r0, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bfbc      	itt	lt
 8004a3a:	580b      	ldrlt	r3, [r1, r0]
 8004a3c:	18c0      	addlt	r0, r0, r3
 8004a3e:	4770      	bx	lr

08004a40 <__retarget_lock_acquire_recursive>:
 8004a40:	4770      	bx	lr

08004a42 <__retarget_lock_release_recursive>:
 8004a42:	4770      	bx	lr

08004a44 <_init>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	bf00      	nop
 8004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	469e      	mov	lr, r3
 8004a4e:	4770      	bx	lr

08004a50 <_fini>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	bf00      	nop
 8004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a56:	bc08      	pop	{r3}
 8004a58:	469e      	mov	lr, r3
 8004a5a:	4770      	bx	lr
