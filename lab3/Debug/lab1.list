
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08005288  08005288  00015288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800542c  0800542c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005434  08005434  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005434  08005434  00015434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800543c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          0000018c  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000214  20000214  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd50  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024e0  00000000  00000000  0002fe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  000322e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c78  00000000  00000000  00033068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c6e  00000000  00000000  00033ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001094b  00000000  00000000  0005794e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8169  00000000  00000000  00068299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140402  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b08  00000000  00000000  00140454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005270 	.word	0x08005270

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08005270 	.word	0x08005270

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <transmit_uart_blocking>:

static uint8_t received_data;
static uint8_t* rn = (uint8_t*) "\n\r";
static uint8_t received_buffer[2] = "\0\0";

void transmit_uart_blocking(const uint8_t *buf, size_t size) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart6, buf, size, TIMEOUT_DURATION);
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	2364      	movs	r3, #100	; 0x64
 80005b4:	6879      	ldr	r1, [r7, #4]
 80005b6:	4803      	ldr	r0, [pc, #12]	; (80005c4 <transmit_uart_blocking+0x20>)
 80005b8:	f003 f8b3 	bl	8003722 <HAL_UART_Transmit>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000150 	.word	0x20000150

080005c8 <receive_uart_blocking>:

uint8_t receive_uart_blocking(struct ReadBuffer* buffer) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  if (HAL_OK == HAL_UART_Receive(&huart6, &received_data, sizeof(uint8_t), TIMEOUT_DURATION)) {
 80005d0:	2364      	movs	r3, #100	; 0x64
 80005d2:	2201      	movs	r2, #1
 80005d4:	4911      	ldr	r1, [pc, #68]	; (800061c <receive_uart_blocking+0x54>)
 80005d6:	4812      	ldr	r0, [pc, #72]	; (8000620 <receive_uart_blocking+0x58>)
 80005d8:	f003 f935 	bl	8003846 <HAL_UART_Receive>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d116      	bne.n	8000610 <receive_uart_blocking+0x48>
	  received_buffer[0] = received_data;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <receive_uart_blocking+0x54>)
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <receive_uart_blocking+0x5c>)
 80005e8:	701a      	strb	r2, [r3, #0]
	  buffer->content = received_buffer;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <receive_uart_blocking+0x5c>)
 80005ee:	601a      	str	r2, [r3, #0]
	  if (received_data == '\r') {
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <receive_uart_blocking+0x54>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b0d      	cmp	r3, #13
 80005f6:	d103      	bne.n	8000600 <receive_uart_blocking+0x38>
		  buffer->content = rn;
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <receive_uart_blocking+0x60>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]
	  }
	  transmit_uart_blocking(buffer->content, sizeof(uint16_t));
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2102      	movs	r1, #2
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ffcc 	bl	80005a4 <transmit_uart_blocking>
	  return 1;
 800060c:	2301      	movs	r3, #1
 800060e:	e000      	b.n	8000612 <receive_uart_blocking+0x4a>
  }
  return 0;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000a4 	.word	0x200000a4
 8000620:	20000150 	.word	0x20000150
 8000624:	200000a8 	.word	0x200000a8
 8000628:	20000000 	.word	0x20000000

0800062c <transmit_uart_interrupt>:

static uint8_t received_data;
static uint8_t* rn = (uint8_t*) "\n\r";
static uint8_t received_buffer[2] = "\0\0";

void transmit_uart_interrupt(const uint8_t *buf, size_t size, struct TransmitionState* state) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
	if (state->is_active) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d011      	beq.n	8000664 <transmit_uart_interrupt+0x38>
		for (size_t i = 0; i < size / sizeof(uint8_t); i++) {
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	e009      	b.n	800065a <transmit_uart_interrupt+0x2e>
			insert_in_queue(buf[i]);
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fed4 	bl	80013fc <insert_in_queue>
		for (size_t i = 0; i < size / sizeof(uint8_t); i++) {
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	3301      	adds	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	429a      	cmp	r2, r3
 8000660:	d3f1      	bcc.n	8000646 <transmit_uart_interrupt+0x1a>
		}
	} else {
		HAL_UART_Transmit_IT(&huart6, buf, size);
		state->is_active = 1;
	}
}
 8000662:	e009      	b.n	8000678 <transmit_uart_interrupt+0x4c>
		HAL_UART_Transmit_IT(&huart6, buf, size);
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	b29b      	uxth	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	68f9      	ldr	r1, [r7, #12]
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <transmit_uart_interrupt+0x54>)
 800066e:	f003 f98c 	bl	800398a <HAL_UART_Transmit_IT>
		state->is_active = 1;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]
}
 8000678:	bf00      	nop
 800067a:	3718      	adds	r7, #24
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000150 	.word	0x20000150

08000684 <receive_uart_interrupt>:

void receive_uart_interrupt() {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, &received_data, sizeof(uint8_t));
 8000688:	2201      	movs	r2, #1
 800068a:	4903      	ldr	r1, [pc, #12]	; (8000698 <receive_uart_interrupt+0x14>)
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <receive_uart_interrupt+0x18>)
 800068e:	f003 f9c1 	bl	8003a14 <HAL_UART_Receive_IT>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000aa 	.word	0x200000aa
 800069c:	20000150 	.word	0x20000150

080006a0 <receive_uart_interrupt_cb>:

void receive_uart_interrupt_cb(struct ReadBuffer* buffer, struct TransmitionState* state) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	received_buffer[0] = received_data;
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <receive_uart_interrupt_cb+0x40>)
 80006ac:	781a      	ldrb	r2, [r3, #0]
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <receive_uart_interrupt_cb+0x44>)
 80006b0:	701a      	strb	r2, [r3, #0]
	buffer->content = received_buffer;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <receive_uart_interrupt_cb+0x44>)
 80006b6:	601a      	str	r2, [r3, #0]
	if (received_data == '\r') {
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <receive_uart_interrupt_cb+0x40>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b0d      	cmp	r3, #13
 80006be:	d103      	bne.n	80006c8 <receive_uart_interrupt_cb+0x28>
		buffer->content = rn;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <receive_uart_interrupt_cb+0x48>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	601a      	str	r2, [r3, #0]
	}
	transmit_uart_interrupt(buffer->content, sizeof(uint16_t), state);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	2102      	movs	r1, #2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ffab 	bl	800062c <transmit_uart_interrupt>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000aa 	.word	0x200000aa
 80006e4:	200000ac 	.word	0x200000ac
 80006e8:	20000004 	.word	0x20000004

080006ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b087      	sub	sp, #28
 80006f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <MX_GPIO_Init+0xa0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <MX_GPIO_Init+0xa0>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_GPIO_Init+0xa0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_GPIO_Init+0xa0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a1d      	ldr	r2, [pc, #116]	; (800078c <MX_GPIO_Init+0xa0>)
 8000718:	f043 0310 	orr.w	r3, r3, #16
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_GPIO_Init+0xa0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0310 	and.w	r3, r3, #16
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_GPIO_Init+0xa0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a16      	ldr	r2, [pc, #88]	; (800078c <MX_GPIO_Init+0xa0>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_GPIO_Init+0xa0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_GPIO_Init+0xa0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <MX_GPIO_Init+0xa0>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_GPIO_Init+0xa0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_GPIO_Init+0xa0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <MX_GPIO_Init+0xa0>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_GPIO_Init+0xa0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

}
 800077e:	bf00      	nop
 8000780:	371c      	adds	r7, #28
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <calculate_note_freq>:

struct ReadBuffer read_buffer = {
	.content = (uint8_t*) "\0"
};

float calculate_note_freq(uint8_t note, uint8_t octave) {
 8000790:	b480      	push	{r7}
 8000792:	b087      	sub	sp, #28
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	460a      	mov	r2, r1
 800079a:	71fb      	strb	r3, [r7, #7]
 800079c:	4613      	mov	r3, r2
 800079e:	71bb      	strb	r3, [r7, #6]
	float factor = 1.0 / 16;
 80007a0:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 80007a4:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < octave; i++) {
 80007a6:	2301      	movs	r3, #1
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	e008      	b.n	80007be <calculate_note_freq+0x2e>
		factor *= 2;
 80007ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80007b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007b4:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 1; i < octave; i++) {
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	3301      	adds	r3, #1
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	79bb      	ldrb	r3, [r7, #6]
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	dbf2      	blt.n	80007ac <calculate_note_freq+0x1c>
	}
	float note_freq = 0;
 80007c6:	f04f 0300 	mov.w	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
	if (note == 1) note_freq = NOTE_DO;
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d102      	bne.n	80007d8 <calculate_note_freq+0x48>
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <calculate_note_freq+0xa8>)
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e022      	b.n	800081e <calculate_note_freq+0x8e>
	else if (note == 2) note_freq = NOTE_RE;
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b02      	cmp	r3, #2
 80007dc:	d102      	bne.n	80007e4 <calculate_note_freq+0x54>
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <calculate_note_freq+0xac>)
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	e01c      	b.n	800081e <calculate_note_freq+0x8e>
	else if (note == 3) note_freq = NOTE_MI;
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	d102      	bne.n	80007f0 <calculate_note_freq+0x60>
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <calculate_note_freq+0xb0>)
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	e016      	b.n	800081e <calculate_note_freq+0x8e>
	else if (note == 4) note_freq = NOTE_FA;
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	d102      	bne.n	80007fc <calculate_note_freq+0x6c>
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <calculate_note_freq+0xb4>)
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	e010      	b.n	800081e <calculate_note_freq+0x8e>
	else if (note == 5) note_freq = NOTE_SO;
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2b05      	cmp	r3, #5
 8000800:	d102      	bne.n	8000808 <calculate_note_freq+0x78>
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <calculate_note_freq+0xb8>)
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	e00a      	b.n	800081e <calculate_note_freq+0x8e>
	else if (note == 6) note_freq = NOTE_LA;
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2b06      	cmp	r3, #6
 800080c:	d102      	bne.n	8000814 <calculate_note_freq+0x84>
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <calculate_note_freq+0xbc>)
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	e004      	b.n	800081e <calculate_note_freq+0x8e>
	else if (note == 7) note_freq = NOTE_SI;
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2b07      	cmp	r3, #7
 8000818:	d101      	bne.n	800081e <calculate_note_freq+0x8e>
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <calculate_note_freq+0xc0>)
 800081c:	60fb      	str	r3, [r7, #12]
	return factor * note_freq;
 800081e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000822:	edd7 7a03 	vldr	s15, [r7, #12]
 8000826:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800082a:	eeb0 0a67 	vmov.f32	s0, s15
 800082e:	371c      	adds	r7, #28
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	4382d0a4 	.word	0x4382d0a4
 800083c:	4392d5c3 	.word	0x4392d5c3
 8000840:	43a4d0a4 	.word	0x43a4d0a4
 8000844:	43ae9d71 	.word	0x43ae9d71
 8000848:	43c40000 	.word	0x43c40000
 800084c:	43dc0000 	.word	0x43dc0000
 8000850:	43f6f0a4 	.word	0x43f6f0a4

08000854 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 800085a:	af00      	add	r7, sp, #0
 800085c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000860:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8000864:	6018      	str	r0, [r3, #0]
  uint8_t temp_buffer[1000];
  int string_length = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  while (!is_queue_empty()) {
 800086c:	e00d      	b.n	800088a <HAL_UART_TxCpltCallback+0x36>
	  temp_buffer[string_length++] = take_element_from_queue();
 800086e:	f8d7 43f4 	ldr.w	r4, [r7, #1012]	; 0x3f4
 8000872:	1c63      	adds	r3, r4, #1
 8000874:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8000878:	f000 fdf2 	bl	8001460 <take_element_from_queue>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000884:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8000888:	551a      	strb	r2, [r3, r4]
  while (!is_queue_empty()) {
 800088a:	f000 fe1b 	bl	80014c4 <is_queue_empty>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d0ec      	beq.n	800086e <HAL_UART_TxCpltCallback+0x1a>
  }
  if (string_length > 0) {
 8000894:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8000898:	2b00      	cmp	r3, #0
 800089a:	dd09      	ble.n	80008b0 <HAL_UART_TxCpltCallback+0x5c>
	  HAL_UART_Transmit_IT(&huart6, temp_buffer, string_length);
 800089c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <HAL_UART_TxCpltCallback+0x6c>)
 80008aa:	f003 f86e 	bl	800398a <HAL_UART_Transmit_IT>
  } else {
	  irq_state.is_active = 0;
  }
}
 80008ae:	e002      	b.n	80008b6 <HAL_UART_TxCpltCallback+0x62>
	  irq_state.is_active = 0;
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <HAL_UART_TxCpltCallback+0x70>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
}
 80008b6:	bf00      	nop
 80008b8:	f507 777f 	add.w	r7, r7, #1020	; 0x3fc
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd90      	pop	{r4, r7, pc}
 80008c0:	20000150 	.word	0x20000150
 80008c4:	200000b0 	.word	0x200000b0

080008c8 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	receive_uart_interrupt_cb(&read_buffer, &irq_state);
 80008d0:	4903      	ldr	r1, [pc, #12]	; (80008e0 <HAL_UART_RxCpltCallback+0x18>)
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <HAL_UART_RxCpltCallback+0x1c>)
 80008d4:	f7ff fee4 	bl	80006a0 <receive_uart_interrupt_cb>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200000b0 	.word	0x200000b0
 80008e4:	20000008 	.word	0x20000008

080008e8 <print>:
/*
 * set interrupts on или set interrupts off – включить или выключить прерывания.
 */
uint8_t interrupts_mode = 1;

void print(char* content) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	size_t length = strlen(content);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff fc7d 	bl	80001f0 <strlen>
 80008f6:	60f8      	str	r0, [r7, #12]
	if (interrupts_mode) {
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <print+0x34>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d005      	beq.n	800090c <print+0x24>
		transmit_uart_interrupt((uint8_t *) content, length, &irq_state);
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <print+0x38>)
 8000902:	68f9      	ldr	r1, [r7, #12]
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff fe91 	bl	800062c <transmit_uart_interrupt>
	} else {
		transmit_uart_blocking((uint8_t *) content, length);
	}
}
 800090a:	e003      	b.n	8000914 <print+0x2c>
		transmit_uart_blocking((uint8_t *) content, length);
 800090c:	68f9      	ldr	r1, [r7, #12]
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff fe48 	bl	80005a4 <transmit_uart_blocking>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000000c 	.word	0x2000000c
 8000920:	200000b0 	.word	0x200000b0

08000924 <read>:

uint8_t read() {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	if (interrupts_mode) {
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <read+0x20>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d003      	beq.n	8000938 <read+0x14>
		receive_uart_interrupt();
 8000930:	f7ff fea8 	bl	8000684 <receive_uart_interrupt>
		return 1;
 8000934:	2301      	movs	r3, #1
 8000936:	e003      	b.n	8000940 <read+0x1c>
	} else {
		return receive_uart_blocking(&read_buffer);
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <read+0x24>)
 800093a:	f7ff fe45 	bl	80005c8 <receive_uart_blocking>
 800093e:	4603      	mov	r3, r0
	}
}
 8000940:	4618      	mov	r0, r3
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000000c 	.word	0x2000000c
 8000948:	20000008 	.word	0x20000008

0800094c <play_note>:
static uint32_t playtime = 1000;
static uint32_t notes_played_ms = 0;
static uint8_t notes_count = 1;


void play_note() {
 800094c:	b580      	push	{r7, lr}
 800094e:	b09a      	sub	sp, #104	; 0x68
 8000950:	af00      	add	r7, sp, #0
	if (note == 0 || octave == 0) {
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <play_note+0x94>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d003      	beq.n	8000962 <play_note+0x16>
 800095a:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <play_note+0x98>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d104      	bne.n	800096c <play_note+0x20>
		htim1.Instance->CCR1 = 0;
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <play_note+0x9c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2200      	movs	r2, #0
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
 800096a:	e028      	b.n	80009be <play_note+0x72>
	} else {
		htim1.Instance->ARR = 150 * 1000 * 1000 / (calculate_note_freq(note, octave) * htim1.Instance->PSC) - 1;
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <play_note+0x94>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <play_note+0x98>)
 8000972:	7812      	ldrb	r2, [r2, #0]
 8000974:	4611      	mov	r1, r2
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ff0a 	bl	8000790 <calculate_note_freq>
 800097c:	eeb0 7a40 	vmov.f32	s14, s0
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <play_note+0x9c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000986:	ee07 3a90 	vmov	s15, r3
 800098a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800098e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000992:	eddf 6a16 	vldr	s13, [pc, #88]	; 80009ec <play_note+0xa0>
 8000996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800099a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800099e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <play_note+0x9c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009aa:	ee17 2a90 	vmov	r2, s15
 80009ae:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1.Instance->CCR1 = htim1.Instance->ARR >> 1;
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <play_note+0x9c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <play_note+0x9c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	0852      	lsrs	r2, r2, #1
 80009bc:	635a      	str	r2, [r3, #52]	; 0x34
	}

	char sprintf_buffer[100];
	sprintf(sprintf_buffer, "%d.\n", (int)htim1.Instance->CCR1);
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <play_note+0x9c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c4:	461a      	mov	r2, r3
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4909      	ldr	r1, [pc, #36]	; (80009f0 <play_note+0xa4>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 ffe2 	bl	8004994 <siprintf>
	print(sprintf_buffer);
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ff88 	bl	80008e8 <print>

}
 80009d8:	bf00      	nop
 80009da:	3768      	adds	r7, #104	; 0x68
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000000d 	.word	0x2000000d
 80009e4:	2000000e 	.word	0x2000000e
 80009e8:	200000c0 	.word	0x200000c0
 80009ec:	4d0f0d18 	.word	0x4d0f0d18
 80009f0:	08005294 	.word	0x08005294

080009f4 <change_note>:

void change_note(uint8_t new_note) {
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
	note = new_note;
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <change_note+0x1c>)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	7013      	strb	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	2000000d 	.word	0x2000000d

08000a14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a1d      	ldr	r2, [pc, #116]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d134      	bne.n	8000a90 <HAL_TIM_PeriodElapsedCallback+0x7c>
		notes_played_ms += htim->Instance->PSC + 1;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a36:	6013      	str	r3, [r2, #0]

		if (notes_count == 1) {
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d109      	bne.n	8000a54 <HAL_TIM_PeriodElapsedCallback+0x40>
			if (notes_played_ms > playtime) {
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d91f      	bls.n	8000a8c <HAL_TIM_PeriodElapsedCallback+0x78>
				change_note(0);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff ffd1 	bl	80009f4 <change_note>
 8000a52:	e01b      	b.n	8000a8c <HAL_TIM_PeriodElapsedCallback+0x78>
			}
		} else if (notes_count == 7) {
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b07      	cmp	r3, #7
 8000a5a:	d117      	bne.n	8000a8c <HAL_TIM_PeriodElapsedCallback+0x78>
			if (notes_played_ms / playtime >= 7) {
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a68:	2b06      	cmp	r3, #6
 8000a6a:	d903      	bls.n	8000a74 <HAL_TIM_PeriodElapsedCallback+0x60>
				change_note(0);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff ffc1 	bl	80009f4 <change_note>
 8000a72:	e00b      	b.n	8000a8c <HAL_TIM_PeriodElapsedCallback+0x78>
			} else {
				change_note(1 + notes_played_ms / playtime);
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	3301      	adds	r3, #1
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ffb4 	bl	80009f4 <change_note>
			}
		}
		play_note();
 8000a8c:	f7ff ff5e 	bl	800094c <play_note>
	}
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40001000 	.word	0x40001000
 8000a9c:	200000b4 	.word	0x200000b4
 8000aa0:	20000014 	.word	0x20000014
 8000aa4:	20000010 	.word	0x20000010

08000aa8 <increase_octave>:

void increase_octave() {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b09a      	sub	sp, #104	; 0x68
 8000aac:	af00      	add	r7, sp, #0
	print("\n");
 8000aae:	4810      	ldr	r0, [pc, #64]	; (8000af0 <increase_octave+0x48>)
 8000ab0:	f7ff ff1a 	bl	80008e8 <print>
	if (octave < 9) {
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <increase_octave+0x4c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b08      	cmp	r3, #8
 8000aba:	d812      	bhi.n	8000ae2 <increase_octave+0x3a>
		octave += 1;
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <increase_octave+0x4c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <increase_octave+0x4c>)
 8000ac6:	701a      	strb	r2, [r3, #0]
		char sprintf_buffer[100];
		sprintf(sprintf_buffer, "Octave number increased to %d.\n", octave);
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <increase_octave+0x4c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4909      	ldr	r1, [pc, #36]	; (8000af8 <increase_octave+0x50>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f003 ff5e 	bl	8004994 <siprintf>
		print(sprintf_buffer);
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff04 	bl	80008e8 <print>
	} else {
		print("Octave number cannot be greater than 9.\n");
	}
}
 8000ae0:	e002      	b.n	8000ae8 <increase_octave+0x40>
		print("Octave number cannot be greater than 9.\n");
 8000ae2:	4806      	ldr	r0, [pc, #24]	; (8000afc <increase_octave+0x54>)
 8000ae4:	f7ff ff00 	bl	80008e8 <print>
}
 8000ae8:	bf00      	nop
 8000aea:	3768      	adds	r7, #104	; 0x68
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	0800529c 	.word	0x0800529c
 8000af4:	2000000e 	.word	0x2000000e
 8000af8:	080052a0 	.word	0x080052a0
 8000afc:	080052c0 	.word	0x080052c0

08000b00 <decrease_octave>:

void decrease_octave() {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b09a      	sub	sp, #104	; 0x68
 8000b04:	af00      	add	r7, sp, #0
	print("\n");
 8000b06:	4810      	ldr	r0, [pc, #64]	; (8000b48 <decrease_octave+0x48>)
 8000b08:	f7ff feee 	bl	80008e8 <print>
	if (octave > 1) {
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <decrease_octave+0x4c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d912      	bls.n	8000b3a <decrease_octave+0x3a>
		octave -= 1;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <decrease_octave+0x4c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <decrease_octave+0x4c>)
 8000b1e:	701a      	strb	r2, [r3, #0]
		char sprintf_buffer[100];
		sprintf(sprintf_buffer, "Octave number decreased to %d.\n", octave);
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <decrease_octave+0x4c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4909      	ldr	r1, [pc, #36]	; (8000b50 <decrease_octave+0x50>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 ff32 	bl	8004994 <siprintf>
		print(sprintf_buffer);
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fed8 	bl	80008e8 <print>
	} else {
		print("Octave number cannot be less than 1.\n");
	}
}
 8000b38:	e002      	b.n	8000b40 <decrease_octave+0x40>
		print("Octave number cannot be less than 1.\n");
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <decrease_octave+0x54>)
 8000b3c:	f7ff fed4 	bl	80008e8 <print>
}
 8000b40:	bf00      	nop
 8000b42:	3768      	adds	r7, #104	; 0x68
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	0800529c 	.word	0x0800529c
 8000b4c:	2000000e 	.word	0x2000000e
 8000b50:	080052ec 	.word	0x080052ec
 8000b54:	0800530c 	.word	0x0800530c

08000b58 <increase_playtime>:

void increase_playtime() {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	print("\n");
 8000b5e:	4813      	ldr	r0, [pc, #76]	; (8000bac <increase_playtime+0x54>)
 8000b60:	f7ff fec2 	bl	80008e8 <print>
	char sprintf_buffer[100];
	if (playtime < MAX_TIME) {
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <increase_playtime+0x58>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f241 3287 	movw	r2, #4999	; 0x1387
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d80d      	bhi.n	8000b8c <increase_playtime+0x34>
		playtime += 100;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <increase_playtime+0x58>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3364      	adds	r3, #100	; 0x64
 8000b76:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <increase_playtime+0x58>)
 8000b78:	6013      	str	r3, [r2, #0]
		sprintf(sprintf_buffer, "Playback time increased to %d ms.\n", (int)playtime);
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <increase_playtime+0x58>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <increase_playtime+0x5c>)
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 ff05 	bl	8004994 <siprintf>
 8000b8a:	e006      	b.n	8000b9a <increase_playtime+0x42>
	} else {
		sprintf(sprintf_buffer, "Playback time cannot exceed %d ms.\n", MAX_TIME);
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b92:	4909      	ldr	r1, [pc, #36]	; (8000bb8 <increase_playtime+0x60>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f003 fefd 	bl	8004994 <siprintf>
	}
	print(sprintf_buffer);
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fea3 	bl	80008e8 <print>
}
 8000ba2:	bf00      	nop
 8000ba4:	3768      	adds	r7, #104	; 0x68
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	0800529c 	.word	0x0800529c
 8000bb0:	20000010 	.word	0x20000010
 8000bb4:	08005334 	.word	0x08005334
 8000bb8:	08005358 	.word	0x08005358

08000bbc <decrease_playtime>:

void decrease_playtime() {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b09a      	sub	sp, #104	; 0x68
 8000bc0:	af00      	add	r7, sp, #0
	print("\n");
 8000bc2:	4811      	ldr	r0, [pc, #68]	; (8000c08 <decrease_playtime+0x4c>)
 8000bc4:	f7ff fe90 	bl	80008e8 <print>
	char sprintf_buffer[100];
		if (playtime > MIN_TIME) {
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <decrease_playtime+0x50>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b64      	cmp	r3, #100	; 0x64
 8000bce:	d90d      	bls.n	8000bec <decrease_playtime+0x30>
			playtime -= 100;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <decrease_playtime+0x50>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3b64      	subs	r3, #100	; 0x64
 8000bd6:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <decrease_playtime+0x50>)
 8000bd8:	6013      	str	r3, [r2, #0]
			sprintf(sprintf_buffer, "Playback time decreased to %d ms.\n", (int)playtime);
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <decrease_playtime+0x50>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	490b      	ldr	r1, [pc, #44]	; (8000c10 <decrease_playtime+0x54>)
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 fed5 	bl	8004994 <siprintf>
 8000bea:	e005      	b.n	8000bf8 <decrease_playtime+0x3c>
		} else {
			sprintf(sprintf_buffer, "Playback time cannot be less than %d ms.\n", MIN_TIME);
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2264      	movs	r2, #100	; 0x64
 8000bf0:	4908      	ldr	r1, [pc, #32]	; (8000c14 <decrease_playtime+0x58>)
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f003 fece 	bl	8004994 <siprintf>
		}
		print(sprintf_buffer);
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fe74 	bl	80008e8 <print>
}
 8000c00:	bf00      	nop
 8000c02:	3768      	adds	r7, #104	; 0x68
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	0800529c 	.word	0x0800529c
 8000c0c:	20000010 	.word	0x20000010
 8000c10:	0800537c 	.word	0x0800537c
 8000c14:	080053a0 	.word	0x080053a0

08000c18 <play_notes>:

void play_notes() {
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
	notes_count = 7;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <play_notes+0x1c>)
 8000c1e:	2207      	movs	r2, #7
 8000c20:	701a      	strb	r2, [r3, #0]
	notes_played_ms = 0;
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <play_notes+0x20>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000014 	.word	0x20000014
 8000c38:	200000b4 	.word	0x200000b4

08000c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	; 0x30
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c42:	f000 fc79 	bl	8001538 <HAL_Init>

  /* USER CODE BEGIN Init */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	4b6e      	ldr	r3, [pc, #440]	; (8000e04 <main+0x1c8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a6d      	ldr	r2, [pc, #436]	; (8000e04 <main+0x1c8>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b6b      	ldr	r3, [pc, #428]	; (8000e04 <main+0x1c8>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c62:	f000 f8e3 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c66:	f7ff fd41 	bl	80006ec <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000c6a:	f000 fb4d 	bl	8001308 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8000c6e:	f000 fa9d 	bl	80011ac <MX_TIM6_Init>
  MX_TIM1_Init();
 8000c72:	f000 f9f9 	bl	8001068 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8000c76:	4864      	ldr	r0, [pc, #400]	; (8000e08 <main+0x1cc>)
 8000c78:	f001 fcc8 	bl	800260c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4863      	ldr	r0, [pc, #396]	; (8000e0c <main+0x1d0>)
 8000c80:	f001 fd8e 	bl	80027a0 <HAL_TIM_PWM_Start>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0318 	add.w	r3, r7, #24
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	4b5a      	ldr	r3, [pc, #360]	; (8000e04 <main+0x1c8>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	4a59      	ldr	r2, [pc, #356]	; (8000e04 <main+0x1c8>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca4:	4b57      	ldr	r3, [pc, #348]	; (8000e04 <main+0x1c8>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	4b53      	ldr	r3, [pc, #332]	; (8000e04 <main+0x1c8>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	4a52      	ldr	r2, [pc, #328]	; (8000e04 <main+0x1c8>)
 8000cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc0:	4b50      	ldr	r3, [pc, #320]	; (8000e04 <main+0x1c8>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <main+0x1c8>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a4b      	ldr	r2, [pc, #300]	; (8000e04 <main+0x1c8>)
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
 8000cdc:	4b49      	ldr	r3, [pc, #292]	; (8000e04 <main+0x1c8>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	f003 0308 	and.w	r3, r3, #8
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	4b45      	ldr	r3, [pc, #276]	; (8000e04 <main+0x1c8>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	4a44      	ldr	r2, [pc, #272]	; (8000e04 <main+0x1c8>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf8:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <main+0x1c8>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	4b3e      	ldr	r3, [pc, #248]	; (8000e04 <main+0x1c8>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	4a3d      	ldr	r2, [pc, #244]	; (8000e04 <main+0x1c8>)
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	6313      	str	r3, [r2, #48]	; 0x30
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <main+0x1c8>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d24:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2e:	f107 0318 	add.w	r3, r7, #24
 8000d32:	4619      	mov	r1, r3
 8000d34:	4836      	ldr	r0, [pc, #216]	; (8000e10 <main+0x1d4>)
 8000d36:	f000 fe15 	bl	8001964 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
 8000d3a:	f24e 0301 	movw	r3, #57345	; 0xe001
 8000d3e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4830      	ldr	r0, [pc, #192]	; (8000e14 <main+0x1d8>)
 8000d54:	f000 fe06 	bl	8001964 <HAL_GPIO_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
}
 8000d5a:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  __disable_irq();
	  	uint8_t received = read();
 8000d5c:	f7ff fde2 	bl	8000924 <read>
 8000d60:	4603      	mov	r3, r0
 8000d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  	if (received) {
 8000d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d047      	beq.n	8000dfe <main+0x1c2>
	  		uint8_t command = read_buffer.content[0];
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <main+0x1dc>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  		if (command != '\0') {
 8000d78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d03e      	beq.n	8000dfe <main+0x1c2>
	  			if (command >= '1' && command <= '7') {
 8000d80:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d84:	2b30      	cmp	r3, #48	; 0x30
 8000d86:	d911      	bls.n	8000dac <main+0x170>
 8000d88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d8c:	2b37      	cmp	r3, #55	; 0x37
 8000d8e:	d80d      	bhi.n	8000dac <main+0x170>
	  				notes_count = 1;
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <main+0x1e0>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
	  				notes_played_ms = 0;
 8000d96:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <main+0x1e4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
	  				change_note(command - '0');
 8000d9c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000da0:	3b30      	subs	r3, #48	; 0x30
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fe25 	bl	80009f4 <change_note>
 8000daa:	e025      	b.n	8000df8 <main+0x1bc>
	  			} else if (command == '+') {
 8000dac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000db0:	2b2b      	cmp	r3, #43	; 0x2b
 8000db2:	d102      	bne.n	8000dba <main+0x17e>
	  				increase_octave();
 8000db4:	f7ff fe78 	bl	8000aa8 <increase_octave>
 8000db8:	e01e      	b.n	8000df8 <main+0x1bc>
	  			} else if (command == '-') {
 8000dba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000dbe:	2b2d      	cmp	r3, #45	; 0x2d
 8000dc0:	d102      	bne.n	8000dc8 <main+0x18c>
	  				decrease_octave();
 8000dc2:	f7ff fe9d 	bl	8000b00 <decrease_octave>
 8000dc6:	e017      	b.n	8000df8 <main+0x1bc>
	  			} else if (command == 'A') {
 8000dc8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000dcc:	2b41      	cmp	r3, #65	; 0x41
 8000dce:	d102      	bne.n	8000dd6 <main+0x19a>
	  				increase_playtime();
 8000dd0:	f7ff fec2 	bl	8000b58 <increase_playtime>
 8000dd4:	e010      	b.n	8000df8 <main+0x1bc>
	  			} else if (command == 'a') {
 8000dd6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000dda:	2b61      	cmp	r3, #97	; 0x61
 8000ddc:	d102      	bne.n	8000de4 <main+0x1a8>
	  				decrease_playtime();
 8000dde:	f7ff feed 	bl	8000bbc <decrease_playtime>
 8000de2:	e009      	b.n	8000df8 <main+0x1bc>
	  			} else if (command == '\n') {
 8000de4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000de8:	2b0a      	cmp	r3, #10
 8000dea:	d102      	bne.n	8000df2 <main+0x1b6>
	  				play_notes();
 8000dec:	f7ff ff14 	bl	8000c18 <play_notes>
 8000df0:	e002      	b.n	8000df8 <main+0x1bc>
	  			} else {
	  				print("Unknown command\n");
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <main+0x1e8>)
 8000df4:	f7ff fd78 	bl	80008e8 <print>
	  			}
	  			read_buffer.content = received_buffer_empty;
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <main+0x1dc>)
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <main+0x1ec>)
 8000dfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000dfe:	b662      	cpsie	i
}
 8000e00:	bf00      	nop
  {
 8000e02:	e7a9      	b.n	8000d58 <main+0x11c>
 8000e04:	40023800 	.word	0x40023800
 8000e08:	20000108 	.word	0x20000108
 8000e0c:	200000c0 	.word	0x200000c0
 8000e10:	40020800 	.word	0x40020800
 8000e14:	40020c00 	.word	0x40020c00
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000014 	.word	0x20000014
 8000e20:	200000b4 	.word	0x200000b4
 8000e24:	080053cc 	.word	0x080053cc
 8000e28:	200000b8 	.word	0x200000b8

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b094      	sub	sp, #80	; 0x50
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0320 	add.w	r3, r7, #32
 8000e36:	2230      	movs	r2, #48	; 0x30
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fda2 	bl	8004984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	4b28      	ldr	r3, [pc, #160]	; (8000ef8 <SystemClock_Config+0xcc>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	4a27      	ldr	r2, [pc, #156]	; (8000ef8 <SystemClock_Config+0xcc>)
 8000e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e60:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <SystemClock_Config+0xcc>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <SystemClock_Config+0xd0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a21      	ldr	r2, [pc, #132]	; (8000efc <SystemClock_Config+0xd0>)
 8000e76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <SystemClock_Config+0xd0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e92:	2302      	movs	r3, #2
 8000e94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ea0:	23c0      	movs	r3, #192	; 0xc0
 8000ea2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eac:	f107 0320 	add.w	r3, r7, #32
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 ff03 	bl	8001cbc <HAL_RCC_OscConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ebc:	f000 f820 	bl	8000f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000ecc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ed0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2104      	movs	r1, #4
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 f964 	bl	80021ac <HAL_RCC_ClockConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eea:	f000 f809 	bl	8000f00 <Error_Handler>
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3750      	adds	r7, #80	; 0x50
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40007000 	.word	0x40007000

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <Error_Handler+0x8>
	...

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <NMI_Handler+0x4>

08000f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <MemManage_Handler+0x4>

08000f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f000 fb18 	bl	80015dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <TIM6_DAC_IRQHandler+0x10>)
 8000fb6:	f001 fcbb 	bl	8002930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000108 	.word	0x20000108

08000fc4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <USART6_IRQHandler+0x10>)
 8000fca:	f002 fd53 	bl	8003a74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000150 	.word	0x20000150

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f003 fc92 	bl	8004930 <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20030000 	.word	0x20030000
 8001038:	00000400 	.word	0x00000400
 800103c:	200000bc 	.word	0x200000bc
 8001040:	20000218 	.word	0x20000218

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b096      	sub	sp, #88	; 0x58
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]
 8001096:	615a      	str	r2, [r3, #20]
 8001098:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2220      	movs	r2, #32
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 fc6f 	bl	8004984 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010a6:	4b3f      	ldr	r3, [pc, #252]	; (80011a4 <MX_TIM1_Init+0x13c>)
 80010a8:	4a3f      	ldr	r2, [pc, #252]	; (80011a8 <MX_TIM1_Init+0x140>)
 80010aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 74;
 80010ac:	4b3d      	ldr	r3, [pc, #244]	; (80011a4 <MX_TIM1_Init+0x13c>)
 80010ae:	224a      	movs	r2, #74	; 0x4a
 80010b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b3c      	ldr	r3, [pc, #240]	; (80011a4 <MX_TIM1_Init+0x13c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80010b8:	4b3a      	ldr	r3, [pc, #232]	; (80011a4 <MX_TIM1_Init+0x13c>)
 80010ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <MX_TIM1_Init+0x13c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010c6:	4b37      	ldr	r3, [pc, #220]	; (80011a4 <MX_TIM1_Init+0x13c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <MX_TIM1_Init+0x13c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010d2:	4834      	ldr	r0, [pc, #208]	; (80011a4 <MX_TIM1_Init+0x13c>)
 80010d4:	f001 fa4a 	bl	800256c <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80010de:	f7ff ff0f 	bl	8000f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ec:	4619      	mov	r1, r3
 80010ee:	482d      	ldr	r0, [pc, #180]	; (80011a4 <MX_TIM1_Init+0x13c>)
 80010f0:	f001 fde8 	bl	8002cc4 <HAL_TIM_ConfigClockSource>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010fa:	f7ff ff01 	bl	8000f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010fe:	4829      	ldr	r0, [pc, #164]	; (80011a4 <MX_TIM1_Init+0x13c>)
 8001100:	f001 faf4 	bl	80026ec <HAL_TIM_PWM_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800110a:	f7ff fef9 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001116:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800111a:	4619      	mov	r1, r3
 800111c:	4821      	ldr	r0, [pc, #132]	; (80011a4 <MX_TIM1_Init+0x13c>)
 800111e:	f002 f9d1 	bl	80034c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001128:	f7ff feea 	bl	8000f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112c:	2360      	movs	r3, #96	; 0x60
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001130:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800113a:	2300      	movs	r3, #0
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	2200      	movs	r2, #0
 8001150:	4619      	mov	r1, r3
 8001152:	4814      	ldr	r0, [pc, #80]	; (80011a4 <MX_TIM1_Init+0x13c>)
 8001154:	f001 fcf4 	bl	8002b40 <HAL_TIM_PWM_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800115e:	f7ff fecf 	bl	8000f00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	4619      	mov	r1, r3
 8001184:	4807      	ldr	r0, [pc, #28]	; (80011a4 <MX_TIM1_Init+0x13c>)
 8001186:	f002 fa19 	bl	80035bc <HAL_TIMEx_ConfigBreakDeadTime>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001190:	f7ff feb6 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <MX_TIM1_Init+0x13c>)
 8001196:	f000 f87d 	bl	8001294 <HAL_TIM_MspPostInit>

}
 800119a:	bf00      	nop
 800119c:	3758      	adds	r7, #88	; 0x58
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200000c0 	.word	0x200000c0
 80011a8:	40010000 	.word	0x40010000

080011ac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_TIM6_Init+0x64>)
 80011bc:	4a15      	ldr	r2, [pc, #84]	; (8001214 <MX_TIM6_Init+0x68>)
 80011be:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <MX_TIM6_Init+0x64>)
 80011c2:	2209      	movs	r2, #9
 80011c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_TIM6_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 37499;
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_TIM6_Init+0x64>)
 80011ce:	f249 227b 	movw	r2, #37499	; 0x927b
 80011d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_TIM6_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_TIM6_Init+0x64>)
 80011dc:	f001 f9c6 	bl	800256c <HAL_TIM_Base_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80011e6:	f7ff fe8b 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011f2:	463b      	mov	r3, r7
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_TIM6_Init+0x64>)
 80011f8:	f002 f964 	bl	80034c4 <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001202:	f7ff fe7d 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000108 	.word	0x20000108
 8001214:	40001000 	.word	0x40001000

08001218 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a18      	ldr	r2, [pc, #96]	; (8001288 <HAL_TIM_Base_MspInit+0x70>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d10e      	bne.n	8001248 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_TIM_Base_MspInit+0x74>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a16      	ldr	r2, [pc, #88]	; (800128c <HAL_TIM_Base_MspInit+0x74>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_TIM_Base_MspInit+0x74>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001246:	e01a      	b.n	800127e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a10      	ldr	r2, [pc, #64]	; (8001290 <HAL_TIM_Base_MspInit+0x78>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d115      	bne.n	800127e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_TIM_Base_MspInit+0x74>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a0c      	ldr	r2, [pc, #48]	; (800128c <HAL_TIM_Base_MspInit+0x74>)
 800125c:	f043 0310 	orr.w	r3, r3, #16
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_TIM_Base_MspInit+0x74>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	2036      	movs	r0, #54	; 0x36
 8001274:	f000 faad 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001278:	2036      	movs	r0, #54	; 0x36
 800127a:	f000 fac6 	bl	800180a <HAL_NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40010000 	.word	0x40010000
 800128c:	40023800 	.word	0x40023800
 8001290:	40001000 	.word	0x40001000

08001294 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <HAL_TIM_MspPostInit+0x68>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d11e      	bne.n	80012f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_TIM_MspPostInit+0x6c>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <HAL_TIM_MspPostInit+0x6c>)
 80012c0:	f043 0310 	orr.w	r3, r3, #16
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_TIM_MspPostInit+0x6c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	4619      	mov	r1, r3
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_TIM_MspPostInit+0x70>)
 80012f0:	f000 fb38 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012f4:	bf00      	nop
 80012f6:	3720      	adds	r7, #32
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40010000 	.word	0x40010000
 8001300:	40023800 	.word	0x40023800
 8001304:	40021000 	.word	0x40021000

08001308 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <MX_USART6_UART_Init+0x50>)
 8001310:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 8001314:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001318:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 8001340:	f002 f9a2 	bl	8003688 <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800134a:	f7ff fdd9 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000150 	.word	0x20000150
 8001358:	40011400 	.word	0x40011400

0800135c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <HAL_UART_MspInit+0x94>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d133      	bne.n	80013e6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <HAL_UART_MspInit+0x98>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <HAL_UART_MspInit+0x98>)
 8001388:	f043 0320 	orr.w	r3, r3, #32
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_UART_MspInit+0x98>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f003 0320 	and.w	r3, r3, #32
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_UART_MspInit+0x98>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <HAL_UART_MspInit+0x98>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_UART_MspInit+0x98>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013b6:	23c0      	movs	r3, #192	; 0xc0
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80013c6:	2308      	movs	r3, #8
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <HAL_UART_MspInit+0x9c>)
 80013d2:	f000 fac7 	bl	8001964 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	2047      	movs	r0, #71	; 0x47
 80013dc:	f000 f9f9 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80013e0:	2047      	movs	r0, #71	; 0x47
 80013e2:	f000 fa12 	bl	800180a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80013e6:	bf00      	nop
 80013e8:	3728      	adds	r7, #40	; 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40011400 	.word	0x40011400
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020800 	.word	0x40020800

080013fc <insert_in_queue>:

static uint8_t queue[QUEUE_SIZE];
static int insertion_index = 0;
static int queue_size = 0;

void insert_in_queue(uint8_t x) {
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
	if (queue_size >= QUEUE_SIZE) return;
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <insert_in_queue+0x54>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b63      	cmp	r3, #99	; 0x63
 800140c:	dc19      	bgt.n	8001442 <insert_in_queue+0x46>
	queue_size += 1;
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <insert_in_queue+0x54>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <insert_in_queue+0x54>)
 8001416:	6013      	str	r3, [r2, #0]
	queue[insertion_index] = x;
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <insert_in_queue+0x58>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	490e      	ldr	r1, [pc, #56]	; (8001458 <insert_in_queue+0x5c>)
 800141e:	79fa      	ldrb	r2, [r7, #7]
 8001420:	54ca      	strb	r2, [r1, r3]
	insertion_index = (insertion_index + 1) % QUEUE_SIZE;
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <insert_in_queue+0x58>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <insert_in_queue+0x60>)
 800142a:	fb83 1302 	smull	r1, r3, r3, r2
 800142e:	1159      	asrs	r1, r3, #5
 8001430:	17d3      	asrs	r3, r2, #31
 8001432:	1acb      	subs	r3, r1, r3
 8001434:	2164      	movs	r1, #100	; 0x64
 8001436:	fb01 f303 	mul.w	r3, r1, r3
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	4a05      	ldr	r2, [pc, #20]	; (8001454 <insert_in_queue+0x58>)
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	e000      	b.n	8001444 <insert_in_queue+0x48>
	if (queue_size >= QUEUE_SIZE) return;
 8001442:	bf00      	nop
}
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	200001fc 	.word	0x200001fc
 8001454:	200001f8 	.word	0x200001f8
 8001458:	20000194 	.word	0x20000194
 800145c:	51eb851f 	.word	0x51eb851f

08001460 <take_element_from_queue>:

uint8_t take_element_from_queue() {
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
	if (queue_size <= 0) return 0;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <take_element_from_queue+0x54>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	dc01      	bgt.n	8001472 <take_element_from_queue+0x12>
 800146e:	2300      	movs	r3, #0
 8001470:	e019      	b.n	80014a6 <take_element_from_queue+0x46>
	int dequeue_index = (insertion_index - queue_size + QUEUE_SIZE) % QUEUE_SIZE;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <take_element_from_queue+0x58>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <take_element_from_queue+0x54>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	3364      	adds	r3, #100	; 0x64
 800147e:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <take_element_from_queue+0x5c>)
 8001480:	fb82 1203 	smull	r1, r2, r2, r3
 8001484:	1151      	asrs	r1, r2, #5
 8001486:	17da      	asrs	r2, r3, #31
 8001488:	1a8a      	subs	r2, r1, r2
 800148a:	2164      	movs	r1, #100	; 0x64
 800148c:	fb01 f202 	mul.w	r2, r1, r2
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	607b      	str	r3, [r7, #4]
	queue_size -= 1;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <take_element_from_queue+0x54>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <take_element_from_queue+0x54>)
 800149c:	6013      	str	r3, [r2, #0]
	return queue[dequeue_index];
 800149e:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <take_element_from_queue+0x60>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	781b      	ldrb	r3, [r3, #0]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	200001fc 	.word	0x200001fc
 80014b8:	200001f8 	.word	0x200001f8
 80014bc:	51eb851f 	.word	0x51eb851f
 80014c0:	20000194 	.word	0x20000194

080014c4 <is_queue_empty>:

uint8_t is_queue_empty() {
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	return queue_size == 0;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <is_queue_empty+0x1c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf0c      	ite	eq
 80014d0:	2301      	moveq	r3, #1
 80014d2:	2300      	movne	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	200001fc 	.word	0x200001fc

080014e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800151c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ea:	490e      	ldr	r1, [pc, #56]	; (8001524 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014ec:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001500:	4c0b      	ldr	r4, [pc, #44]	; (8001530 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800150e:	f7ff fd99 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001512:	f003 fa13 	bl	800493c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001516:	f7ff fb91 	bl	8000c3c <main>
  bx  lr    
 800151a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800151c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001528:	0800543c 	.word	0x0800543c
  ldr r2, =_sbss
 800152c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001530:	20000214 	.word	0x20000214

08001534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC_IRQHandler>
	...

08001538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <HAL_Init+0x40>)
 8001542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_Init+0x40>)
 800154e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_Init+0x40>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001560:	2003      	movs	r0, #3
 8001562:	f000 f92b 	bl	80017bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001566:	200f      	movs	r0, #15
 8001568:	f000 f808 	bl	800157c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156c:	f7ff fcce 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023c00 	.word	0x40023c00

0800157c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x54>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x58>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001592:	fbb3 f3f1 	udiv	r3, r3, r1
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f943 	bl	8001826 <HAL_SYSTICK_Config>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00e      	b.n	80015c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d80a      	bhi.n	80015c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b0:	2200      	movs	r2, #0
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f000 f90b 	bl	80017d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015bc:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <HAL_InitTick+0x5c>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000018 	.word	0x20000018
 80015d4:	20000020 	.word	0x20000020
 80015d8:	2000001c 	.word	0x2000001c

080015dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x20>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x24>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_IncTick+0x24>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000020 	.word	0x20000020
 8001600:	20000200 	.word	0x20000200

08001604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_GetTick+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000200 	.word	0x20000200

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	60d3      	str	r3, [r2, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <__NVIC_EnableIRQ+0x38>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <__NVIC_SetPriority+0x4c>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <__NVIC_SetPriority+0x50>)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	3b04      	subs	r3, #4
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43d9      	mvns	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	4313      	orrs	r3, r2
         );
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001788:	d301      	bcc.n	800178e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178a:	2301      	movs	r3, #1
 800178c:	e00f      	b.n	80017ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <SysTick_Config+0x40>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001796:	210f      	movs	r1, #15
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f7ff ff8e 	bl	80016bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <SysTick_Config+0x40>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <SysTick_Config+0x40>)
 80017a8:	2207      	movs	r2, #7
 80017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	e000e010 	.word	0xe000e010

080017bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff29 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e4:	f7ff ff3e 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f7ff ff8e 	bl	8001710 <NVIC_EncodePriority>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff5d 	bl	80016bc <__NVIC_SetPriority>
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff31 	bl	8001680 <__NVIC_EnableIRQ>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffa2 	bl	8001778 <SysTick_Config>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff feda 	bl	8001604 <HAL_GetTick>
 8001850:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d008      	beq.n	8001870 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e052      	b.n	8001916 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0216 	bic.w	r2, r2, #22
 800187e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800188e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <HAL_DMA_Abort+0x62>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189c:	2b00      	cmp	r3, #0
 800189e:	d007      	beq.n	80018b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0208 	bic.w	r2, r2, #8
 80018ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c0:	e013      	b.n	80018ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c2:	f7ff fe9f 	bl	8001604 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d90c      	bls.n	80018ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2220      	movs	r2, #32
 80018d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2203      	movs	r2, #3
 80018da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e015      	b.n	8001916 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1e4      	bne.n	80018c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fc:	223f      	movs	r2, #63	; 0x3f
 80018fe:	409a      	lsls	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d004      	beq.n	800193c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e00c      	b.n	8001956 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2205      	movs	r2, #5
 8001940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e177      	b.n	8001c70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	f040 8166 	bne.w	8001c6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d005      	beq.n	80019b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d130      	bne.n	8001a18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 0201 	and.w	r2, r3, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d017      	beq.n	8001a54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d123      	bne.n	8001aa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	08da      	lsrs	r2, r3, #3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3208      	adds	r2, #8
 8001a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	220f      	movs	r2, #15
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3208      	adds	r2, #8
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0203 	and.w	r2, r3, #3
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80c0 	beq.w	8001c6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a65      	ldr	r2, [pc, #404]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b06:	4a61      	ldr	r2, [pc, #388]	; (8001c8c <HAL_GPIO_Init+0x328>)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a58      	ldr	r2, [pc, #352]	; (8001c90 <HAL_GPIO_Init+0x32c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d037      	beq.n	8001ba2 <HAL_GPIO_Init+0x23e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a57      	ldr	r2, [pc, #348]	; (8001c94 <HAL_GPIO_Init+0x330>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d031      	beq.n	8001b9e <HAL_GPIO_Init+0x23a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a56      	ldr	r2, [pc, #344]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d02b      	beq.n	8001b9a <HAL_GPIO_Init+0x236>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a55      	ldr	r2, [pc, #340]	; (8001c9c <HAL_GPIO_Init+0x338>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d025      	beq.n	8001b96 <HAL_GPIO_Init+0x232>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a54      	ldr	r2, [pc, #336]	; (8001ca0 <HAL_GPIO_Init+0x33c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d01f      	beq.n	8001b92 <HAL_GPIO_Init+0x22e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a53      	ldr	r2, [pc, #332]	; (8001ca4 <HAL_GPIO_Init+0x340>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d019      	beq.n	8001b8e <HAL_GPIO_Init+0x22a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <HAL_GPIO_Init+0x344>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_GPIO_Init+0x226>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a51      	ldr	r2, [pc, #324]	; (8001cac <HAL_GPIO_Init+0x348>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00d      	beq.n	8001b86 <HAL_GPIO_Init+0x222>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a50      	ldr	r2, [pc, #320]	; (8001cb0 <HAL_GPIO_Init+0x34c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d007      	beq.n	8001b82 <HAL_GPIO_Init+0x21e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4f      	ldr	r2, [pc, #316]	; (8001cb4 <HAL_GPIO_Init+0x350>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d101      	bne.n	8001b7e <HAL_GPIO_Init+0x21a>
 8001b7a:	2309      	movs	r3, #9
 8001b7c:	e012      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b7e:	230a      	movs	r3, #10
 8001b80:	e010      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b82:	2308      	movs	r3, #8
 8001b84:	e00e      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b86:	2307      	movs	r3, #7
 8001b88:	e00c      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b8a:	2306      	movs	r3, #6
 8001b8c:	e00a      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b8e:	2305      	movs	r3, #5
 8001b90:	e008      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e004      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	f002 0203 	and.w	r2, r2, #3
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	4093      	lsls	r3, r2
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb4:	4935      	ldr	r1, [pc, #212]	; (8001c8c <HAL_GPIO_Init+0x328>)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001be6:	4a34      	ldr	r2, [pc, #208]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bec:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c10:	4a29      	ldr	r2, [pc, #164]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c3a:	4a1f      	ldr	r2, [pc, #124]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c64:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b0f      	cmp	r3, #15
 8001c74:	f67f ae84 	bls.w	8001980 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40013800 	.word	0x40013800
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40020400 	.word	0x40020400
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020c00 	.word	0x40020c00
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40021400 	.word	0x40021400
 8001ca8:	40021800 	.word	0x40021800
 8001cac:	40021c00 	.word	0x40021c00
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40022400 	.word	0x40022400
 8001cb8:	40013c00 	.word	0x40013c00

08001cbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e267      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d075      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cda:	4b88      	ldr	r3, [pc, #544]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d00c      	beq.n	8001d00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ce6:	4b85      	ldr	r3, [pc, #532]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d112      	bne.n	8001d18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cf2:	4b82      	ldr	r3, [pc, #520]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cfe:	d10b      	bne.n	8001d18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	4b7e      	ldr	r3, [pc, #504]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d05b      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x108>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d157      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e242      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d20:	d106      	bne.n	8001d30 <HAL_RCC_OscConfig+0x74>
 8001d22:	4b76      	ldr	r3, [pc, #472]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a75      	ldr	r2, [pc, #468]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e01d      	b.n	8001d6c <HAL_RCC_OscConfig+0xb0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x98>
 8001d3a:	4b70      	ldr	r3, [pc, #448]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a6f      	ldr	r2, [pc, #444]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b6d      	ldr	r3, [pc, #436]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6c      	ldr	r2, [pc, #432]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_OscConfig+0xb0>
 8001d54:	4b69      	ldr	r3, [pc, #420]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a68      	ldr	r2, [pc, #416]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	4b66      	ldr	r3, [pc, #408]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a65      	ldr	r2, [pc, #404]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d013      	beq.n	8001d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fc46 	bl	8001604 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fc42 	bl	8001604 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	; 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e207      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	4b5b      	ldr	r3, [pc, #364]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0xc0>
 8001d9a:	e014      	b.n	8001dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fc32 	bl	8001604 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fc2e 	bl	8001604 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1f3      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	4b51      	ldr	r3, [pc, #324]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0xe8>
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d063      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dd2:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dde:	4b47      	ldr	r3, [pc, #284]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d11c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dea:	4b44      	ldr	r3, [pc, #272]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d116      	bne.n	8001e24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df6:	4b41      	ldr	r3, [pc, #260]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_RCC_OscConfig+0x152>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d001      	beq.n	8001e0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e1c7      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4937      	ldr	r1, [pc, #220]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e22:	e03a      	b.n	8001e9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d020      	beq.n	8001e6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e2c:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <HAL_RCC_OscConfig+0x244>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e32:	f7ff fbe7 	bl	8001604 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e3a:	f7ff fbe3 	bl	8001604 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e1a8      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e58:	4b28      	ldr	r3, [pc, #160]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4925      	ldr	r1, [pc, #148]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
 8001e6c:	e015      	b.n	8001e9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <HAL_RCC_OscConfig+0x244>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff fbc6 	bl	8001604 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e7c:	f7ff fbc2 	bl	8001604 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e187      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d036      	beq.n	8001f14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d016      	beq.n	8001edc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_RCC_OscConfig+0x248>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb4:	f7ff fba6 	bl	8001604 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ebc:	f7ff fba2 	bl	8001604 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e167      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_OscConfig+0x240>)
 8001ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x200>
 8001eda:	e01b      	b.n	8001f14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_RCC_OscConfig+0x248>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7ff fb8f 	bl	8001604 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee8:	e00e      	b.n	8001f08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eea:	f7ff fb8b 	bl	8001604 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d907      	bls.n	8001f08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e150      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
 8001efc:	40023800 	.word	0x40023800
 8001f00:	42470000 	.word	0x42470000
 8001f04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f08:	4b88      	ldr	r3, [pc, #544]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8001f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1ea      	bne.n	8001eea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8097 	beq.w	8002050 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f26:	4b81      	ldr	r3, [pc, #516]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10f      	bne.n	8001f52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	4b7d      	ldr	r3, [pc, #500]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a7c      	ldr	r2, [pc, #496]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b7a      	ldr	r3, [pc, #488]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f52:	4b77      	ldr	r3, [pc, #476]	; (8002130 <HAL_RCC_OscConfig+0x474>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d118      	bne.n	8001f90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5e:	4b74      	ldr	r3, [pc, #464]	; (8002130 <HAL_RCC_OscConfig+0x474>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a73      	ldr	r2, [pc, #460]	; (8002130 <HAL_RCC_OscConfig+0x474>)
 8001f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6a:	f7ff fb4b 	bl	8001604 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f72:	f7ff fb47 	bl	8001604 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e10c      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	4b6a      	ldr	r3, [pc, #424]	; (8002130 <HAL_RCC_OscConfig+0x474>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x2ea>
 8001f98:	4b64      	ldr	r3, [pc, #400]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	4a63      	ldr	r2, [pc, #396]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa4:	e01c      	b.n	8001fe0 <HAL_RCC_OscConfig+0x324>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x30c>
 8001fae:	4b5f      	ldr	r3, [pc, #380]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	4a5e      	ldr	r2, [pc, #376]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fba:	4b5c      	ldr	r3, [pc, #368]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	4a5b      	ldr	r2, [pc, #364]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc6:	e00b      	b.n	8001fe0 <HAL_RCC_OscConfig+0x324>
 8001fc8:	4b58      	ldr	r3, [pc, #352]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	4a57      	ldr	r2, [pc, #348]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8001fce:	f023 0301 	bic.w	r3, r3, #1
 8001fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd4:	4b55      	ldr	r3, [pc, #340]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	4a54      	ldr	r2, [pc, #336]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8001fda:	f023 0304 	bic.w	r3, r3, #4
 8001fde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d015      	beq.n	8002014 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe8:	f7ff fb0c 	bl	8001604 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fb08 	bl	8001604 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e0cb      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002006:	4b49      	ldr	r3, [pc, #292]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0ee      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x334>
 8002012:	e014      	b.n	800203e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002014:	f7ff faf6 	bl	8001604 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201a:	e00a      	b.n	8002032 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800201c:	f7ff faf2 	bl	8001604 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f241 3288 	movw	r2, #5000	; 0x1388
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e0b5      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002032:	4b3e      	ldr	r3, [pc, #248]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1ee      	bne.n	800201c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800203e:	7dfb      	ldrb	r3, [r7, #23]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d105      	bne.n	8002050 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002044:	4b39      	ldr	r3, [pc, #228]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	4a38      	ldr	r2, [pc, #224]	; (800212c <HAL_RCC_OscConfig+0x470>)
 800204a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80a1 	beq.w	800219c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800205a:	4b34      	ldr	r3, [pc, #208]	; (800212c <HAL_RCC_OscConfig+0x470>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b08      	cmp	r3, #8
 8002064:	d05c      	beq.n	8002120 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d141      	bne.n	80020f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_RCC_OscConfig+0x478>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff fac6 	bl	8001604 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207c:	f7ff fac2 	bl	8001604 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e087      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208e:	4b27      	ldr	r3, [pc, #156]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69da      	ldr	r2, [r3, #28]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	019b      	lsls	r3, r3, #6
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	3b01      	subs	r3, #1
 80020b4:	041b      	lsls	r3, r3, #16
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	061b      	lsls	r3, r3, #24
 80020be:	491b      	ldr	r1, [pc, #108]	; (800212c <HAL_RCC_OscConfig+0x470>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_RCC_OscConfig+0x478>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7ff fa9b 	bl	8001604 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d2:	f7ff fa97 	bl	8001604 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e05c      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_RCC_OscConfig+0x470>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x416>
 80020f0:	e054      	b.n	800219c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_RCC_OscConfig+0x478>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff fa84 	bl	8001604 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002100:	f7ff fa80 	bl	8001604 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e045      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_RCC_OscConfig+0x470>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x444>
 800211e:	e03d      	b.n	800219c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d107      	bne.n	8002138 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e038      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
 800212c:	40023800 	.word	0x40023800
 8002130:	40007000 	.word	0x40007000
 8002134:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <HAL_RCC_OscConfig+0x4ec>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d028      	beq.n	8002198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002150:	429a      	cmp	r2, r3
 8002152:	d121      	bne.n	8002198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	429a      	cmp	r2, r3
 8002160:	d11a      	bne.n	8002198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002168:	4013      	ands	r3, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800216e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002170:	4293      	cmp	r3, r2
 8002172:	d111      	bne.n	8002198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	085b      	lsrs	r3, r3, #1
 8002180:	3b01      	subs	r3, #1
 8002182:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002184:	429a      	cmp	r2, r3
 8002186:	d107      	bne.n	8002198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800

080021ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0cc      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c0:	4b68      	ldr	r3, [pc, #416]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d90c      	bls.n	80021e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b65      	ldr	r3, [pc, #404]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b63      	ldr	r3, [pc, #396]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0b8      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d020      	beq.n	8002236 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002200:	4b59      	ldr	r3, [pc, #356]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a58      	ldr	r2, [pc, #352]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800220a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002218:	4b53      	ldr	r3, [pc, #332]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4a52      	ldr	r2, [pc, #328]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002222:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002224:	4b50      	ldr	r3, [pc, #320]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	494d      	ldr	r1, [pc, #308]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d044      	beq.n	80022cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d119      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e07f      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d003      	beq.n	800226a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002266:	2b03      	cmp	r3, #3
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226a:	4b3f      	ldr	r3, [pc, #252]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e06f      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227a:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e067      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228a:	4b37      	ldr	r3, [pc, #220]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f023 0203 	bic.w	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4934      	ldr	r1, [pc, #208]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	4313      	orrs	r3, r2
 800229a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800229c:	f7ff f9b2 	bl	8001604 <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a4:	f7ff f9ae 	bl	8001604 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e04f      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 020c 	and.w	r2, r3, #12
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d1eb      	bne.n	80022a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d20c      	bcs.n	80022f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b22      	ldr	r3, [pc, #136]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e032      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4916      	ldr	r1, [pc, #88]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	490e      	ldr	r1, [pc, #56]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002332:	f000 f821 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 8002336:	4602      	mov	r2, r0
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	490a      	ldr	r1, [pc, #40]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	5ccb      	ldrb	r3, [r1, r3]
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	4a09      	ldr	r2, [pc, #36]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_RCC_ClockConfig+0x1c8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f912 	bl	800157c <HAL_InitTick>

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023c00 	.word	0x40023c00
 8002368:	40023800 	.word	0x40023800
 800236c:	080053e0 	.word	0x080053e0
 8002370:	20000018 	.word	0x20000018
 8002374:	2000001c 	.word	0x2000001c

08002378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800237c:	b090      	sub	sp, #64	; 0x40
 800237e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
 8002384:	2300      	movs	r3, #0
 8002386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002388:	2300      	movs	r3, #0
 800238a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002390:	4b59      	ldr	r3, [pc, #356]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b08      	cmp	r3, #8
 800239a:	d00d      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x40>
 800239c:	2b08      	cmp	r3, #8
 800239e:	f200 80a1 	bhi.w	80024e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <HAL_RCC_GetSysClockFreq+0x34>
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d003      	beq.n	80023b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023aa:	e09b      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_RCC_GetSysClockFreq+0x184>)
 80023ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80023b0:	e09b      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023b2:	4b53      	ldr	r3, [pc, #332]	; (8002500 <HAL_RCC_GetSysClockFreq+0x188>)
 80023b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023b6:	e098      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023b8:	4b4f      	ldr	r3, [pc, #316]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023c2:	4b4d      	ldr	r3, [pc, #308]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d028      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ce:	4b4a      	ldr	r3, [pc, #296]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	099b      	lsrs	r3, r3, #6
 80023d4:	2200      	movs	r2, #0
 80023d6:	623b      	str	r3, [r7, #32]
 80023d8:	627a      	str	r2, [r7, #36]	; 0x24
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023e0:	2100      	movs	r1, #0
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_RCC_GetSysClockFreq+0x188>)
 80023e4:	fb03 f201 	mul.w	r2, r3, r1
 80023e8:	2300      	movs	r3, #0
 80023ea:	fb00 f303 	mul.w	r3, r0, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	4a43      	ldr	r2, [pc, #268]	; (8002500 <HAL_RCC_GetSysClockFreq+0x188>)
 80023f2:	fba0 1202 	umull	r1, r2, r0, r2
 80023f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023f8:	460a      	mov	r2, r1
 80023fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80023fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fe:	4413      	add	r3, r2
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002404:	2200      	movs	r2, #0
 8002406:	61bb      	str	r3, [r7, #24]
 8002408:	61fa      	str	r2, [r7, #28]
 800240a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800240e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002412:	f7fd ff45 	bl	80002a0 <__aeabi_uldivmod>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4613      	mov	r3, r2
 800241c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800241e:	e053      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002420:	4b35      	ldr	r3, [pc, #212]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	099b      	lsrs	r3, r3, #6
 8002426:	2200      	movs	r2, #0
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	617a      	str	r2, [r7, #20]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002432:	f04f 0b00 	mov.w	fp, #0
 8002436:	4652      	mov	r2, sl
 8002438:	465b      	mov	r3, fp
 800243a:	f04f 0000 	mov.w	r0, #0
 800243e:	f04f 0100 	mov.w	r1, #0
 8002442:	0159      	lsls	r1, r3, #5
 8002444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002448:	0150      	lsls	r0, r2, #5
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	ebb2 080a 	subs.w	r8, r2, sl
 8002452:	eb63 090b 	sbc.w	r9, r3, fp
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002462:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002466:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800246a:	ebb2 0408 	subs.w	r4, r2, r8
 800246e:	eb63 0509 	sbc.w	r5, r3, r9
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	00eb      	lsls	r3, r5, #3
 800247c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002480:	00e2      	lsls	r2, r4, #3
 8002482:	4614      	mov	r4, r2
 8002484:	461d      	mov	r5, r3
 8002486:	eb14 030a 	adds.w	r3, r4, sl
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	eb45 030b 	adc.w	r3, r5, fp
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800249e:	4629      	mov	r1, r5
 80024a0:	028b      	lsls	r3, r1, #10
 80024a2:	4621      	mov	r1, r4
 80024a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024a8:	4621      	mov	r1, r4
 80024aa:	028a      	lsls	r2, r1, #10
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b2:	2200      	movs	r2, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	60fa      	str	r2, [r7, #12]
 80024b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024bc:	f7fd fef0 	bl	80002a0 <__aeabi_uldivmod>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4613      	mov	r3, r2
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	3301      	adds	r3, #1
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80024d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024e2:	e002      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_RCC_GetSysClockFreq+0x184>)
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3740      	adds	r7, #64	; 0x40
 80024f0:	46bd      	mov	sp, r7
 80024f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	00f42400 	.word	0x00f42400
 8002500:	017d7840 	.word	0x017d7840

08002504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_RCC_GetHCLKFreq+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000018 	.word	0x20000018

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002520:	f7ff fff0 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	0a9b      	lsrs	r3, r3, #10
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4903      	ldr	r1, [pc, #12]	; (8002540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002538:	4618      	mov	r0, r3
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800
 8002540:	080053f0 	.word	0x080053f0

08002544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002548:	f7ff ffdc 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	0b5b      	lsrs	r3, r3, #13
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	4903      	ldr	r1, [pc, #12]	; (8002568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40023800 	.word	0x40023800
 8002568:	080053f0 	.word	0x080053f0

0800256c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e041      	b.n	8002602 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe fe40 	bl	8001218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3304      	adds	r3, #4
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f000 fc7a 	bl	8002ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d001      	beq.n	8002624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e04e      	b.n	80026c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a23      	ldr	r2, [pc, #140]	; (80026d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d022      	beq.n	800268c <HAL_TIM_Base_Start_IT+0x80>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264e:	d01d      	beq.n	800268c <HAL_TIM_Base_Start_IT+0x80>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1f      	ldr	r2, [pc, #124]	; (80026d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d018      	beq.n	800268c <HAL_TIM_Base_Start_IT+0x80>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1e      	ldr	r2, [pc, #120]	; (80026d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d013      	beq.n	800268c <HAL_TIM_Base_Start_IT+0x80>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1c      	ldr	r2, [pc, #112]	; (80026dc <HAL_TIM_Base_Start_IT+0xd0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00e      	beq.n	800268c <HAL_TIM_Base_Start_IT+0x80>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a1b      	ldr	r2, [pc, #108]	; (80026e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d009      	beq.n	800268c <HAL_TIM_Base_Start_IT+0x80>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d004      	beq.n	800268c <HAL_TIM_Base_Start_IT+0x80>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d111      	bne.n	80026b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2b06      	cmp	r3, #6
 800269c:	d010      	beq.n	80026c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ae:	e007      	b.n	80026c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40010000 	.word	0x40010000
 80026d4:	40000400 	.word	0x40000400
 80026d8:	40000800 	.word	0x40000800
 80026dc:	40000c00 	.word	0x40000c00
 80026e0:	40010400 	.word	0x40010400
 80026e4:	40014000 	.word	0x40014000
 80026e8:	40001800 	.word	0x40001800

080026ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e041      	b.n	8002782 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f839 	bl	800278a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3304      	adds	r3, #4
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f000 fbba 	bl	8002ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <HAL_TIM_PWM_Start+0x24>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	bf14      	ite	ne
 80027bc:	2301      	movne	r3, #1
 80027be:	2300      	moveq	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e022      	b.n	800280a <HAL_TIM_PWM_Start+0x6a>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d109      	bne.n	80027de <HAL_TIM_PWM_Start+0x3e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	bf14      	ite	ne
 80027d6:	2301      	movne	r3, #1
 80027d8:	2300      	moveq	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	e015      	b.n	800280a <HAL_TIM_PWM_Start+0x6a>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d109      	bne.n	80027f8 <HAL_TIM_PWM_Start+0x58>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	bf14      	ite	ne
 80027f0:	2301      	movne	r3, #1
 80027f2:	2300      	moveq	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e008      	b.n	800280a <HAL_TIM_PWM_Start+0x6a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e07c      	b.n	800290c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d104      	bne.n	8002822 <HAL_TIM_PWM_Start+0x82>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002820:	e013      	b.n	800284a <HAL_TIM_PWM_Start+0xaa>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d104      	bne.n	8002832 <HAL_TIM_PWM_Start+0x92>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002830:	e00b      	b.n	800284a <HAL_TIM_PWM_Start+0xaa>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d104      	bne.n	8002842 <HAL_TIM_PWM_Start+0xa2>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002840:	e003      	b.n	800284a <HAL_TIM_PWM_Start+0xaa>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2202      	movs	r2, #2
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2201      	movs	r2, #1
 8002850:	6839      	ldr	r1, [r7, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fe10 	bl	8003478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2d      	ldr	r2, [pc, #180]	; (8002914 <HAL_TIM_PWM_Start+0x174>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_TIM_PWM_Start+0xcc>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a2c      	ldr	r2, [pc, #176]	; (8002918 <HAL_TIM_PWM_Start+0x178>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_TIM_PWM_Start+0xd0>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_TIM_PWM_Start+0xd2>
 8002870:	2300      	movs	r3, #0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002884:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a22      	ldr	r2, [pc, #136]	; (8002914 <HAL_TIM_PWM_Start+0x174>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d022      	beq.n	80028d6 <HAL_TIM_PWM_Start+0x136>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002898:	d01d      	beq.n	80028d6 <HAL_TIM_PWM_Start+0x136>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1f      	ldr	r2, [pc, #124]	; (800291c <HAL_TIM_PWM_Start+0x17c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d018      	beq.n	80028d6 <HAL_TIM_PWM_Start+0x136>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1d      	ldr	r2, [pc, #116]	; (8002920 <HAL_TIM_PWM_Start+0x180>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_TIM_PWM_Start+0x136>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <HAL_TIM_PWM_Start+0x184>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00e      	beq.n	80028d6 <HAL_TIM_PWM_Start+0x136>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a16      	ldr	r2, [pc, #88]	; (8002918 <HAL_TIM_PWM_Start+0x178>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d009      	beq.n	80028d6 <HAL_TIM_PWM_Start+0x136>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a18      	ldr	r2, [pc, #96]	; (8002928 <HAL_TIM_PWM_Start+0x188>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_TIM_PWM_Start+0x136>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a16      	ldr	r2, [pc, #88]	; (800292c <HAL_TIM_PWM_Start+0x18c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d111      	bne.n	80028fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b06      	cmp	r3, #6
 80028e6:	d010      	beq.n	800290a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f8:	e007      	b.n	800290a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0201 	orr.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40010000 	.word	0x40010000
 8002918:	40010400 	.word	0x40010400
 800291c:	40000400 	.word	0x40000400
 8002920:	40000800 	.word	0x40000800
 8002924:	40000c00 	.word	0x40000c00
 8002928:	40014000 	.word	0x40014000
 800292c:	40001800 	.word	0x40001800

08002930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b02      	cmp	r3, #2
 8002944:	d122      	bne.n	800298c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b02      	cmp	r3, #2
 8002952:	d11b      	bne.n	800298c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0202 	mvn.w	r2, #2
 800295c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fa77 	bl	8002e66 <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fa69 	bl	8002e52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fa7a 	bl	8002e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b04      	cmp	r3, #4
 8002998:	d122      	bne.n	80029e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d11b      	bne.n	80029e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0204 	mvn.w	r2, #4
 80029b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2202      	movs	r2, #2
 80029b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fa4d 	bl	8002e66 <HAL_TIM_IC_CaptureCallback>
 80029cc:	e005      	b.n	80029da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa3f 	bl	8002e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fa50 	bl	8002e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d122      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d11b      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0208 	mvn.w	r2, #8
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa23 	bl	8002e66 <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fa15 	bl	8002e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fa26 	bl	8002e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	d122      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b10      	cmp	r3, #16
 8002a4e:	d11b      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0210 	mvn.w	r2, #16
 8002a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f9f9 	bl	8002e66 <HAL_TIM_IC_CaptureCallback>
 8002a74:	e005      	b.n	8002a82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f9eb 	bl	8002e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f9fc 	bl	8002e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d10e      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d107      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0201 	mvn.w	r2, #1
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fd ffb0 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abe:	2b80      	cmp	r3, #128	; 0x80
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002acc:	2b80      	cmp	r3, #128	; 0x80
 8002ace:	d107      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fdca 	bl	8003674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d10e      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af8:	2b40      	cmp	r3, #64	; 0x40
 8002afa:	d107      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f9c1 	bl	8002e8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d107      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0220 	mvn.w	r2, #32
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fd94 	bl	8003660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e0ae      	b.n	8002cbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b0c      	cmp	r3, #12
 8002b6a:	f200 809f 	bhi.w	8002cac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b6e:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002ba9 	.word	0x08002ba9
 8002b78:	08002cad 	.word	0x08002cad
 8002b7c:	08002cad 	.word	0x08002cad
 8002b80:	08002cad 	.word	0x08002cad
 8002b84:	08002be9 	.word	0x08002be9
 8002b88:	08002cad 	.word	0x08002cad
 8002b8c:	08002cad 	.word	0x08002cad
 8002b90:	08002cad 	.word	0x08002cad
 8002b94:	08002c2b 	.word	0x08002c2b
 8002b98:	08002cad 	.word	0x08002cad
 8002b9c:	08002cad 	.word	0x08002cad
 8002ba0:	08002cad 	.word	0x08002cad
 8002ba4:	08002c6b 	.word	0x08002c6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fa18 	bl	8002fe4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0208 	orr.w	r2, r2, #8
 8002bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0204 	bic.w	r2, r2, #4
 8002bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6999      	ldr	r1, [r3, #24]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	619a      	str	r2, [r3, #24]
      break;
 8002be6:	e064      	b.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fa68 	bl	80030c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6999      	ldr	r1, [r3, #24]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	021a      	lsls	r2, r3, #8
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	619a      	str	r2, [r3, #24]
      break;
 8002c28:	e043      	b.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fabd 	bl	80031b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0208 	orr.w	r2, r2, #8
 8002c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0204 	bic.w	r2, r2, #4
 8002c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69d9      	ldr	r1, [r3, #28]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	61da      	str	r2, [r3, #28]
      break;
 8002c68:	e023      	b.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fb11 	bl	8003298 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69d9      	ldr	r1, [r3, #28]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	021a      	lsls	r2, r3, #8
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	61da      	str	r2, [r3, #28]
      break;
 8002caa:	e002      	b.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	75fb      	strb	r3, [r7, #23]
      break;
 8002cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_TIM_ConfigClockSource+0x1c>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e0b4      	b.n	8002e4a <HAL_TIM_ConfigClockSource+0x186>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d18:	d03e      	beq.n	8002d98 <HAL_TIM_ConfigClockSource+0xd4>
 8002d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1e:	f200 8087 	bhi.w	8002e30 <HAL_TIM_ConfigClockSource+0x16c>
 8002d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d26:	f000 8086 	beq.w	8002e36 <HAL_TIM_ConfigClockSource+0x172>
 8002d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2e:	d87f      	bhi.n	8002e30 <HAL_TIM_ConfigClockSource+0x16c>
 8002d30:	2b70      	cmp	r3, #112	; 0x70
 8002d32:	d01a      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0xa6>
 8002d34:	2b70      	cmp	r3, #112	; 0x70
 8002d36:	d87b      	bhi.n	8002e30 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	2b60      	cmp	r3, #96	; 0x60
 8002d3a:	d050      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x11a>
 8002d3c:	2b60      	cmp	r3, #96	; 0x60
 8002d3e:	d877      	bhi.n	8002e30 <HAL_TIM_ConfigClockSource+0x16c>
 8002d40:	2b50      	cmp	r3, #80	; 0x50
 8002d42:	d03c      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0xfa>
 8002d44:	2b50      	cmp	r3, #80	; 0x50
 8002d46:	d873      	bhi.n	8002e30 <HAL_TIM_ConfigClockSource+0x16c>
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d058      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x13a>
 8002d4c:	2b40      	cmp	r3, #64	; 0x40
 8002d4e:	d86f      	bhi.n	8002e30 <HAL_TIM_ConfigClockSource+0x16c>
 8002d50:	2b30      	cmp	r3, #48	; 0x30
 8002d52:	d064      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x15a>
 8002d54:	2b30      	cmp	r3, #48	; 0x30
 8002d56:	d86b      	bhi.n	8002e30 <HAL_TIM_ConfigClockSource+0x16c>
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d060      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x15a>
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d867      	bhi.n	8002e30 <HAL_TIM_ConfigClockSource+0x16c>
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d05c      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x15a>
 8002d64:	2b10      	cmp	r3, #16
 8002d66:	d05a      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x15a>
 8002d68:	e062      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6899      	ldr	r1, [r3, #8]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f000 fb5d 	bl	8003438 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	609a      	str	r2, [r3, #8]
      break;
 8002d96:	e04f      	b.n	8002e38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6899      	ldr	r1, [r3, #8]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f000 fb46 	bl	8003438 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dba:	609a      	str	r2, [r3, #8]
      break;
 8002dbc:	e03c      	b.n	8002e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f000 faba 	bl	8003344 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2150      	movs	r1, #80	; 0x50
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fb13 	bl	8003402 <TIM_ITRx_SetConfig>
      break;
 8002ddc:	e02c      	b.n	8002e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f000 fad9 	bl	80033a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2160      	movs	r1, #96	; 0x60
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fb03 	bl	8003402 <TIM_ITRx_SetConfig>
      break;
 8002dfc:	e01c      	b.n	8002e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6859      	ldr	r1, [r3, #4]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f000 fa9a 	bl	8003344 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2140      	movs	r1, #64	; 0x40
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 faf3 	bl	8003402 <TIM_ITRx_SetConfig>
      break;
 8002e1c:	e00c      	b.n	8002e38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4619      	mov	r1, r3
 8002e28:	4610      	mov	r0, r2
 8002e2a:	f000 faea 	bl	8003402 <TIM_ITRx_SetConfig>
      break;
 8002e2e:	e003      	b.n	8002e38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      break;
 8002e34:	e000      	b.n	8002e38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a40      	ldr	r2, [pc, #256]	; (8002fb8 <TIM_Base_SetConfig+0x114>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <TIM_Base_SetConfig+0x40>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec2:	d00f      	beq.n	8002ee4 <TIM_Base_SetConfig+0x40>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a3d      	ldr	r2, [pc, #244]	; (8002fbc <TIM_Base_SetConfig+0x118>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00b      	beq.n	8002ee4 <TIM_Base_SetConfig+0x40>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a3c      	ldr	r2, [pc, #240]	; (8002fc0 <TIM_Base_SetConfig+0x11c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d007      	beq.n	8002ee4 <TIM_Base_SetConfig+0x40>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a3b      	ldr	r2, [pc, #236]	; (8002fc4 <TIM_Base_SetConfig+0x120>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d003      	beq.n	8002ee4 <TIM_Base_SetConfig+0x40>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a3a      	ldr	r2, [pc, #232]	; (8002fc8 <TIM_Base_SetConfig+0x124>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d108      	bne.n	8002ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <TIM_Base_SetConfig+0x114>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d02b      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f04:	d027      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a2c      	ldr	r2, [pc, #176]	; (8002fbc <TIM_Base_SetConfig+0x118>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d023      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a2b      	ldr	r2, [pc, #172]	; (8002fc0 <TIM_Base_SetConfig+0x11c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01f      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <TIM_Base_SetConfig+0x120>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d01b      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <TIM_Base_SetConfig+0x124>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d017      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <TIM_Base_SetConfig+0x128>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a27      	ldr	r2, [pc, #156]	; (8002fd0 <TIM_Base_SetConfig+0x12c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00f      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <TIM_Base_SetConfig+0x130>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00b      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a25      	ldr	r2, [pc, #148]	; (8002fd8 <TIM_Base_SetConfig+0x134>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a24      	ldr	r2, [pc, #144]	; (8002fdc <TIM_Base_SetConfig+0x138>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d003      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <TIM_Base_SetConfig+0x13c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d108      	bne.n	8002f68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <TIM_Base_SetConfig+0x114>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <TIM_Base_SetConfig+0xf8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <TIM_Base_SetConfig+0x124>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d103      	bne.n	8002fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	615a      	str	r2, [r3, #20]
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40010000 	.word	0x40010000
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800
 8002fc4:	40000c00 	.word	0x40000c00
 8002fc8:	40010400 	.word	0x40010400
 8002fcc:	40014000 	.word	0x40014000
 8002fd0:	40014400 	.word	0x40014400
 8002fd4:	40014800 	.word	0x40014800
 8002fd8:	40001800 	.word	0x40001800
 8002fdc:	40001c00 	.word	0x40001c00
 8002fe0:	40002000 	.word	0x40002000

08002fe4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	f023 0201 	bic.w	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f023 0302 	bic.w	r3, r3, #2
 800302c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a20      	ldr	r2, [pc, #128]	; (80030bc <TIM_OC1_SetConfig+0xd8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d003      	beq.n	8003048 <TIM_OC1_SetConfig+0x64>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a1f      	ldr	r2, [pc, #124]	; (80030c0 <TIM_OC1_SetConfig+0xdc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d10c      	bne.n	8003062 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f023 0308 	bic.w	r3, r3, #8
 800304e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f023 0304 	bic.w	r3, r3, #4
 8003060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a15      	ldr	r2, [pc, #84]	; (80030bc <TIM_OC1_SetConfig+0xd8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d003      	beq.n	8003072 <TIM_OC1_SetConfig+0x8e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a14      	ldr	r2, [pc, #80]	; (80030c0 <TIM_OC1_SetConfig+0xdc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d111      	bne.n	8003096 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	621a      	str	r2, [r3, #32]
}
 80030b0:	bf00      	nop
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40010000 	.word	0x40010000
 80030c0:	40010400 	.word	0x40010400

080030c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f023 0210 	bic.w	r2, r3, #16
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0320 	bic.w	r3, r3, #32
 800310e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <TIM_OC2_SetConfig+0xe4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d003      	beq.n	800312c <TIM_OC2_SetConfig+0x68>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a21      	ldr	r2, [pc, #132]	; (80031ac <TIM_OC2_SetConfig+0xe8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d10d      	bne.n	8003148 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003146:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a17      	ldr	r2, [pc, #92]	; (80031a8 <TIM_OC2_SetConfig+0xe4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d003      	beq.n	8003158 <TIM_OC2_SetConfig+0x94>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a16      	ldr	r2, [pc, #88]	; (80031ac <TIM_OC2_SetConfig+0xe8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d113      	bne.n	8003180 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800315e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003166:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	621a      	str	r2, [r3, #32]
}
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40010000 	.word	0x40010000
 80031ac:	40010400 	.word	0x40010400

080031b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0303 	bic.w	r3, r3, #3
 80031e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a21      	ldr	r2, [pc, #132]	; (8003290 <TIM_OC3_SetConfig+0xe0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d003      	beq.n	8003216 <TIM_OC3_SetConfig+0x66>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a20      	ldr	r2, [pc, #128]	; (8003294 <TIM_OC3_SetConfig+0xe4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d10d      	bne.n	8003232 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800321c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	021b      	lsls	r3, r3, #8
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a16      	ldr	r2, [pc, #88]	; (8003290 <TIM_OC3_SetConfig+0xe0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d003      	beq.n	8003242 <TIM_OC3_SetConfig+0x92>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a15      	ldr	r2, [pc, #84]	; (8003294 <TIM_OC3_SetConfig+0xe4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d113      	bne.n	800326a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	621a      	str	r2, [r3, #32]
}
 8003284:	bf00      	nop
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40010000 	.word	0x40010000
 8003294:	40010400 	.word	0x40010400

08003298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	021b      	lsls	r3, r3, #8
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	031b      	lsls	r3, r3, #12
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a12      	ldr	r2, [pc, #72]	; (800333c <TIM_OC4_SetConfig+0xa4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_OC4_SetConfig+0x68>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a11      	ldr	r2, [pc, #68]	; (8003340 <TIM_OC4_SetConfig+0xa8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d109      	bne.n	8003314 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003306:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	019b      	lsls	r3, r3, #6
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	621a      	str	r2, [r3, #32]
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40010000 	.word	0x40010000
 8003340:	40010400 	.word	0x40010400

08003344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f023 0201 	bic.w	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800336e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f023 030a 	bic.w	r3, r3, #10
 8003380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b087      	sub	sp, #28
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f023 0210 	bic.w	r2, r3, #16
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	031b      	lsls	r3, r3, #12
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	621a      	str	r2, [r3, #32]
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	f043 0307 	orr.w	r3, r3, #7
 8003424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	609a      	str	r2, [r3, #8]
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	021a      	lsls	r2, r3, #8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	431a      	orrs	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4313      	orrs	r3, r2
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	609a      	str	r2, [r3, #8]
}
 800346c:	bf00      	nop
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	2201      	movs	r2, #1
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a1a      	ldr	r2, [r3, #32]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	43db      	mvns	r3, r3
 800349a:	401a      	ands	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a1a      	ldr	r2, [r3, #32]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	fa01 f303 	lsl.w	r3, r1, r3
 80034b0:	431a      	orrs	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	621a      	str	r2, [r3, #32]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034d8:	2302      	movs	r3, #2
 80034da:	e05a      	b.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d022      	beq.n	8003566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003528:	d01d      	beq.n	8003566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1d      	ldr	r2, [pc, #116]	; (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d018      	beq.n	8003566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1b      	ldr	r2, [pc, #108]	; (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1a      	ldr	r2, [pc, #104]	; (80035ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00e      	beq.n	8003566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a18      	ldr	r2, [pc, #96]	; (80035b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d009      	beq.n	8003566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d004      	beq.n	8003566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d10c      	bne.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800356c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	4313      	orrs	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40010000 	.word	0x40010000
 80035a4:	40000400 	.word	0x40000400
 80035a8:	40000800 	.word	0x40000800
 80035ac:	40000c00 	.word	0x40000c00
 80035b0:	40010400 	.word	0x40010400
 80035b4:	40014000 	.word	0x40014000
 80035b8:	40001800 	.word	0x40001800

080035bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e03d      	b.n	8003654 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e03f      	b.n	800371a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd fe54 	bl	800135c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2224      	movs	r2, #36	; 0x24
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 febb 	bl	8004448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b08a      	sub	sp, #40	; 0x28
 8003726:	af02      	add	r7, sp, #8
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	603b      	str	r3, [r7, #0]
 800372e:	4613      	mov	r3, r2
 8003730:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b20      	cmp	r3, #32
 8003740:	d17c      	bne.n	800383c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_UART_Transmit+0x2c>
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e075      	b.n	800383e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_UART_Transmit+0x3e>
 800375c:	2302      	movs	r3, #2
 800375e:	e06e      	b.n	800383e <HAL_UART_Transmit+0x11c>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2221      	movs	r2, #33	; 0x21
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003776:	f7fd ff45 	bl	8001604 <HAL_GetTick>
 800377a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	88fa      	ldrh	r2, [r7, #6]
 8003780:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	88fa      	ldrh	r2, [r7, #6]
 8003786:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003790:	d108      	bne.n	80037a4 <HAL_UART_Transmit+0x82>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d104      	bne.n	80037a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	e003      	b.n	80037ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037b4:	e02a      	b.n	800380c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2200      	movs	r2, #0
 80037be:	2180      	movs	r1, #128	; 0x80
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fbfb 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e036      	b.n	800383e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	3302      	adds	r3, #2
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	e007      	b.n	80037fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	3301      	adds	r3, #1
 80037fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1cf      	bne.n	80037b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	2140      	movs	r1, #64	; 0x40
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fbcb 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e006      	b.n	800383e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	e000      	b.n	800383e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
  }
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b08a      	sub	sp, #40	; 0x28
 800384a:	af02      	add	r7, sp, #8
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b20      	cmp	r3, #32
 8003864:	f040 808c 	bne.w	8003980 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_UART_Receive+0x2e>
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e084      	b.n	8003982 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_UART_Receive+0x40>
 8003882:	2302      	movs	r3, #2
 8003884:	e07d      	b.n	8003982 <HAL_UART_Receive+0x13c>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2222      	movs	r2, #34	; 0x22
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038a2:	f7fd feaf 	bl	8001604 <HAL_GetTick>
 80038a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	88fa      	ldrh	r2, [r7, #6]
 80038ac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	88fa      	ldrh	r2, [r7, #6]
 80038b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038bc:	d108      	bne.n	80038d0 <HAL_UART_Receive+0x8a>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d104      	bne.n	80038d0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	e003      	b.n	80038d8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80038e0:	e043      	b.n	800396a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2120      	movs	r1, #32
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 fb65 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e042      	b.n	8003982 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10c      	bne.n	800391c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	b29b      	uxth	r3, r3
 800390a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390e:	b29a      	uxth	r2, r3
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	3302      	adds	r3, #2
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	e01f      	b.n	800395c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003924:	d007      	beq.n	8003936 <HAL_UART_Receive+0xf0>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <HAL_UART_Receive+0xfe>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	701a      	strb	r2, [r3, #0]
 8003942:	e008      	b.n	8003956 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003950:	b2da      	uxtb	r2, r3
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3301      	adds	r3, #1
 800395a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1b6      	bne.n	80038e2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800398a:	b480      	push	{r7}
 800398c:	b085      	sub	sp, #20
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	4613      	mov	r3, r2
 8003996:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d130      	bne.n	8003a06 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_UART_Transmit_IT+0x26>
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e029      	b.n	8003a08 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Transmit_IT+0x38>
 80039be:	2302      	movs	r3, #2
 80039c0:	e022      	b.n	8003a08 <HAL_UART_Transmit_IT+0x7e>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	88fa      	ldrh	r2, [r7, #6]
 80039da:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2221      	movs	r2, #33	; 0x21
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a00:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e000      	b.n	8003a08 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003a06:	2302      	movs	r3, #2
  }
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d11d      	bne.n	8003a6a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_UART_Receive_IT+0x26>
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e016      	b.n	8003a6c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_UART_Receive_IT+0x38>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e00f      	b.n	8003a6c <HAL_UART_Receive_IT+0x58>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fb19 	bl	8004098 <UART_Start_Receive_IT>
 8003a66:	4603      	mov	r3, r0
 8003a68:	e000      	b.n	8003a6c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
  }
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b0ba      	sub	sp, #232	; 0xe8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10f      	bne.n	8003ada <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <HAL_UART_IRQHandler+0x66>
 8003ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fbfd 	bl	80042d2 <UART_Receive_IT>
      return;
 8003ad8:	e256      	b.n	8003f88 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 80de 	beq.w	8003ca0 <HAL_UART_IRQHandler+0x22c>
 8003ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80d1 	beq.w	8003ca0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_UART_IRQHandler+0xae>
 8003b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f043 0201 	orr.w	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_UART_IRQHandler+0xd2>
 8003b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0202 	orr.w	r2, r3, #2
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_UART_IRQHandler+0xf6>
 8003b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f043 0204 	orr.w	r2, r3, #4
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d011      	beq.n	8003b9a <HAL_UART_IRQHandler+0x126>
 8003b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d105      	bne.n	8003b8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f043 0208 	orr.w	r2, r3, #8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 81ed 	beq.w	8003f7e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x14e>
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fb88 	bl	80042d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d103      	bne.n	8003bee <HAL_UART_IRQHandler+0x17a>
 8003be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d04f      	beq.n	8003c8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fa90 	bl	8004114 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d141      	bne.n	8003c86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3314      	adds	r3, #20
 8003c08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3314      	adds	r3, #20
 8003c2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1d9      	bne.n	8003c02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d013      	beq.n	8003c7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	4a7d      	ldr	r2, [pc, #500]	; (8003e50 <HAL_UART_IRQHandler+0x3dc>)
 8003c5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fd fe5b 	bl	800191e <HAL_DMA_Abort_IT>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d016      	beq.n	8003c9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	e00e      	b.n	8003c9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f986 	bl	8003f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c84:	e00a      	b.n	8003c9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f982 	bl	8003f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8c:	e006      	b.n	8003c9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f97e 	bl	8003f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c9a:	e170      	b.n	8003f7e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	bf00      	nop
    return;
 8003c9e:	e16e      	b.n	8003f7e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	f040 814a 	bne.w	8003f3e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8143 	beq.w	8003f3e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 813c 	beq.w	8003f3e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	f040 80b4 	bne.w	8003e54 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8140 	beq.w	8003f82 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	f080 8139 	bcs.w	8003f82 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d22:	f000 8088 	beq.w	8003e36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1d9      	bne.n	8003d26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3314      	adds	r3, #20
 8003d78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3314      	adds	r3, #20
 8003d92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e1      	bne.n	8003d72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3314      	adds	r3, #20
 8003db4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3314      	adds	r3, #20
 8003dce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003dd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e3      	bne.n	8003dae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e06:	f023 0310 	bic.w	r3, r3, #16
 8003e0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e18:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e3      	bne.n	8003df4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fd fd04 	bl	800183e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f8ac 	bl	8003fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e4c:	e099      	b.n	8003f82 <HAL_UART_IRQHandler+0x50e>
 8003e4e:	bf00      	nop
 8003e50:	080041db 	.word	0x080041db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 808b 	beq.w	8003f86 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8086 	beq.w	8003f86 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	330c      	adds	r3, #12
 8003e80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e9e:	647a      	str	r2, [r7, #68]	; 0x44
 8003ea0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ea4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ea6:	e841 2300 	strex	r3, r2, [r1]
 8003eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e3      	bne.n	8003e7a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3314      	adds	r3, #20
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3314      	adds	r3, #20
 8003ed2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ed6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e3      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	330c      	adds	r3, #12
 8003efe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0310 	bic.w	r3, r3, #16
 8003f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	330c      	adds	r3, #12
 8003f18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f1c:	61fa      	str	r2, [r7, #28]
 8003f1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	69b9      	ldr	r1, [r7, #24]
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	e841 2300 	strex	r3, r2, [r1]
 8003f28:	617b      	str	r3, [r7, #20]
   return(result);
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e3      	bne.n	8003ef8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f34:	4619      	mov	r1, r3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f834 	bl	8003fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f3c:	e023      	b.n	8003f86 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_UART_IRQHandler+0x4ea>
 8003f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f953 	bl	8004202 <UART_Transmit_IT>
    return;
 8003f5c:	e014      	b.n	8003f88 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00e      	beq.n	8003f88 <HAL_UART_IRQHandler+0x514>
 8003f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f993 	bl	80042a2 <UART_EndTransmit_IT>
    return;
 8003f7c:	e004      	b.n	8003f88 <HAL_UART_IRQHandler+0x514>
    return;
 8003f7e:	bf00      	nop
 8003f80:	e002      	b.n	8003f88 <HAL_UART_IRQHandler+0x514>
      return;
 8003f82:	bf00      	nop
 8003f84:	e000      	b.n	8003f88 <HAL_UART_IRQHandler+0x514>
      return;
 8003f86:	bf00      	nop
  }
}
 8003f88:	37e8      	adds	r7, #232	; 0xe8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop

08003f90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b090      	sub	sp, #64	; 0x40
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fcc:	e050      	b.n	8004070 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d04c      	beq.n	8004070 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d007      	beq.n	8003fec <UART_WaitOnFlagUntilTimeout+0x30>
 8003fdc:	f7fd fb12 	bl	8001604 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d241      	bcs.n	8004070 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	330c      	adds	r3, #12
 800400a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800400c:	637a      	str	r2, [r7, #52]	; 0x34
 800400e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e5      	bne.n	8003fec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3314      	adds	r3, #20
 8004026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	613b      	str	r3, [r7, #16]
   return(result);
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	63bb      	str	r3, [r7, #56]	; 0x38
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3314      	adds	r3, #20
 800403e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004040:	623a      	str	r2, [r7, #32]
 8004042:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	69f9      	ldr	r1, [r7, #28]
 8004046:	6a3a      	ldr	r2, [r7, #32]
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	61bb      	str	r3, [r7, #24]
   return(result);
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e5      	bne.n	8004020 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e00f      	b.n	8004090 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4013      	ands	r3, r2
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	429a      	cmp	r2, r3
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	429a      	cmp	r2, r3
 800408c:	d09f      	beq.n	8003fce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3740      	adds	r7, #64	; 0x40
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	4613      	mov	r3, r2
 80040a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	88fa      	ldrh	r2, [r7, #6]
 80040b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	88fa      	ldrh	r2, [r7, #6]
 80040b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2222      	movs	r2, #34	; 0x22
 80040c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0201 	orr.w	r2, r2, #1
 80040f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0220 	orr.w	r2, r2, #32
 8004104:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004114:	b480      	push	{r7}
 8004116:	b095      	sub	sp, #84	; 0x54
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	330c      	adds	r3, #12
 8004122:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004126:	e853 3f00 	ldrex	r3, [r3]
 800412a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800413c:	643a      	str	r2, [r7, #64]	; 0x40
 800413e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e5      	bne.n	800411c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3314      	adds	r3, #20
 8004156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	64bb      	str	r3, [r7, #72]	; 0x48
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3314      	adds	r3, #20
 800416e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004170:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e5      	bne.n	8004150 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	2b01      	cmp	r3, #1
 800418a:	d119      	bne.n	80041c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	330c      	adds	r3, #12
 8004192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	e853 3f00 	ldrex	r3, [r3]
 800419a:	60bb      	str	r3, [r7, #8]
   return(result);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f023 0310 	bic.w	r3, r3, #16
 80041a2:	647b      	str	r3, [r7, #68]	; 0x44
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	330c      	adds	r3, #12
 80041aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ac:	61ba      	str	r2, [r7, #24]
 80041ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	6979      	ldr	r1, [r7, #20]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	613b      	str	r3, [r7, #16]
   return(result);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e5      	bne.n	800418c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041ce:	bf00      	nop
 80041d0:	3754      	adds	r7, #84	; 0x54
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f7ff fecb 	bl	8003f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004202:	b480      	push	{r7}
 8004204:	b085      	sub	sp, #20
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b21      	cmp	r3, #33	; 0x21
 8004214:	d13e      	bne.n	8004294 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421e:	d114      	bne.n	800424a <UART_Transmit_IT+0x48>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d110      	bne.n	800424a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800423c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	1c9a      	adds	r2, r3, #2
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	621a      	str	r2, [r3, #32]
 8004248:	e008      	b.n	800425c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	1c59      	adds	r1, r3, #1
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6211      	str	r1, [r2, #32]
 8004254:	781a      	ldrb	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29b      	uxth	r3, r3
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	4619      	mov	r1, r3
 800426a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10f      	bne.n	8004290 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800427e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800428e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	e000      	b.n	8004296 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004294:	2302      	movs	r3, #2
  }
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fc fac6 	bl	8000854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b08c      	sub	sp, #48	; 0x30
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b22      	cmp	r3, #34	; 0x22
 80042e4:	f040 80ab 	bne.w	800443e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f0:	d117      	bne.n	8004322 <UART_Receive_IT+0x50>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d113      	bne.n	8004322 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	b29b      	uxth	r3, r3
 800430c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004310:	b29a      	uxth	r2, r3
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	1c9a      	adds	r2, r3, #2
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	629a      	str	r2, [r3, #40]	; 0x28
 8004320:	e026      	b.n	8004370 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004328:	2300      	movs	r3, #0
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004334:	d007      	beq.n	8004346 <UART_Receive_IT+0x74>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <UART_Receive_IT+0x82>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	e008      	b.n	8004366 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004360:	b2da      	uxtb	r2, r3
 8004362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004364:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29b      	uxth	r3, r3
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	4619      	mov	r1, r3
 800437e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004380:	2b00      	cmp	r3, #0
 8004382:	d15a      	bne.n	800443a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0220 	bic.w	r2, r2, #32
 8004392:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0201 	bic.w	r2, r2, #1
 80043b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d135      	bne.n	8004430 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	330c      	adds	r3, #12
 80043d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	613b      	str	r3, [r7, #16]
   return(result);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f023 0310 	bic.w	r3, r3, #16
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	330c      	adds	r3, #12
 80043e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ea:	623a      	str	r2, [r7, #32]
 80043ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	69f9      	ldr	r1, [r7, #28]
 80043f0:	6a3a      	ldr	r2, [r7, #32]
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e5      	bne.n	80043ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b10      	cmp	r3, #16
 800440a:	d10a      	bne.n	8004422 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004426:	4619      	mov	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff fdbb 	bl	8003fa4 <HAL_UARTEx_RxEventCallback>
 800442e:	e002      	b.n	8004436 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7fc fa49 	bl	80008c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	e002      	b.n	8004440 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e000      	b.n	8004440 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800443e:	2302      	movs	r3, #2
  }
}
 8004440:	4618      	mov	r0, r3
 8004442:	3730      	adds	r7, #48	; 0x30
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800444c:	b0c0      	sub	sp, #256	; 0x100
 800444e:	af00      	add	r7, sp, #0
 8004450:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	68d9      	ldr	r1, [r3, #12]
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	ea40 0301 	orr.w	r3, r0, r1
 8004470:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	431a      	orrs	r2, r3
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	431a      	orrs	r2, r3
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044a0:	f021 010c 	bic.w	r1, r1, #12
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044ae:	430b      	orrs	r3, r1
 80044b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c2:	6999      	ldr	r1, [r3, #24]
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	ea40 0301 	orr.w	r3, r0, r1
 80044ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4b8f      	ldr	r3, [pc, #572]	; (8004714 <UART_SetConfig+0x2cc>)
 80044d8:	429a      	cmp	r2, r3
 80044da:	d005      	beq.n	80044e8 <UART_SetConfig+0xa0>
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4b8d      	ldr	r3, [pc, #564]	; (8004718 <UART_SetConfig+0x2d0>)
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d104      	bne.n	80044f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044e8:	f7fe f82c 	bl	8002544 <HAL_RCC_GetPCLK2Freq>
 80044ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044f0:	e003      	b.n	80044fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044f2:	f7fe f813 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 80044f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004504:	f040 810c 	bne.w	8004720 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800450c:	2200      	movs	r2, #0
 800450e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004512:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004516:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800451a:	4622      	mov	r2, r4
 800451c:	462b      	mov	r3, r5
 800451e:	1891      	adds	r1, r2, r2
 8004520:	65b9      	str	r1, [r7, #88]	; 0x58
 8004522:	415b      	adcs	r3, r3
 8004524:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004526:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800452a:	4621      	mov	r1, r4
 800452c:	eb12 0801 	adds.w	r8, r2, r1
 8004530:	4629      	mov	r1, r5
 8004532:	eb43 0901 	adc.w	r9, r3, r1
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800454a:	4690      	mov	r8, r2
 800454c:	4699      	mov	r9, r3
 800454e:	4623      	mov	r3, r4
 8004550:	eb18 0303 	adds.w	r3, r8, r3
 8004554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004558:	462b      	mov	r3, r5
 800455a:	eb49 0303 	adc.w	r3, r9, r3
 800455e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800456e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004572:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004576:	460b      	mov	r3, r1
 8004578:	18db      	adds	r3, r3, r3
 800457a:	653b      	str	r3, [r7, #80]	; 0x50
 800457c:	4613      	mov	r3, r2
 800457e:	eb42 0303 	adc.w	r3, r2, r3
 8004582:	657b      	str	r3, [r7, #84]	; 0x54
 8004584:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004588:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800458c:	f7fb fe88 	bl	80002a0 <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4b61      	ldr	r3, [pc, #388]	; (800471c <UART_SetConfig+0x2d4>)
 8004596:	fba3 2302 	umull	r2, r3, r3, r2
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	011c      	lsls	r4, r3, #4
 800459e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045b0:	4642      	mov	r2, r8
 80045b2:	464b      	mov	r3, r9
 80045b4:	1891      	adds	r1, r2, r2
 80045b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80045b8:	415b      	adcs	r3, r3
 80045ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045c0:	4641      	mov	r1, r8
 80045c2:	eb12 0a01 	adds.w	sl, r2, r1
 80045c6:	4649      	mov	r1, r9
 80045c8:	eb43 0b01 	adc.w	fp, r3, r1
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045e0:	4692      	mov	sl, r2
 80045e2:	469b      	mov	fp, r3
 80045e4:	4643      	mov	r3, r8
 80045e6:	eb1a 0303 	adds.w	r3, sl, r3
 80045ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045ee:	464b      	mov	r3, r9
 80045f0:	eb4b 0303 	adc.w	r3, fp, r3
 80045f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004604:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004608:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800460c:	460b      	mov	r3, r1
 800460e:	18db      	adds	r3, r3, r3
 8004610:	643b      	str	r3, [r7, #64]	; 0x40
 8004612:	4613      	mov	r3, r2
 8004614:	eb42 0303 	adc.w	r3, r2, r3
 8004618:	647b      	str	r3, [r7, #68]	; 0x44
 800461a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800461e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004622:	f7fb fe3d 	bl	80002a0 <__aeabi_uldivmod>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4611      	mov	r1, r2
 800462c:	4b3b      	ldr	r3, [pc, #236]	; (800471c <UART_SetConfig+0x2d4>)
 800462e:	fba3 2301 	umull	r2, r3, r3, r1
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	2264      	movs	r2, #100	; 0x64
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	1acb      	subs	r3, r1, r3
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004642:	4b36      	ldr	r3, [pc, #216]	; (800471c <UART_SetConfig+0x2d4>)
 8004644:	fba3 2302 	umull	r2, r3, r3, r2
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004650:	441c      	add	r4, r3
 8004652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004656:	2200      	movs	r2, #0
 8004658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800465c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004660:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004664:	4642      	mov	r2, r8
 8004666:	464b      	mov	r3, r9
 8004668:	1891      	adds	r1, r2, r2
 800466a:	63b9      	str	r1, [r7, #56]	; 0x38
 800466c:	415b      	adcs	r3, r3
 800466e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004670:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004674:	4641      	mov	r1, r8
 8004676:	1851      	adds	r1, r2, r1
 8004678:	6339      	str	r1, [r7, #48]	; 0x30
 800467a:	4649      	mov	r1, r9
 800467c:	414b      	adcs	r3, r1
 800467e:	637b      	str	r3, [r7, #52]	; 0x34
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800468c:	4659      	mov	r1, fp
 800468e:	00cb      	lsls	r3, r1, #3
 8004690:	4651      	mov	r1, sl
 8004692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004696:	4651      	mov	r1, sl
 8004698:	00ca      	lsls	r2, r1, #3
 800469a:	4610      	mov	r0, r2
 800469c:	4619      	mov	r1, r3
 800469e:	4603      	mov	r3, r0
 80046a0:	4642      	mov	r2, r8
 80046a2:	189b      	adds	r3, r3, r2
 80046a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046a8:	464b      	mov	r3, r9
 80046aa:	460a      	mov	r2, r1
 80046ac:	eb42 0303 	adc.w	r3, r2, r3
 80046b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046c8:	460b      	mov	r3, r1
 80046ca:	18db      	adds	r3, r3, r3
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ce:	4613      	mov	r3, r2
 80046d0:	eb42 0303 	adc.w	r3, r2, r3
 80046d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046de:	f7fb fddf 	bl	80002a0 <__aeabi_uldivmod>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <UART_SetConfig+0x2d4>)
 80046e8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	2164      	movs	r1, #100	; 0x64
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	3332      	adds	r3, #50	; 0x32
 80046fa:	4a08      	ldr	r2, [pc, #32]	; (800471c <UART_SetConfig+0x2d4>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	f003 0207 	and.w	r2, r3, #7
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4422      	add	r2, r4
 800470e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004710:	e105      	b.n	800491e <UART_SetConfig+0x4d6>
 8004712:	bf00      	nop
 8004714:	40011000 	.word	0x40011000
 8004718:	40011400 	.word	0x40011400
 800471c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004724:	2200      	movs	r2, #0
 8004726:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800472a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800472e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004732:	4642      	mov	r2, r8
 8004734:	464b      	mov	r3, r9
 8004736:	1891      	adds	r1, r2, r2
 8004738:	6239      	str	r1, [r7, #32]
 800473a:	415b      	adcs	r3, r3
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
 800473e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004742:	4641      	mov	r1, r8
 8004744:	1854      	adds	r4, r2, r1
 8004746:	4649      	mov	r1, r9
 8004748:	eb43 0501 	adc.w	r5, r3, r1
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	00eb      	lsls	r3, r5, #3
 8004756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800475a:	00e2      	lsls	r2, r4, #3
 800475c:	4614      	mov	r4, r2
 800475e:	461d      	mov	r5, r3
 8004760:	4643      	mov	r3, r8
 8004762:	18e3      	adds	r3, r4, r3
 8004764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004768:	464b      	mov	r3, r9
 800476a:	eb45 0303 	adc.w	r3, r5, r3
 800476e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800477e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800478e:	4629      	mov	r1, r5
 8004790:	008b      	lsls	r3, r1, #2
 8004792:	4621      	mov	r1, r4
 8004794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004798:	4621      	mov	r1, r4
 800479a:	008a      	lsls	r2, r1, #2
 800479c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047a0:	f7fb fd7e 	bl	80002a0 <__aeabi_uldivmod>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4b60      	ldr	r3, [pc, #384]	; (800492c <UART_SetConfig+0x4e4>)
 80047aa:	fba3 2302 	umull	r2, r3, r3, r2
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	011c      	lsls	r4, r3, #4
 80047b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80047c4:	4642      	mov	r2, r8
 80047c6:	464b      	mov	r3, r9
 80047c8:	1891      	adds	r1, r2, r2
 80047ca:	61b9      	str	r1, [r7, #24]
 80047cc:	415b      	adcs	r3, r3
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047d4:	4641      	mov	r1, r8
 80047d6:	1851      	adds	r1, r2, r1
 80047d8:	6139      	str	r1, [r7, #16]
 80047da:	4649      	mov	r1, r9
 80047dc:	414b      	adcs	r3, r1
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047ec:	4659      	mov	r1, fp
 80047ee:	00cb      	lsls	r3, r1, #3
 80047f0:	4651      	mov	r1, sl
 80047f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047f6:	4651      	mov	r1, sl
 80047f8:	00ca      	lsls	r2, r1, #3
 80047fa:	4610      	mov	r0, r2
 80047fc:	4619      	mov	r1, r3
 80047fe:	4603      	mov	r3, r0
 8004800:	4642      	mov	r2, r8
 8004802:	189b      	adds	r3, r3, r2
 8004804:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004808:	464b      	mov	r3, r9
 800480a:	460a      	mov	r2, r1
 800480c:	eb42 0303 	adc.w	r3, r2, r3
 8004810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	67bb      	str	r3, [r7, #120]	; 0x78
 800481e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800482c:	4649      	mov	r1, r9
 800482e:	008b      	lsls	r3, r1, #2
 8004830:	4641      	mov	r1, r8
 8004832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004836:	4641      	mov	r1, r8
 8004838:	008a      	lsls	r2, r1, #2
 800483a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800483e:	f7fb fd2f 	bl	80002a0 <__aeabi_uldivmod>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4b39      	ldr	r3, [pc, #228]	; (800492c <UART_SetConfig+0x4e4>)
 8004848:	fba3 1302 	umull	r1, r3, r3, r2
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	2164      	movs	r1, #100	; 0x64
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	3332      	adds	r3, #50	; 0x32
 800485a:	4a34      	ldr	r2, [pc, #208]	; (800492c <UART_SetConfig+0x4e4>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	095b      	lsrs	r3, r3, #5
 8004862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004866:	441c      	add	r4, r3
 8004868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800486c:	2200      	movs	r2, #0
 800486e:	673b      	str	r3, [r7, #112]	; 0x70
 8004870:	677a      	str	r2, [r7, #116]	; 0x74
 8004872:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004876:	4642      	mov	r2, r8
 8004878:	464b      	mov	r3, r9
 800487a:	1891      	adds	r1, r2, r2
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	415b      	adcs	r3, r3
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004886:	4641      	mov	r1, r8
 8004888:	1851      	adds	r1, r2, r1
 800488a:	6039      	str	r1, [r7, #0]
 800488c:	4649      	mov	r1, r9
 800488e:	414b      	adcs	r3, r1
 8004890:	607b      	str	r3, [r7, #4]
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800489e:	4659      	mov	r1, fp
 80048a0:	00cb      	lsls	r3, r1, #3
 80048a2:	4651      	mov	r1, sl
 80048a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048a8:	4651      	mov	r1, sl
 80048aa:	00ca      	lsls	r2, r1, #3
 80048ac:	4610      	mov	r0, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	4603      	mov	r3, r0
 80048b2:	4642      	mov	r2, r8
 80048b4:	189b      	adds	r3, r3, r2
 80048b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80048b8:	464b      	mov	r3, r9
 80048ba:	460a      	mov	r2, r1
 80048bc:	eb42 0303 	adc.w	r3, r2, r3
 80048c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	663b      	str	r3, [r7, #96]	; 0x60
 80048cc:	667a      	str	r2, [r7, #100]	; 0x64
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048da:	4649      	mov	r1, r9
 80048dc:	008b      	lsls	r3, r1, #2
 80048de:	4641      	mov	r1, r8
 80048e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e4:	4641      	mov	r1, r8
 80048e6:	008a      	lsls	r2, r1, #2
 80048e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048ec:	f7fb fcd8 	bl	80002a0 <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4b0d      	ldr	r3, [pc, #52]	; (800492c <UART_SetConfig+0x4e4>)
 80048f6:	fba3 1302 	umull	r1, r3, r3, r2
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2164      	movs	r1, #100	; 0x64
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	3332      	adds	r3, #50	; 0x32
 8004908:	4a08      	ldr	r2, [pc, #32]	; (800492c <UART_SetConfig+0x4e4>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	f003 020f 	and.w	r2, r3, #15
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4422      	add	r2, r4
 800491c:	609a      	str	r2, [r3, #8]
}
 800491e:	bf00      	nop
 8004920:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004924:	46bd      	mov	sp, r7
 8004926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800492a:	bf00      	nop
 800492c:	51eb851f 	.word	0x51eb851f

08004930 <__errno>:
 8004930:	4b01      	ldr	r3, [pc, #4]	; (8004938 <__errno+0x8>)
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	20000024 	.word	0x20000024

0800493c <__libc_init_array>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	4d0d      	ldr	r5, [pc, #52]	; (8004974 <__libc_init_array+0x38>)
 8004940:	4c0d      	ldr	r4, [pc, #52]	; (8004978 <__libc_init_array+0x3c>)
 8004942:	1b64      	subs	r4, r4, r5
 8004944:	10a4      	asrs	r4, r4, #2
 8004946:	2600      	movs	r6, #0
 8004948:	42a6      	cmp	r6, r4
 800494a:	d109      	bne.n	8004960 <__libc_init_array+0x24>
 800494c:	4d0b      	ldr	r5, [pc, #44]	; (800497c <__libc_init_array+0x40>)
 800494e:	4c0c      	ldr	r4, [pc, #48]	; (8004980 <__libc_init_array+0x44>)
 8004950:	f000 fc8e 	bl	8005270 <_init>
 8004954:	1b64      	subs	r4, r4, r5
 8004956:	10a4      	asrs	r4, r4, #2
 8004958:	2600      	movs	r6, #0
 800495a:	42a6      	cmp	r6, r4
 800495c:	d105      	bne.n	800496a <__libc_init_array+0x2e>
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	f855 3b04 	ldr.w	r3, [r5], #4
 8004964:	4798      	blx	r3
 8004966:	3601      	adds	r6, #1
 8004968:	e7ee      	b.n	8004948 <__libc_init_array+0xc>
 800496a:	f855 3b04 	ldr.w	r3, [r5], #4
 800496e:	4798      	blx	r3
 8004970:	3601      	adds	r6, #1
 8004972:	e7f2      	b.n	800495a <__libc_init_array+0x1e>
 8004974:	08005434 	.word	0x08005434
 8004978:	08005434 	.word	0x08005434
 800497c:	08005434 	.word	0x08005434
 8004980:	08005438 	.word	0x08005438

08004984 <memset>:
 8004984:	4402      	add	r2, r0
 8004986:	4603      	mov	r3, r0
 8004988:	4293      	cmp	r3, r2
 800498a:	d100      	bne.n	800498e <memset+0xa>
 800498c:	4770      	bx	lr
 800498e:	f803 1b01 	strb.w	r1, [r3], #1
 8004992:	e7f9      	b.n	8004988 <memset+0x4>

08004994 <siprintf>:
 8004994:	b40e      	push	{r1, r2, r3}
 8004996:	b500      	push	{lr}
 8004998:	b09c      	sub	sp, #112	; 0x70
 800499a:	ab1d      	add	r3, sp, #116	; 0x74
 800499c:	9002      	str	r0, [sp, #8]
 800499e:	9006      	str	r0, [sp, #24]
 80049a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049a4:	4809      	ldr	r0, [pc, #36]	; (80049cc <siprintf+0x38>)
 80049a6:	9107      	str	r1, [sp, #28]
 80049a8:	9104      	str	r1, [sp, #16]
 80049aa:	4909      	ldr	r1, [pc, #36]	; (80049d0 <siprintf+0x3c>)
 80049ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80049b0:	9105      	str	r1, [sp, #20]
 80049b2:	6800      	ldr	r0, [r0, #0]
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	a902      	add	r1, sp, #8
 80049b8:	f000 f868 	bl	8004a8c <_svfiprintf_r>
 80049bc:	9b02      	ldr	r3, [sp, #8]
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	b01c      	add	sp, #112	; 0x70
 80049c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80049c8:	b003      	add	sp, #12
 80049ca:	4770      	bx	lr
 80049cc:	20000024 	.word	0x20000024
 80049d0:	ffff0208 	.word	0xffff0208

080049d4 <__ssputs_r>:
 80049d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049d8:	688e      	ldr	r6, [r1, #8]
 80049da:	429e      	cmp	r6, r3
 80049dc:	4682      	mov	sl, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	4690      	mov	r8, r2
 80049e2:	461f      	mov	r7, r3
 80049e4:	d838      	bhi.n	8004a58 <__ssputs_r+0x84>
 80049e6:	898a      	ldrh	r2, [r1, #12]
 80049e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049ec:	d032      	beq.n	8004a54 <__ssputs_r+0x80>
 80049ee:	6825      	ldr	r5, [r4, #0]
 80049f0:	6909      	ldr	r1, [r1, #16]
 80049f2:	eba5 0901 	sub.w	r9, r5, r1
 80049f6:	6965      	ldr	r5, [r4, #20]
 80049f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a00:	3301      	adds	r3, #1
 8004a02:	444b      	add	r3, r9
 8004a04:	106d      	asrs	r5, r5, #1
 8004a06:	429d      	cmp	r5, r3
 8004a08:	bf38      	it	cc
 8004a0a:	461d      	movcc	r5, r3
 8004a0c:	0553      	lsls	r3, r2, #21
 8004a0e:	d531      	bpl.n	8004a74 <__ssputs_r+0xa0>
 8004a10:	4629      	mov	r1, r5
 8004a12:	f000 fb63 	bl	80050dc <_malloc_r>
 8004a16:	4606      	mov	r6, r0
 8004a18:	b950      	cbnz	r0, 8004a30 <__ssputs_r+0x5c>
 8004a1a:	230c      	movs	r3, #12
 8004a1c:	f8ca 3000 	str.w	r3, [sl]
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a26:	81a3      	strh	r3, [r4, #12]
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a30:	6921      	ldr	r1, [r4, #16]
 8004a32:	464a      	mov	r2, r9
 8004a34:	f000 fabe 	bl	8004fb4 <memcpy>
 8004a38:	89a3      	ldrh	r3, [r4, #12]
 8004a3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a42:	81a3      	strh	r3, [r4, #12]
 8004a44:	6126      	str	r6, [r4, #16]
 8004a46:	6165      	str	r5, [r4, #20]
 8004a48:	444e      	add	r6, r9
 8004a4a:	eba5 0509 	sub.w	r5, r5, r9
 8004a4e:	6026      	str	r6, [r4, #0]
 8004a50:	60a5      	str	r5, [r4, #8]
 8004a52:	463e      	mov	r6, r7
 8004a54:	42be      	cmp	r6, r7
 8004a56:	d900      	bls.n	8004a5a <__ssputs_r+0x86>
 8004a58:	463e      	mov	r6, r7
 8004a5a:	6820      	ldr	r0, [r4, #0]
 8004a5c:	4632      	mov	r2, r6
 8004a5e:	4641      	mov	r1, r8
 8004a60:	f000 fab6 	bl	8004fd0 <memmove>
 8004a64:	68a3      	ldr	r3, [r4, #8]
 8004a66:	1b9b      	subs	r3, r3, r6
 8004a68:	60a3      	str	r3, [r4, #8]
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	4433      	add	r3, r6
 8004a6e:	6023      	str	r3, [r4, #0]
 8004a70:	2000      	movs	r0, #0
 8004a72:	e7db      	b.n	8004a2c <__ssputs_r+0x58>
 8004a74:	462a      	mov	r2, r5
 8004a76:	f000 fba5 	bl	80051c4 <_realloc_r>
 8004a7a:	4606      	mov	r6, r0
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d1e1      	bne.n	8004a44 <__ssputs_r+0x70>
 8004a80:	6921      	ldr	r1, [r4, #16]
 8004a82:	4650      	mov	r0, sl
 8004a84:	f000 fabe 	bl	8005004 <_free_r>
 8004a88:	e7c7      	b.n	8004a1a <__ssputs_r+0x46>
	...

08004a8c <_svfiprintf_r>:
 8004a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a90:	4698      	mov	r8, r3
 8004a92:	898b      	ldrh	r3, [r1, #12]
 8004a94:	061b      	lsls	r3, r3, #24
 8004a96:	b09d      	sub	sp, #116	; 0x74
 8004a98:	4607      	mov	r7, r0
 8004a9a:	460d      	mov	r5, r1
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	d50e      	bpl.n	8004abe <_svfiprintf_r+0x32>
 8004aa0:	690b      	ldr	r3, [r1, #16]
 8004aa2:	b963      	cbnz	r3, 8004abe <_svfiprintf_r+0x32>
 8004aa4:	2140      	movs	r1, #64	; 0x40
 8004aa6:	f000 fb19 	bl	80050dc <_malloc_r>
 8004aaa:	6028      	str	r0, [r5, #0]
 8004aac:	6128      	str	r0, [r5, #16]
 8004aae:	b920      	cbnz	r0, 8004aba <_svfiprintf_r+0x2e>
 8004ab0:	230c      	movs	r3, #12
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab8:	e0d1      	b.n	8004c5e <_svfiprintf_r+0x1d2>
 8004aba:	2340      	movs	r3, #64	; 0x40
 8004abc:	616b      	str	r3, [r5, #20]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac2:	2320      	movs	r3, #32
 8004ac4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ac8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004acc:	2330      	movs	r3, #48	; 0x30
 8004ace:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c78 <_svfiprintf_r+0x1ec>
 8004ad2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ad6:	f04f 0901 	mov.w	r9, #1
 8004ada:	4623      	mov	r3, r4
 8004adc:	469a      	mov	sl, r3
 8004ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ae2:	b10a      	cbz	r2, 8004ae8 <_svfiprintf_r+0x5c>
 8004ae4:	2a25      	cmp	r2, #37	; 0x25
 8004ae6:	d1f9      	bne.n	8004adc <_svfiprintf_r+0x50>
 8004ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8004aec:	d00b      	beq.n	8004b06 <_svfiprintf_r+0x7a>
 8004aee:	465b      	mov	r3, fp
 8004af0:	4622      	mov	r2, r4
 8004af2:	4629      	mov	r1, r5
 8004af4:	4638      	mov	r0, r7
 8004af6:	f7ff ff6d 	bl	80049d4 <__ssputs_r>
 8004afa:	3001      	adds	r0, #1
 8004afc:	f000 80aa 	beq.w	8004c54 <_svfiprintf_r+0x1c8>
 8004b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b02:	445a      	add	r2, fp
 8004b04:	9209      	str	r2, [sp, #36]	; 0x24
 8004b06:	f89a 3000 	ldrb.w	r3, [sl]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80a2 	beq.w	8004c54 <_svfiprintf_r+0x1c8>
 8004b10:	2300      	movs	r3, #0
 8004b12:	f04f 32ff 	mov.w	r2, #4294967295
 8004b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b1a:	f10a 0a01 	add.w	sl, sl, #1
 8004b1e:	9304      	str	r3, [sp, #16]
 8004b20:	9307      	str	r3, [sp, #28]
 8004b22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b26:	931a      	str	r3, [sp, #104]	; 0x68
 8004b28:	4654      	mov	r4, sl
 8004b2a:	2205      	movs	r2, #5
 8004b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b30:	4851      	ldr	r0, [pc, #324]	; (8004c78 <_svfiprintf_r+0x1ec>)
 8004b32:	f7fb fb65 	bl	8000200 <memchr>
 8004b36:	9a04      	ldr	r2, [sp, #16]
 8004b38:	b9d8      	cbnz	r0, 8004b72 <_svfiprintf_r+0xe6>
 8004b3a:	06d0      	lsls	r0, r2, #27
 8004b3c:	bf44      	itt	mi
 8004b3e:	2320      	movmi	r3, #32
 8004b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b44:	0711      	lsls	r1, r2, #28
 8004b46:	bf44      	itt	mi
 8004b48:	232b      	movmi	r3, #43	; 0x2b
 8004b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b52:	2b2a      	cmp	r3, #42	; 0x2a
 8004b54:	d015      	beq.n	8004b82 <_svfiprintf_r+0xf6>
 8004b56:	9a07      	ldr	r2, [sp, #28]
 8004b58:	4654      	mov	r4, sl
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	f04f 0c0a 	mov.w	ip, #10
 8004b60:	4621      	mov	r1, r4
 8004b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b66:	3b30      	subs	r3, #48	; 0x30
 8004b68:	2b09      	cmp	r3, #9
 8004b6a:	d94e      	bls.n	8004c0a <_svfiprintf_r+0x17e>
 8004b6c:	b1b0      	cbz	r0, 8004b9c <_svfiprintf_r+0x110>
 8004b6e:	9207      	str	r2, [sp, #28]
 8004b70:	e014      	b.n	8004b9c <_svfiprintf_r+0x110>
 8004b72:	eba0 0308 	sub.w	r3, r0, r8
 8004b76:	fa09 f303 	lsl.w	r3, r9, r3
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	9304      	str	r3, [sp, #16]
 8004b7e:	46a2      	mov	sl, r4
 8004b80:	e7d2      	b.n	8004b28 <_svfiprintf_r+0x9c>
 8004b82:	9b03      	ldr	r3, [sp, #12]
 8004b84:	1d19      	adds	r1, r3, #4
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	9103      	str	r1, [sp, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	bfbb      	ittet	lt
 8004b8e:	425b      	neglt	r3, r3
 8004b90:	f042 0202 	orrlt.w	r2, r2, #2
 8004b94:	9307      	strge	r3, [sp, #28]
 8004b96:	9307      	strlt	r3, [sp, #28]
 8004b98:	bfb8      	it	lt
 8004b9a:	9204      	strlt	r2, [sp, #16]
 8004b9c:	7823      	ldrb	r3, [r4, #0]
 8004b9e:	2b2e      	cmp	r3, #46	; 0x2e
 8004ba0:	d10c      	bne.n	8004bbc <_svfiprintf_r+0x130>
 8004ba2:	7863      	ldrb	r3, [r4, #1]
 8004ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ba6:	d135      	bne.n	8004c14 <_svfiprintf_r+0x188>
 8004ba8:	9b03      	ldr	r3, [sp, #12]
 8004baa:	1d1a      	adds	r2, r3, #4
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	9203      	str	r2, [sp, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bfb8      	it	lt
 8004bb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bb8:	3402      	adds	r4, #2
 8004bba:	9305      	str	r3, [sp, #20]
 8004bbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c88 <_svfiprintf_r+0x1fc>
 8004bc0:	7821      	ldrb	r1, [r4, #0]
 8004bc2:	2203      	movs	r2, #3
 8004bc4:	4650      	mov	r0, sl
 8004bc6:	f7fb fb1b 	bl	8000200 <memchr>
 8004bca:	b140      	cbz	r0, 8004bde <_svfiprintf_r+0x152>
 8004bcc:	2340      	movs	r3, #64	; 0x40
 8004bce:	eba0 000a 	sub.w	r0, r0, sl
 8004bd2:	fa03 f000 	lsl.w	r0, r3, r0
 8004bd6:	9b04      	ldr	r3, [sp, #16]
 8004bd8:	4303      	orrs	r3, r0
 8004bda:	3401      	adds	r4, #1
 8004bdc:	9304      	str	r3, [sp, #16]
 8004bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be2:	4826      	ldr	r0, [pc, #152]	; (8004c7c <_svfiprintf_r+0x1f0>)
 8004be4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004be8:	2206      	movs	r2, #6
 8004bea:	f7fb fb09 	bl	8000200 <memchr>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d038      	beq.n	8004c64 <_svfiprintf_r+0x1d8>
 8004bf2:	4b23      	ldr	r3, [pc, #140]	; (8004c80 <_svfiprintf_r+0x1f4>)
 8004bf4:	bb1b      	cbnz	r3, 8004c3e <_svfiprintf_r+0x1b2>
 8004bf6:	9b03      	ldr	r3, [sp, #12]
 8004bf8:	3307      	adds	r3, #7
 8004bfa:	f023 0307 	bic.w	r3, r3, #7
 8004bfe:	3308      	adds	r3, #8
 8004c00:	9303      	str	r3, [sp, #12]
 8004c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c04:	4433      	add	r3, r6
 8004c06:	9309      	str	r3, [sp, #36]	; 0x24
 8004c08:	e767      	b.n	8004ada <_svfiprintf_r+0x4e>
 8004c0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c0e:	460c      	mov	r4, r1
 8004c10:	2001      	movs	r0, #1
 8004c12:	e7a5      	b.n	8004b60 <_svfiprintf_r+0xd4>
 8004c14:	2300      	movs	r3, #0
 8004c16:	3401      	adds	r4, #1
 8004c18:	9305      	str	r3, [sp, #20]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	f04f 0c0a 	mov.w	ip, #10
 8004c20:	4620      	mov	r0, r4
 8004c22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c26:	3a30      	subs	r2, #48	; 0x30
 8004c28:	2a09      	cmp	r2, #9
 8004c2a:	d903      	bls.n	8004c34 <_svfiprintf_r+0x1a8>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0c5      	beq.n	8004bbc <_svfiprintf_r+0x130>
 8004c30:	9105      	str	r1, [sp, #20]
 8004c32:	e7c3      	b.n	8004bbc <_svfiprintf_r+0x130>
 8004c34:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c38:	4604      	mov	r4, r0
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e7f0      	b.n	8004c20 <_svfiprintf_r+0x194>
 8004c3e:	ab03      	add	r3, sp, #12
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	462a      	mov	r2, r5
 8004c44:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <_svfiprintf_r+0x1f8>)
 8004c46:	a904      	add	r1, sp, #16
 8004c48:	4638      	mov	r0, r7
 8004c4a:	f3af 8000 	nop.w
 8004c4e:	1c42      	adds	r2, r0, #1
 8004c50:	4606      	mov	r6, r0
 8004c52:	d1d6      	bne.n	8004c02 <_svfiprintf_r+0x176>
 8004c54:	89ab      	ldrh	r3, [r5, #12]
 8004c56:	065b      	lsls	r3, r3, #25
 8004c58:	f53f af2c 	bmi.w	8004ab4 <_svfiprintf_r+0x28>
 8004c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c5e:	b01d      	add	sp, #116	; 0x74
 8004c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c64:	ab03      	add	r3, sp, #12
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	462a      	mov	r2, r5
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <_svfiprintf_r+0x1f8>)
 8004c6c:	a904      	add	r1, sp, #16
 8004c6e:	4638      	mov	r0, r7
 8004c70:	f000 f87a 	bl	8004d68 <_printf_i>
 8004c74:	e7eb      	b.n	8004c4e <_svfiprintf_r+0x1c2>
 8004c76:	bf00      	nop
 8004c78:	080053f8 	.word	0x080053f8
 8004c7c:	08005402 	.word	0x08005402
 8004c80:	00000000 	.word	0x00000000
 8004c84:	080049d5 	.word	0x080049d5
 8004c88:	080053fe 	.word	0x080053fe

08004c8c <_printf_common>:
 8004c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c90:	4616      	mov	r6, r2
 8004c92:	4699      	mov	r9, r3
 8004c94:	688a      	ldr	r2, [r1, #8]
 8004c96:	690b      	ldr	r3, [r1, #16]
 8004c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	bfb8      	it	lt
 8004ca0:	4613      	movlt	r3, r2
 8004ca2:	6033      	str	r3, [r6, #0]
 8004ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ca8:	4607      	mov	r7, r0
 8004caa:	460c      	mov	r4, r1
 8004cac:	b10a      	cbz	r2, 8004cb2 <_printf_common+0x26>
 8004cae:	3301      	adds	r3, #1
 8004cb0:	6033      	str	r3, [r6, #0]
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	0699      	lsls	r1, r3, #26
 8004cb6:	bf42      	ittt	mi
 8004cb8:	6833      	ldrmi	r3, [r6, #0]
 8004cba:	3302      	addmi	r3, #2
 8004cbc:	6033      	strmi	r3, [r6, #0]
 8004cbe:	6825      	ldr	r5, [r4, #0]
 8004cc0:	f015 0506 	ands.w	r5, r5, #6
 8004cc4:	d106      	bne.n	8004cd4 <_printf_common+0x48>
 8004cc6:	f104 0a19 	add.w	sl, r4, #25
 8004cca:	68e3      	ldr	r3, [r4, #12]
 8004ccc:	6832      	ldr	r2, [r6, #0]
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	42ab      	cmp	r3, r5
 8004cd2:	dc26      	bgt.n	8004d22 <_printf_common+0x96>
 8004cd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cd8:	1e13      	subs	r3, r2, #0
 8004cda:	6822      	ldr	r2, [r4, #0]
 8004cdc:	bf18      	it	ne
 8004cde:	2301      	movne	r3, #1
 8004ce0:	0692      	lsls	r2, r2, #26
 8004ce2:	d42b      	bmi.n	8004d3c <_printf_common+0xb0>
 8004ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ce8:	4649      	mov	r1, r9
 8004cea:	4638      	mov	r0, r7
 8004cec:	47c0      	blx	r8
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d01e      	beq.n	8004d30 <_printf_common+0xa4>
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	68e5      	ldr	r5, [r4, #12]
 8004cf6:	6832      	ldr	r2, [r6, #0]
 8004cf8:	f003 0306 	and.w	r3, r3, #6
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	bf08      	it	eq
 8004d00:	1aad      	subeq	r5, r5, r2
 8004d02:	68a3      	ldr	r3, [r4, #8]
 8004d04:	6922      	ldr	r2, [r4, #16]
 8004d06:	bf0c      	ite	eq
 8004d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d0c:	2500      	movne	r5, #0
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	bfc4      	itt	gt
 8004d12:	1a9b      	subgt	r3, r3, r2
 8004d14:	18ed      	addgt	r5, r5, r3
 8004d16:	2600      	movs	r6, #0
 8004d18:	341a      	adds	r4, #26
 8004d1a:	42b5      	cmp	r5, r6
 8004d1c:	d11a      	bne.n	8004d54 <_printf_common+0xc8>
 8004d1e:	2000      	movs	r0, #0
 8004d20:	e008      	b.n	8004d34 <_printf_common+0xa8>
 8004d22:	2301      	movs	r3, #1
 8004d24:	4652      	mov	r2, sl
 8004d26:	4649      	mov	r1, r9
 8004d28:	4638      	mov	r0, r7
 8004d2a:	47c0      	blx	r8
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d103      	bne.n	8004d38 <_printf_common+0xac>
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295
 8004d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d38:	3501      	adds	r5, #1
 8004d3a:	e7c6      	b.n	8004cca <_printf_common+0x3e>
 8004d3c:	18e1      	adds	r1, r4, r3
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	2030      	movs	r0, #48	; 0x30
 8004d42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d46:	4422      	add	r2, r4
 8004d48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d50:	3302      	adds	r3, #2
 8004d52:	e7c7      	b.n	8004ce4 <_printf_common+0x58>
 8004d54:	2301      	movs	r3, #1
 8004d56:	4622      	mov	r2, r4
 8004d58:	4649      	mov	r1, r9
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	47c0      	blx	r8
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d0e6      	beq.n	8004d30 <_printf_common+0xa4>
 8004d62:	3601      	adds	r6, #1
 8004d64:	e7d9      	b.n	8004d1a <_printf_common+0x8e>
	...

08004d68 <_printf_i>:
 8004d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d6c:	7e0f      	ldrb	r7, [r1, #24]
 8004d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d70:	2f78      	cmp	r7, #120	; 0x78
 8004d72:	4691      	mov	r9, r2
 8004d74:	4680      	mov	r8, r0
 8004d76:	460c      	mov	r4, r1
 8004d78:	469a      	mov	sl, r3
 8004d7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d7e:	d807      	bhi.n	8004d90 <_printf_i+0x28>
 8004d80:	2f62      	cmp	r7, #98	; 0x62
 8004d82:	d80a      	bhi.n	8004d9a <_printf_i+0x32>
 8004d84:	2f00      	cmp	r7, #0
 8004d86:	f000 80d8 	beq.w	8004f3a <_printf_i+0x1d2>
 8004d8a:	2f58      	cmp	r7, #88	; 0x58
 8004d8c:	f000 80a3 	beq.w	8004ed6 <_printf_i+0x16e>
 8004d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d98:	e03a      	b.n	8004e10 <_printf_i+0xa8>
 8004d9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d9e:	2b15      	cmp	r3, #21
 8004da0:	d8f6      	bhi.n	8004d90 <_printf_i+0x28>
 8004da2:	a101      	add	r1, pc, #4	; (adr r1, 8004da8 <_printf_i+0x40>)
 8004da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004da8:	08004e01 	.word	0x08004e01
 8004dac:	08004e15 	.word	0x08004e15
 8004db0:	08004d91 	.word	0x08004d91
 8004db4:	08004d91 	.word	0x08004d91
 8004db8:	08004d91 	.word	0x08004d91
 8004dbc:	08004d91 	.word	0x08004d91
 8004dc0:	08004e15 	.word	0x08004e15
 8004dc4:	08004d91 	.word	0x08004d91
 8004dc8:	08004d91 	.word	0x08004d91
 8004dcc:	08004d91 	.word	0x08004d91
 8004dd0:	08004d91 	.word	0x08004d91
 8004dd4:	08004f21 	.word	0x08004f21
 8004dd8:	08004e45 	.word	0x08004e45
 8004ddc:	08004f03 	.word	0x08004f03
 8004de0:	08004d91 	.word	0x08004d91
 8004de4:	08004d91 	.word	0x08004d91
 8004de8:	08004f43 	.word	0x08004f43
 8004dec:	08004d91 	.word	0x08004d91
 8004df0:	08004e45 	.word	0x08004e45
 8004df4:	08004d91 	.word	0x08004d91
 8004df8:	08004d91 	.word	0x08004d91
 8004dfc:	08004f0b 	.word	0x08004f0b
 8004e00:	682b      	ldr	r3, [r5, #0]
 8004e02:	1d1a      	adds	r2, r3, #4
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	602a      	str	r2, [r5, #0]
 8004e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0a3      	b.n	8004f5c <_printf_i+0x1f4>
 8004e14:	6820      	ldr	r0, [r4, #0]
 8004e16:	6829      	ldr	r1, [r5, #0]
 8004e18:	0606      	lsls	r6, r0, #24
 8004e1a:	f101 0304 	add.w	r3, r1, #4
 8004e1e:	d50a      	bpl.n	8004e36 <_printf_i+0xce>
 8004e20:	680e      	ldr	r6, [r1, #0]
 8004e22:	602b      	str	r3, [r5, #0]
 8004e24:	2e00      	cmp	r6, #0
 8004e26:	da03      	bge.n	8004e30 <_printf_i+0xc8>
 8004e28:	232d      	movs	r3, #45	; 0x2d
 8004e2a:	4276      	negs	r6, r6
 8004e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e30:	485e      	ldr	r0, [pc, #376]	; (8004fac <_printf_i+0x244>)
 8004e32:	230a      	movs	r3, #10
 8004e34:	e019      	b.n	8004e6a <_printf_i+0x102>
 8004e36:	680e      	ldr	r6, [r1, #0]
 8004e38:	602b      	str	r3, [r5, #0]
 8004e3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e3e:	bf18      	it	ne
 8004e40:	b236      	sxthne	r6, r6
 8004e42:	e7ef      	b.n	8004e24 <_printf_i+0xbc>
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	6820      	ldr	r0, [r4, #0]
 8004e48:	1d19      	adds	r1, r3, #4
 8004e4a:	6029      	str	r1, [r5, #0]
 8004e4c:	0601      	lsls	r1, r0, #24
 8004e4e:	d501      	bpl.n	8004e54 <_printf_i+0xec>
 8004e50:	681e      	ldr	r6, [r3, #0]
 8004e52:	e002      	b.n	8004e5a <_printf_i+0xf2>
 8004e54:	0646      	lsls	r6, r0, #25
 8004e56:	d5fb      	bpl.n	8004e50 <_printf_i+0xe8>
 8004e58:	881e      	ldrh	r6, [r3, #0]
 8004e5a:	4854      	ldr	r0, [pc, #336]	; (8004fac <_printf_i+0x244>)
 8004e5c:	2f6f      	cmp	r7, #111	; 0x6f
 8004e5e:	bf0c      	ite	eq
 8004e60:	2308      	moveq	r3, #8
 8004e62:	230a      	movne	r3, #10
 8004e64:	2100      	movs	r1, #0
 8004e66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e6a:	6865      	ldr	r5, [r4, #4]
 8004e6c:	60a5      	str	r5, [r4, #8]
 8004e6e:	2d00      	cmp	r5, #0
 8004e70:	bfa2      	ittt	ge
 8004e72:	6821      	ldrge	r1, [r4, #0]
 8004e74:	f021 0104 	bicge.w	r1, r1, #4
 8004e78:	6021      	strge	r1, [r4, #0]
 8004e7a:	b90e      	cbnz	r6, 8004e80 <_printf_i+0x118>
 8004e7c:	2d00      	cmp	r5, #0
 8004e7e:	d04d      	beq.n	8004f1c <_printf_i+0x1b4>
 8004e80:	4615      	mov	r5, r2
 8004e82:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e86:	fb03 6711 	mls	r7, r3, r1, r6
 8004e8a:	5dc7      	ldrb	r7, [r0, r7]
 8004e8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e90:	4637      	mov	r7, r6
 8004e92:	42bb      	cmp	r3, r7
 8004e94:	460e      	mov	r6, r1
 8004e96:	d9f4      	bls.n	8004e82 <_printf_i+0x11a>
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d10b      	bne.n	8004eb4 <_printf_i+0x14c>
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	07de      	lsls	r6, r3, #31
 8004ea0:	d508      	bpl.n	8004eb4 <_printf_i+0x14c>
 8004ea2:	6923      	ldr	r3, [r4, #16]
 8004ea4:	6861      	ldr	r1, [r4, #4]
 8004ea6:	4299      	cmp	r1, r3
 8004ea8:	bfde      	ittt	le
 8004eaa:	2330      	movle	r3, #48	; 0x30
 8004eac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004eb4:	1b52      	subs	r2, r2, r5
 8004eb6:	6122      	str	r2, [r4, #16]
 8004eb8:	f8cd a000 	str.w	sl, [sp]
 8004ebc:	464b      	mov	r3, r9
 8004ebe:	aa03      	add	r2, sp, #12
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	4640      	mov	r0, r8
 8004ec4:	f7ff fee2 	bl	8004c8c <_printf_common>
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d14c      	bne.n	8004f66 <_printf_i+0x1fe>
 8004ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed0:	b004      	add	sp, #16
 8004ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed6:	4835      	ldr	r0, [pc, #212]	; (8004fac <_printf_i+0x244>)
 8004ed8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004edc:	6829      	ldr	r1, [r5, #0]
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ee4:	6029      	str	r1, [r5, #0]
 8004ee6:	061d      	lsls	r5, r3, #24
 8004ee8:	d514      	bpl.n	8004f14 <_printf_i+0x1ac>
 8004eea:	07df      	lsls	r7, r3, #31
 8004eec:	bf44      	itt	mi
 8004eee:	f043 0320 	orrmi.w	r3, r3, #32
 8004ef2:	6023      	strmi	r3, [r4, #0]
 8004ef4:	b91e      	cbnz	r6, 8004efe <_printf_i+0x196>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	f023 0320 	bic.w	r3, r3, #32
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	2310      	movs	r3, #16
 8004f00:	e7b0      	b.n	8004e64 <_printf_i+0xfc>
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	f043 0320 	orr.w	r3, r3, #32
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	2378      	movs	r3, #120	; 0x78
 8004f0c:	4828      	ldr	r0, [pc, #160]	; (8004fb0 <_printf_i+0x248>)
 8004f0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f12:	e7e3      	b.n	8004edc <_printf_i+0x174>
 8004f14:	0659      	lsls	r1, r3, #25
 8004f16:	bf48      	it	mi
 8004f18:	b2b6      	uxthmi	r6, r6
 8004f1a:	e7e6      	b.n	8004eea <_printf_i+0x182>
 8004f1c:	4615      	mov	r5, r2
 8004f1e:	e7bb      	b.n	8004e98 <_printf_i+0x130>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	6826      	ldr	r6, [r4, #0]
 8004f24:	6961      	ldr	r1, [r4, #20]
 8004f26:	1d18      	adds	r0, r3, #4
 8004f28:	6028      	str	r0, [r5, #0]
 8004f2a:	0635      	lsls	r5, r6, #24
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	d501      	bpl.n	8004f34 <_printf_i+0x1cc>
 8004f30:	6019      	str	r1, [r3, #0]
 8004f32:	e002      	b.n	8004f3a <_printf_i+0x1d2>
 8004f34:	0670      	lsls	r0, r6, #25
 8004f36:	d5fb      	bpl.n	8004f30 <_printf_i+0x1c8>
 8004f38:	8019      	strh	r1, [r3, #0]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	6123      	str	r3, [r4, #16]
 8004f3e:	4615      	mov	r5, r2
 8004f40:	e7ba      	b.n	8004eb8 <_printf_i+0x150>
 8004f42:	682b      	ldr	r3, [r5, #0]
 8004f44:	1d1a      	adds	r2, r3, #4
 8004f46:	602a      	str	r2, [r5, #0]
 8004f48:	681d      	ldr	r5, [r3, #0]
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f7fb f956 	bl	8000200 <memchr>
 8004f54:	b108      	cbz	r0, 8004f5a <_printf_i+0x1f2>
 8004f56:	1b40      	subs	r0, r0, r5
 8004f58:	6060      	str	r0, [r4, #4]
 8004f5a:	6863      	ldr	r3, [r4, #4]
 8004f5c:	6123      	str	r3, [r4, #16]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f64:	e7a8      	b.n	8004eb8 <_printf_i+0x150>
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	462a      	mov	r2, r5
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	4640      	mov	r0, r8
 8004f6e:	47d0      	blx	sl
 8004f70:	3001      	adds	r0, #1
 8004f72:	d0ab      	beq.n	8004ecc <_printf_i+0x164>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	079b      	lsls	r3, r3, #30
 8004f78:	d413      	bmi.n	8004fa2 <_printf_i+0x23a>
 8004f7a:	68e0      	ldr	r0, [r4, #12]
 8004f7c:	9b03      	ldr	r3, [sp, #12]
 8004f7e:	4298      	cmp	r0, r3
 8004f80:	bfb8      	it	lt
 8004f82:	4618      	movlt	r0, r3
 8004f84:	e7a4      	b.n	8004ed0 <_printf_i+0x168>
 8004f86:	2301      	movs	r3, #1
 8004f88:	4632      	mov	r2, r6
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	4640      	mov	r0, r8
 8004f8e:	47d0      	blx	sl
 8004f90:	3001      	adds	r0, #1
 8004f92:	d09b      	beq.n	8004ecc <_printf_i+0x164>
 8004f94:	3501      	adds	r5, #1
 8004f96:	68e3      	ldr	r3, [r4, #12]
 8004f98:	9903      	ldr	r1, [sp, #12]
 8004f9a:	1a5b      	subs	r3, r3, r1
 8004f9c:	42ab      	cmp	r3, r5
 8004f9e:	dcf2      	bgt.n	8004f86 <_printf_i+0x21e>
 8004fa0:	e7eb      	b.n	8004f7a <_printf_i+0x212>
 8004fa2:	2500      	movs	r5, #0
 8004fa4:	f104 0619 	add.w	r6, r4, #25
 8004fa8:	e7f5      	b.n	8004f96 <_printf_i+0x22e>
 8004faa:	bf00      	nop
 8004fac:	08005409 	.word	0x08005409
 8004fb0:	0800541a 	.word	0x0800541a

08004fb4 <memcpy>:
 8004fb4:	440a      	add	r2, r1
 8004fb6:	4291      	cmp	r1, r2
 8004fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fbc:	d100      	bne.n	8004fc0 <memcpy+0xc>
 8004fbe:	4770      	bx	lr
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fca:	4291      	cmp	r1, r2
 8004fcc:	d1f9      	bne.n	8004fc2 <memcpy+0xe>
 8004fce:	bd10      	pop	{r4, pc}

08004fd0 <memmove>:
 8004fd0:	4288      	cmp	r0, r1
 8004fd2:	b510      	push	{r4, lr}
 8004fd4:	eb01 0402 	add.w	r4, r1, r2
 8004fd8:	d902      	bls.n	8004fe0 <memmove+0x10>
 8004fda:	4284      	cmp	r4, r0
 8004fdc:	4623      	mov	r3, r4
 8004fde:	d807      	bhi.n	8004ff0 <memmove+0x20>
 8004fe0:	1e43      	subs	r3, r0, #1
 8004fe2:	42a1      	cmp	r1, r4
 8004fe4:	d008      	beq.n	8004ff8 <memmove+0x28>
 8004fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fee:	e7f8      	b.n	8004fe2 <memmove+0x12>
 8004ff0:	4402      	add	r2, r0
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	428a      	cmp	r2, r1
 8004ff6:	d100      	bne.n	8004ffa <memmove+0x2a>
 8004ff8:	bd10      	pop	{r4, pc}
 8004ffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005002:	e7f7      	b.n	8004ff4 <memmove+0x24>

08005004 <_free_r>:
 8005004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005006:	2900      	cmp	r1, #0
 8005008:	d044      	beq.n	8005094 <_free_r+0x90>
 800500a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800500e:	9001      	str	r0, [sp, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f1a1 0404 	sub.w	r4, r1, #4
 8005016:	bfb8      	it	lt
 8005018:	18e4      	addlt	r4, r4, r3
 800501a:	f000 f913 	bl	8005244 <__malloc_lock>
 800501e:	4a1e      	ldr	r2, [pc, #120]	; (8005098 <_free_r+0x94>)
 8005020:	9801      	ldr	r0, [sp, #4]
 8005022:	6813      	ldr	r3, [r2, #0]
 8005024:	b933      	cbnz	r3, 8005034 <_free_r+0x30>
 8005026:	6063      	str	r3, [r4, #4]
 8005028:	6014      	str	r4, [r2, #0]
 800502a:	b003      	add	sp, #12
 800502c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005030:	f000 b90e 	b.w	8005250 <__malloc_unlock>
 8005034:	42a3      	cmp	r3, r4
 8005036:	d908      	bls.n	800504a <_free_r+0x46>
 8005038:	6825      	ldr	r5, [r4, #0]
 800503a:	1961      	adds	r1, r4, r5
 800503c:	428b      	cmp	r3, r1
 800503e:	bf01      	itttt	eq
 8005040:	6819      	ldreq	r1, [r3, #0]
 8005042:	685b      	ldreq	r3, [r3, #4]
 8005044:	1949      	addeq	r1, r1, r5
 8005046:	6021      	streq	r1, [r4, #0]
 8005048:	e7ed      	b.n	8005026 <_free_r+0x22>
 800504a:	461a      	mov	r2, r3
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	b10b      	cbz	r3, 8005054 <_free_r+0x50>
 8005050:	42a3      	cmp	r3, r4
 8005052:	d9fa      	bls.n	800504a <_free_r+0x46>
 8005054:	6811      	ldr	r1, [r2, #0]
 8005056:	1855      	adds	r5, r2, r1
 8005058:	42a5      	cmp	r5, r4
 800505a:	d10b      	bne.n	8005074 <_free_r+0x70>
 800505c:	6824      	ldr	r4, [r4, #0]
 800505e:	4421      	add	r1, r4
 8005060:	1854      	adds	r4, r2, r1
 8005062:	42a3      	cmp	r3, r4
 8005064:	6011      	str	r1, [r2, #0]
 8005066:	d1e0      	bne.n	800502a <_free_r+0x26>
 8005068:	681c      	ldr	r4, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	6053      	str	r3, [r2, #4]
 800506e:	4421      	add	r1, r4
 8005070:	6011      	str	r1, [r2, #0]
 8005072:	e7da      	b.n	800502a <_free_r+0x26>
 8005074:	d902      	bls.n	800507c <_free_r+0x78>
 8005076:	230c      	movs	r3, #12
 8005078:	6003      	str	r3, [r0, #0]
 800507a:	e7d6      	b.n	800502a <_free_r+0x26>
 800507c:	6825      	ldr	r5, [r4, #0]
 800507e:	1961      	adds	r1, r4, r5
 8005080:	428b      	cmp	r3, r1
 8005082:	bf04      	itt	eq
 8005084:	6819      	ldreq	r1, [r3, #0]
 8005086:	685b      	ldreq	r3, [r3, #4]
 8005088:	6063      	str	r3, [r4, #4]
 800508a:	bf04      	itt	eq
 800508c:	1949      	addeq	r1, r1, r5
 800508e:	6021      	streq	r1, [r4, #0]
 8005090:	6054      	str	r4, [r2, #4]
 8005092:	e7ca      	b.n	800502a <_free_r+0x26>
 8005094:	b003      	add	sp, #12
 8005096:	bd30      	pop	{r4, r5, pc}
 8005098:	20000204 	.word	0x20000204

0800509c <sbrk_aligned>:
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	4e0e      	ldr	r6, [pc, #56]	; (80050d8 <sbrk_aligned+0x3c>)
 80050a0:	460c      	mov	r4, r1
 80050a2:	6831      	ldr	r1, [r6, #0]
 80050a4:	4605      	mov	r5, r0
 80050a6:	b911      	cbnz	r1, 80050ae <sbrk_aligned+0x12>
 80050a8:	f000 f8bc 	bl	8005224 <_sbrk_r>
 80050ac:	6030      	str	r0, [r6, #0]
 80050ae:	4621      	mov	r1, r4
 80050b0:	4628      	mov	r0, r5
 80050b2:	f000 f8b7 	bl	8005224 <_sbrk_r>
 80050b6:	1c43      	adds	r3, r0, #1
 80050b8:	d00a      	beq.n	80050d0 <sbrk_aligned+0x34>
 80050ba:	1cc4      	adds	r4, r0, #3
 80050bc:	f024 0403 	bic.w	r4, r4, #3
 80050c0:	42a0      	cmp	r0, r4
 80050c2:	d007      	beq.n	80050d4 <sbrk_aligned+0x38>
 80050c4:	1a21      	subs	r1, r4, r0
 80050c6:	4628      	mov	r0, r5
 80050c8:	f000 f8ac 	bl	8005224 <_sbrk_r>
 80050cc:	3001      	adds	r0, #1
 80050ce:	d101      	bne.n	80050d4 <sbrk_aligned+0x38>
 80050d0:	f04f 34ff 	mov.w	r4, #4294967295
 80050d4:	4620      	mov	r0, r4
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
 80050d8:	20000208 	.word	0x20000208

080050dc <_malloc_r>:
 80050dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e0:	1ccd      	adds	r5, r1, #3
 80050e2:	f025 0503 	bic.w	r5, r5, #3
 80050e6:	3508      	adds	r5, #8
 80050e8:	2d0c      	cmp	r5, #12
 80050ea:	bf38      	it	cc
 80050ec:	250c      	movcc	r5, #12
 80050ee:	2d00      	cmp	r5, #0
 80050f0:	4607      	mov	r7, r0
 80050f2:	db01      	blt.n	80050f8 <_malloc_r+0x1c>
 80050f4:	42a9      	cmp	r1, r5
 80050f6:	d905      	bls.n	8005104 <_malloc_r+0x28>
 80050f8:	230c      	movs	r3, #12
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	2600      	movs	r6, #0
 80050fe:	4630      	mov	r0, r6
 8005100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005104:	4e2e      	ldr	r6, [pc, #184]	; (80051c0 <_malloc_r+0xe4>)
 8005106:	f000 f89d 	bl	8005244 <__malloc_lock>
 800510a:	6833      	ldr	r3, [r6, #0]
 800510c:	461c      	mov	r4, r3
 800510e:	bb34      	cbnz	r4, 800515e <_malloc_r+0x82>
 8005110:	4629      	mov	r1, r5
 8005112:	4638      	mov	r0, r7
 8005114:	f7ff ffc2 	bl	800509c <sbrk_aligned>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	4604      	mov	r4, r0
 800511c:	d14d      	bne.n	80051ba <_malloc_r+0xde>
 800511e:	6834      	ldr	r4, [r6, #0]
 8005120:	4626      	mov	r6, r4
 8005122:	2e00      	cmp	r6, #0
 8005124:	d140      	bne.n	80051a8 <_malloc_r+0xcc>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	4631      	mov	r1, r6
 800512a:	4638      	mov	r0, r7
 800512c:	eb04 0803 	add.w	r8, r4, r3
 8005130:	f000 f878 	bl	8005224 <_sbrk_r>
 8005134:	4580      	cmp	r8, r0
 8005136:	d13a      	bne.n	80051ae <_malloc_r+0xd2>
 8005138:	6821      	ldr	r1, [r4, #0]
 800513a:	3503      	adds	r5, #3
 800513c:	1a6d      	subs	r5, r5, r1
 800513e:	f025 0503 	bic.w	r5, r5, #3
 8005142:	3508      	adds	r5, #8
 8005144:	2d0c      	cmp	r5, #12
 8005146:	bf38      	it	cc
 8005148:	250c      	movcc	r5, #12
 800514a:	4629      	mov	r1, r5
 800514c:	4638      	mov	r0, r7
 800514e:	f7ff ffa5 	bl	800509c <sbrk_aligned>
 8005152:	3001      	adds	r0, #1
 8005154:	d02b      	beq.n	80051ae <_malloc_r+0xd2>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	442b      	add	r3, r5
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	e00e      	b.n	800517c <_malloc_r+0xa0>
 800515e:	6822      	ldr	r2, [r4, #0]
 8005160:	1b52      	subs	r2, r2, r5
 8005162:	d41e      	bmi.n	80051a2 <_malloc_r+0xc6>
 8005164:	2a0b      	cmp	r2, #11
 8005166:	d916      	bls.n	8005196 <_malloc_r+0xba>
 8005168:	1961      	adds	r1, r4, r5
 800516a:	42a3      	cmp	r3, r4
 800516c:	6025      	str	r5, [r4, #0]
 800516e:	bf18      	it	ne
 8005170:	6059      	strne	r1, [r3, #4]
 8005172:	6863      	ldr	r3, [r4, #4]
 8005174:	bf08      	it	eq
 8005176:	6031      	streq	r1, [r6, #0]
 8005178:	5162      	str	r2, [r4, r5]
 800517a:	604b      	str	r3, [r1, #4]
 800517c:	4638      	mov	r0, r7
 800517e:	f104 060b 	add.w	r6, r4, #11
 8005182:	f000 f865 	bl	8005250 <__malloc_unlock>
 8005186:	f026 0607 	bic.w	r6, r6, #7
 800518a:	1d23      	adds	r3, r4, #4
 800518c:	1af2      	subs	r2, r6, r3
 800518e:	d0b6      	beq.n	80050fe <_malloc_r+0x22>
 8005190:	1b9b      	subs	r3, r3, r6
 8005192:	50a3      	str	r3, [r4, r2]
 8005194:	e7b3      	b.n	80050fe <_malloc_r+0x22>
 8005196:	6862      	ldr	r2, [r4, #4]
 8005198:	42a3      	cmp	r3, r4
 800519a:	bf0c      	ite	eq
 800519c:	6032      	streq	r2, [r6, #0]
 800519e:	605a      	strne	r2, [r3, #4]
 80051a0:	e7ec      	b.n	800517c <_malloc_r+0xa0>
 80051a2:	4623      	mov	r3, r4
 80051a4:	6864      	ldr	r4, [r4, #4]
 80051a6:	e7b2      	b.n	800510e <_malloc_r+0x32>
 80051a8:	4634      	mov	r4, r6
 80051aa:	6876      	ldr	r6, [r6, #4]
 80051ac:	e7b9      	b.n	8005122 <_malloc_r+0x46>
 80051ae:	230c      	movs	r3, #12
 80051b0:	603b      	str	r3, [r7, #0]
 80051b2:	4638      	mov	r0, r7
 80051b4:	f000 f84c 	bl	8005250 <__malloc_unlock>
 80051b8:	e7a1      	b.n	80050fe <_malloc_r+0x22>
 80051ba:	6025      	str	r5, [r4, #0]
 80051bc:	e7de      	b.n	800517c <_malloc_r+0xa0>
 80051be:	bf00      	nop
 80051c0:	20000204 	.word	0x20000204

080051c4 <_realloc_r>:
 80051c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c8:	4680      	mov	r8, r0
 80051ca:	4614      	mov	r4, r2
 80051cc:	460e      	mov	r6, r1
 80051ce:	b921      	cbnz	r1, 80051da <_realloc_r+0x16>
 80051d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051d4:	4611      	mov	r1, r2
 80051d6:	f7ff bf81 	b.w	80050dc <_malloc_r>
 80051da:	b92a      	cbnz	r2, 80051e8 <_realloc_r+0x24>
 80051dc:	f7ff ff12 	bl	8005004 <_free_r>
 80051e0:	4625      	mov	r5, r4
 80051e2:	4628      	mov	r0, r5
 80051e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051e8:	f000 f838 	bl	800525c <_malloc_usable_size_r>
 80051ec:	4284      	cmp	r4, r0
 80051ee:	4607      	mov	r7, r0
 80051f0:	d802      	bhi.n	80051f8 <_realloc_r+0x34>
 80051f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051f6:	d812      	bhi.n	800521e <_realloc_r+0x5a>
 80051f8:	4621      	mov	r1, r4
 80051fa:	4640      	mov	r0, r8
 80051fc:	f7ff ff6e 	bl	80050dc <_malloc_r>
 8005200:	4605      	mov	r5, r0
 8005202:	2800      	cmp	r0, #0
 8005204:	d0ed      	beq.n	80051e2 <_realloc_r+0x1e>
 8005206:	42bc      	cmp	r4, r7
 8005208:	4622      	mov	r2, r4
 800520a:	4631      	mov	r1, r6
 800520c:	bf28      	it	cs
 800520e:	463a      	movcs	r2, r7
 8005210:	f7ff fed0 	bl	8004fb4 <memcpy>
 8005214:	4631      	mov	r1, r6
 8005216:	4640      	mov	r0, r8
 8005218:	f7ff fef4 	bl	8005004 <_free_r>
 800521c:	e7e1      	b.n	80051e2 <_realloc_r+0x1e>
 800521e:	4635      	mov	r5, r6
 8005220:	e7df      	b.n	80051e2 <_realloc_r+0x1e>
	...

08005224 <_sbrk_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4d06      	ldr	r5, [pc, #24]	; (8005240 <_sbrk_r+0x1c>)
 8005228:	2300      	movs	r3, #0
 800522a:	4604      	mov	r4, r0
 800522c:	4608      	mov	r0, r1
 800522e:	602b      	str	r3, [r5, #0]
 8005230:	f7fb fed2 	bl	8000fd8 <_sbrk>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	d102      	bne.n	800523e <_sbrk_r+0x1a>
 8005238:	682b      	ldr	r3, [r5, #0]
 800523a:	b103      	cbz	r3, 800523e <_sbrk_r+0x1a>
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	2000020c 	.word	0x2000020c

08005244 <__malloc_lock>:
 8005244:	4801      	ldr	r0, [pc, #4]	; (800524c <__malloc_lock+0x8>)
 8005246:	f000 b811 	b.w	800526c <__retarget_lock_acquire_recursive>
 800524a:	bf00      	nop
 800524c:	20000210 	.word	0x20000210

08005250 <__malloc_unlock>:
 8005250:	4801      	ldr	r0, [pc, #4]	; (8005258 <__malloc_unlock+0x8>)
 8005252:	f000 b80c 	b.w	800526e <__retarget_lock_release_recursive>
 8005256:	bf00      	nop
 8005258:	20000210 	.word	0x20000210

0800525c <_malloc_usable_size_r>:
 800525c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005260:	1f18      	subs	r0, r3, #4
 8005262:	2b00      	cmp	r3, #0
 8005264:	bfbc      	itt	lt
 8005266:	580b      	ldrlt	r3, [r1, r0]
 8005268:	18c0      	addlt	r0, r0, r3
 800526a:	4770      	bx	lr

0800526c <__retarget_lock_acquire_recursive>:
 800526c:	4770      	bx	lr

0800526e <__retarget_lock_release_recursive>:
 800526e:	4770      	bx	lr

08005270 <_init>:
 8005270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005272:	bf00      	nop
 8005274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005276:	bc08      	pop	{r3}
 8005278:	469e      	mov	lr, r3
 800527a:	4770      	bx	lr

0800527c <_fini>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	bf00      	nop
 8005280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005282:	bc08      	pop	{r3}
 8005284:	469e      	mov	lr, r3
 8005286:	4770      	bx	lr
