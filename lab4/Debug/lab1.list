
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08006460  08006460  00016460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006680  08006680  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006680  08006680  00016680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006688  08006688  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006688  08006688  00016688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800668c  0800668c  0001668c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000001fc  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000284  20000284  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b83  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c01  00000000  00000000  00033c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00036840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f70  00000000  00000000  000378e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024da1  00000000  00000000  00038850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015eed  00000000  00000000  0005d5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daa4a  00000000  00000000  000734de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014df28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004888  00000000  00000000  0014df78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006448 	.word	0x08006448

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08006448 	.word	0x08006448

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <is_button_clicked>:

static uint32_t prevClick = 0;
static GPIO_PinState prevState = GPIO_PIN_SET;

uint8_t is_button_clicked(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	uint32_t currentTick = HAL_GetTick();
 80005aa:	f001 f9b1 	bl	8001910 <HAL_GetTick>
 80005ae:	6078      	str	r0, [r7, #4]

	if (currentTick - prevClick < BUTTON_CLICK_DELAY) {
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <is_button_clicked+0x58>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	2bc7      	cmp	r3, #199	; 0xc7
 80005ba:	d801      	bhi.n	80005c0 <is_button_clicked+0x1c>
		return 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	e019      	b.n	80005f4 <is_button_clicked+0x50>
	}

	GPIO_PinState currentState = HAL_GPIO_ReadPin(GPIOC, BUTTON_PIN);
 80005c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c4:	480e      	ldr	r0, [pc, #56]	; (8000600 <is_button_clicked+0x5c>)
 80005c6:	f001 fd23 	bl	8002010 <HAL_GPIO_ReadPin>
 80005ca:	4603      	mov	r3, r0
 80005cc:	70fb      	strb	r3, [r7, #3]

	if (currentState == GPIO_PIN_RESET && prevState == GPIO_PIN_SET)
 80005ce:	78fb      	ldrb	r3, [r7, #3]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d108      	bne.n	80005e6 <is_button_clicked+0x42>
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <is_button_clicked+0x60>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d104      	bne.n	80005e6 <is_button_clicked+0x42>
	{
		prevClick = currentTick;
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <is_button_clicked+0x58>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6013      	str	r3, [r2, #0]
		prevState == GPIO_PIN_RESET;
		return 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	e006      	b.n	80005f4 <is_button_clicked+0x50>
	}

	if (currentState == GPIO_PIN_SET) {
 80005e6:	78fb      	ldrb	r3, [r7, #3]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d102      	bne.n	80005f2 <is_button_clicked+0x4e>
		prevClick = currentTick;
 80005ec:	4a03      	ldr	r2, [pc, #12]	; (80005fc <is_button_clicked+0x58>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6013      	str	r3, [r2, #0]
		prevState == GPIO_PIN_SET;
	}

	return 0;
 80005f2:	2300      	movs	r3, #0

}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200000a4 	.word	0x200000a4
 8000600:	40020800 	.word	0x40020800
 8000604:	20000000 	.word	0x20000000

08000608 <transmit_uart_blocking>:

static uint8_t received_data;
static uint8_t* rn = (uint8_t*) "\n\r";
static uint8_t received_buffer[2] = "\0\0";

void transmit_uart_blocking(const uint8_t *buf, size_t size) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart6, buf, size, TIMEOUT_DURATION);
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	b29a      	uxth	r2, r3
 8000616:	2364      	movs	r3, #100	; 0x64
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <transmit_uart_blocking+0x20>)
 800061c:	f004 fa7d 	bl	8004b1a <HAL_UART_Transmit>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200001c0 	.word	0x200001c0

0800062c <transmit_uart_interrupt>:

static uint8_t received_data;
static uint8_t* rn = (uint8_t*) "\n\r";
static uint8_t received_buffer[2] = "\0\0";

void transmit_uart_interrupt(const uint8_t *buf, size_t size, struct TransmitionState* state) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
	if (state->is_active) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d011      	beq.n	8000664 <transmit_uart_interrupt+0x38>
		for (size_t i = 0; i < size / sizeof(uint8_t); i++) {
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	e009      	b.n	800065a <transmit_uart_interrupt+0x2e>
			insert_in_queue(buf[i]);
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f001 f85a 	bl	8001708 <insert_in_queue>
		for (size_t i = 0; i < size / sizeof(uint8_t); i++) {
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	3301      	adds	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	429a      	cmp	r2, r3
 8000660:	d3f1      	bcc.n	8000646 <transmit_uart_interrupt+0x1a>
		}
	} else {
		HAL_UART_Transmit_IT(&huart6, buf, size);
		state->is_active = 1;
	}
}
 8000662:	e009      	b.n	8000678 <transmit_uart_interrupt+0x4c>
		HAL_UART_Transmit_IT(&huart6, buf, size);
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	b29b      	uxth	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	68f9      	ldr	r1, [r7, #12]
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <transmit_uart_interrupt+0x54>)
 800066e:	f004 fae6 	bl	8004c3e <HAL_UART_Transmit_IT>
		state->is_active = 1;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]
}
 8000678:	bf00      	nop
 800067a:	3718      	adds	r7, #24
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200001c0 	.word	0x200001c0

08000684 <receive_uart_interrupt_cb>:

void receive_uart_interrupt() {
	HAL_UART_Receive_IT(&huart6, &received_data, sizeof(uint8_t));
}

void receive_uart_interrupt_cb(struct ReadBuffer* buffer, struct TransmitionState* state) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	received_buffer[0] = received_data;
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <receive_uart_interrupt_cb+0x40>)
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <receive_uart_interrupt_cb+0x44>)
 8000694:	701a      	strb	r2, [r3, #0]
	buffer->content = received_buffer;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <receive_uart_interrupt_cb+0x44>)
 800069a:	601a      	str	r2, [r3, #0]
	if (received_data == '\r') {
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <receive_uart_interrupt_cb+0x40>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b0d      	cmp	r3, #13
 80006a2:	d103      	bne.n	80006ac <receive_uart_interrupt_cb+0x28>
		buffer->content = rn;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <receive_uart_interrupt_cb+0x48>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	601a      	str	r2, [r3, #0]
	}
	transmit_uart_interrupt(buffer->content, sizeof(uint16_t), state);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	683a      	ldr	r2, [r7, #0]
 80006b2:	2102      	movs	r1, #2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ffb9 	bl	800062c <transmit_uart_interrupt>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200000a8 	.word	0x200000a8
 80006c8:	200000ac 	.word	0x200000ac
 80006cc:	20000004 	.word	0x20000004

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b087      	sub	sp, #28
 80006d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <MX_GPIO_Init+0xa0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a24      	ldr	r2, [pc, #144]	; (8000770 <MX_GPIO_Init+0xa0>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_GPIO_Init+0xa0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_GPIO_Init+0xa0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <MX_GPIO_Init+0xa0>)
 80006fc:	f043 0310 	orr.w	r3, r3, #16
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_GPIO_Init+0xa0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0310 	and.w	r3, r3, #16
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_GPIO_Init+0xa0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a16      	ldr	r2, [pc, #88]	; (8000770 <MX_GPIO_Init+0xa0>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_GPIO_Init+0xa0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_GPIO_Init+0xa0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <MX_GPIO_Init+0xa0>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_GPIO_Init+0xa0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_GPIO_Init+0xa0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a08      	ldr	r2, [pc, #32]	; (8000770 <MX_GPIO_Init+0xa0>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_GPIO_Init+0xa0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

}
 8000762:	bf00      	nop
 8000764:	371c      	adds	r7, #28
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_I2C1_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_I2C1_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000780:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <MX_I2C1_Init+0x7c>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_I2C1_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007b2:	f001 fc45 	bl	8002040 <HAL_I2C_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007bc:	f000 fd26 	bl	800120c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007c4:	f002 fbfb 	bl	8002fbe <HAL_I2CEx_ConfigAnalogFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007ce:	f000 fd1d 	bl	800120c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d2:	2100      	movs	r1, #0
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007d6:	f002 fc2e 	bl	8003036 <HAL_I2CEx_ConfigDigitalFilter>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007e0:	f000 fd14 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000b0 	.word	0x200000b0
 80007ec:	40005400 	.word	0x40005400
 80007f0:	00061a80 	.word	0x00061a80

080007f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a19      	ldr	r2, [pc, #100]	; (8000878 <HAL_I2C_MspInit+0x84>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d12c      	bne.n	8000870 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_I2C_MspInit+0x88>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a17      	ldr	r2, [pc, #92]	; (800087c <HAL_I2C_MspInit+0x88>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_I2C_MspInit+0x88>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000832:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000838:	2312      	movs	r3, #18
 800083a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000844:	2304      	movs	r3, #4
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	480c      	ldr	r0, [pc, #48]	; (8000880 <HAL_I2C_MspInit+0x8c>)
 8000850:	f001 fa32 	bl	8001cb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_I2C_MspInit+0x88>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <HAL_I2C_MspInit+0x88>)
 800085e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000862:	6413      	str	r3, [r2, #64]	; 0x40
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_I2C_MspInit+0x88>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40005400 	.word	0x40005400
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400

08000884 <calculate_note_freq>:

struct ReadBuffer read_buffer = {
	.content = (uint8_t*) "\0"
};

float calculate_note_freq(uint8_t note, uint8_t octave) {
 8000884:	b480      	push	{r7}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	460a      	mov	r2, r1
 800088e:	71fb      	strb	r3, [r7, #7]
 8000890:	4613      	mov	r3, r2
 8000892:	71bb      	strb	r3, [r7, #6]
	float factor = 1.0 / 16;
 8000894:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8000898:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < octave; i++) {
 800089a:	2301      	movs	r3, #1
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	e008      	b.n	80008b2 <calculate_note_freq+0x2e>
		factor *= 2;
 80008a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80008a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008a8:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 1; i < octave; i++) {
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	3301      	adds	r3, #1
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	dbf2      	blt.n	80008a0 <calculate_note_freq+0x1c>
	}
	float note_freq = 0;
 80008ba:	f04f 0300 	mov.w	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
	if (note == 1) note_freq = NOTE_DO;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d102      	bne.n	80008cc <calculate_note_freq+0x48>
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <calculate_note_freq+0xa8>)
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	e022      	b.n	8000912 <calculate_note_freq+0x8e>
	else if (note == 2) note_freq = NOTE_RE;
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d102      	bne.n	80008d8 <calculate_note_freq+0x54>
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <calculate_note_freq+0xac>)
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e01c      	b.n	8000912 <calculate_note_freq+0x8e>
	else if (note == 3) note_freq = NOTE_MI;
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b03      	cmp	r3, #3
 80008dc:	d102      	bne.n	80008e4 <calculate_note_freq+0x60>
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <calculate_note_freq+0xb0>)
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	e016      	b.n	8000912 <calculate_note_freq+0x8e>
	else if (note == 4) note_freq = NOTE_FA;
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d102      	bne.n	80008f0 <calculate_note_freq+0x6c>
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <calculate_note_freq+0xb4>)
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	e010      	b.n	8000912 <calculate_note_freq+0x8e>
	else if (note == 5) note_freq = NOTE_SO;
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b05      	cmp	r3, #5
 80008f4:	d102      	bne.n	80008fc <calculate_note_freq+0x78>
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <calculate_note_freq+0xb8>)
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	e00a      	b.n	8000912 <calculate_note_freq+0x8e>
	else if (note == 6) note_freq = NOTE_LA;
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2b06      	cmp	r3, #6
 8000900:	d102      	bne.n	8000908 <calculate_note_freq+0x84>
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <calculate_note_freq+0xbc>)
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	e004      	b.n	8000912 <calculate_note_freq+0x8e>
	else if (note == 7) note_freq = NOTE_SI;
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b07      	cmp	r3, #7
 800090c:	d101      	bne.n	8000912 <calculate_note_freq+0x8e>
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <calculate_note_freq+0xc0>)
 8000910:	60fb      	str	r3, [r7, #12]
	return factor * note_freq;
 8000912:	ed97 7a05 	vldr	s14, [r7, #20]
 8000916:	edd7 7a03 	vldr	s15, [r7, #12]
 800091a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800091e:	eeb0 0a67 	vmov.f32	s0, s15
 8000922:	371c      	adds	r7, #28
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	4382d0a4 	.word	0x4382d0a4
 8000930:	4392d5c3 	.word	0x4392d5c3
 8000934:	43a4d0a4 	.word	0x43a4d0a4
 8000938:	43ae9d71 	.word	0x43ae9d71
 800093c:	43c40000 	.word	0x43c40000
 8000940:	43dc0000 	.word	0x43dc0000
 8000944:	43f6f0a4 	.word	0x43f6f0a4

08000948 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 800094e:	af00      	add	r7, sp, #0
 8000950:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000954:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8000958:	6018      	str	r0, [r3, #0]
  uint8_t temp_buffer[1000];
  int string_length = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  while (!is_queue_empty()) {
 8000960:	e00d      	b.n	800097e <HAL_UART_TxCpltCallback+0x36>
	  temp_buffer[string_length++] = take_element_from_queue();
 8000962:	f8d7 43f4 	ldr.w	r4, [r7, #1012]	; 0x3f4
 8000966:	1c63      	adds	r3, r4, #1
 8000968:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 800096c:	f000 fefe 	bl	800176c <take_element_from_queue>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000978:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800097c:	551a      	strb	r2, [r3, r4]
  while (!is_queue_empty()) {
 800097e:	f000 ff27 	bl	80017d0 <is_queue_empty>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0ec      	beq.n	8000962 <HAL_UART_TxCpltCallback+0x1a>
  }
  if (string_length > 0) {
 8000988:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800098c:	2b00      	cmp	r3, #0
 800098e:	dd09      	ble.n	80009a4 <HAL_UART_TxCpltCallback+0x5c>
	  HAL_UART_Transmit_IT(&huart6, temp_buffer, string_length);
 8000990:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8000994:	b29a      	uxth	r2, r3
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <HAL_UART_TxCpltCallback+0x6c>)
 800099e:	f004 f94e 	bl	8004c3e <HAL_UART_Transmit_IT>
  } else {
	  irq_state.is_active = 0;
  }
}
 80009a2:	e002      	b.n	80009aa <HAL_UART_TxCpltCallback+0x62>
	  irq_state.is_active = 0;
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <HAL_UART_TxCpltCallback+0x70>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
}
 80009aa:	bf00      	nop
 80009ac:	f507 777f 	add.w	r7, r7, #1020	; 0x3fc
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd90      	pop	{r4, r7, pc}
 80009b4:	200001c0 	.word	0x200001c0
 80009b8:	20000104 	.word	0x20000104

080009bc <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	receive_uart_interrupt_cb(&read_buffer, &irq_state);
 80009c4:	4903      	ldr	r1, [pc, #12]	; (80009d4 <HAL_UART_RxCpltCallback+0x18>)
 80009c6:	4804      	ldr	r0, [pc, #16]	; (80009d8 <HAL_UART_RxCpltCallback+0x1c>)
 80009c8:	f7ff fe5c 	bl	8000684 <receive_uart_interrupt_cb>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000104 	.word	0x20000104
 80009d8:	20000008 	.word	0x20000008

080009dc <print>:
/*
 * set interrupts on или set interrupts off – включить или выключить прерывания.
 */
uint8_t interrupts_mode = 1;

void print(char* content) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	size_t length = strlen(content);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff fc03 	bl	80001f0 <strlen>
 80009ea:	60f8      	str	r0, [r7, #12]
	if (interrupts_mode) {
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <print+0x34>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d005      	beq.n	8000a00 <print+0x24>
		transmit_uart_interrupt((uint8_t *) content, length, &irq_state);
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <print+0x38>)
 80009f6:	68f9      	ldr	r1, [r7, #12]
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fe17 	bl	800062c <transmit_uart_interrupt>
	} else {
		transmit_uart_blocking((uint8_t *) content, length);
	}
}
 80009fe:	e003      	b.n	8000a08 <print+0x2c>
		transmit_uart_blocking((uint8_t *) content, length);
 8000a00:	68f9      	ldr	r1, [r7, #12]
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff fe00 	bl	8000608 <transmit_uart_blocking>
}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000000c 	.word	0x2000000c
 8000a14:	20000104 	.word	0x20000104

08000a18 <play_note>:
static uint32_t playtime = 1000;
static uint32_t notes_played_ms = 0;
static uint8_t notes_count = 1;


void play_note() {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

	if (note == 0 || octave == 0) {
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <play_note+0x78>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d003      	beq.n	8000a2c <play_note+0x14>
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <play_note+0x7c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d104      	bne.n	8000a36 <play_note+0x1e>
		htim1.Instance->CCR1 = 0;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <play_note+0x80>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2200      	movs	r2, #0
 8000a32:	635a      	str	r2, [r3, #52]	; 0x34
 8000a34:	e029      	b.n	8000a8a <play_note+0x72>
	} else {
		htim1.Instance->ARR = 120 * 1000 * 1000 / (calculate_note_freq(note, octave) * htim1.Instance->PSC) - 1;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <play_note+0x78>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <play_note+0x7c>)
 8000a3c:	7812      	ldrb	r2, [r2, #0]
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff1f 	bl	8000884 <calculate_note_freq>
 8000a46:	eeb0 7a40 	vmov.f32	s14, s0
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <play_note+0x80>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a50:	ee07 3a90 	vmov	s15, r3
 8000a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a5c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000a9c <play_note+0x84>
 8000a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <play_note+0x80>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a74:	ee17 2a90 	vmov	r2, s15
 8000a78:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1.Instance->CCR1 = htim1.Instance->ARR >> 1;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <play_note+0x80>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <play_note+0x80>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	0852      	lsrs	r2, r2, #1
 8000a86:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000000d 	.word	0x2000000d
 8000a94:	2000000e 	.word	0x2000000e
 8000a98:	20000130 	.word	0x20000130
 8000a9c:	4ce4e1c0 	.word	0x4ce4e1c0

08000aa0 <change_note>:

void change_note(uint8_t new_note) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
	note = new_note;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <change_note+0x1c>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	7013      	strb	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	2000000d 	.word	0x2000000d

08000ac0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d134      	bne.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x7c>
		notes_played_ms += htim->Instance->PSC + 1;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad8:	1c5a      	adds	r2, r3, #1
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ae2:	6013      	str	r3, [r2, #0]

		if (notes_count == 1) {
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d109      	bne.n	8000b00 <HAL_TIM_PeriodElapsedCallback+0x40>
			if (notes_played_ms > playtime) {
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d91f      	bls.n	8000b38 <HAL_TIM_PeriodElapsedCallback+0x78>
				change_note(0);
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff ffd1 	bl	8000aa0 <change_note>
 8000afe:	e01b      	b.n	8000b38 <HAL_TIM_PeriodElapsedCallback+0x78>
			}
		} else if (notes_count == 7) {
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b07      	cmp	r3, #7
 8000b06:	d117      	bne.n	8000b38 <HAL_TIM_PeriodElapsedCallback+0x78>
			if (notes_played_ms / playtime >= 7) {
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b14:	2b06      	cmp	r3, #6
 8000b16:	d903      	bls.n	8000b20 <HAL_TIM_PeriodElapsedCallback+0x60>
				change_note(0);
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f7ff ffc1 	bl	8000aa0 <change_note>
 8000b1e:	e00b      	b.n	8000b38 <HAL_TIM_PeriodElapsedCallback+0x78>
			} else {
				change_note(1 + notes_played_ms / playtime);
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ffb4 	bl	8000aa0 <change_note>
			}
		}
		play_note();
 8000b38:	f7ff ff6e 	bl	8000a18 <play_note>
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40001000 	.word	0x40001000
 8000b48:	20000108 	.word	0x20000108
 8000b4c:	20000014 	.word	0x20000014
 8000b50:	20000010 	.word	0x20000010

08000b54 <increase_octave>:

void increase_octave() {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b09a      	sub	sp, #104	; 0x68
 8000b58:	af00      	add	r7, sp, #0
	print("\n");
 8000b5a:	4810      	ldr	r0, [pc, #64]	; (8000b9c <increase_octave+0x48>)
 8000b5c:	f7ff ff3e 	bl	80009dc <print>
	if (octave < 9) {
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <increase_octave+0x4c>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	d812      	bhi.n	8000b8e <increase_octave+0x3a>
		octave += 1;
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <increase_octave+0x4c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <increase_octave+0x4c>)
 8000b72:	701a      	strb	r2, [r3, #0]
		char sprintf_buffer[100];
		sprintf(sprintf_buffer, "Octave number increased to %d.\n", octave);
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <increase_octave+0x4c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4909      	ldr	r1, [pc, #36]	; (8000ba4 <increase_octave+0x50>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f004 fff4 	bl	8005b6c <siprintf>
		print(sprintf_buffer);
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff28 	bl	80009dc <print>
	} else {
		print("Octave number cannot be greater than 9.\n");
	}
}
 8000b8c:	e002      	b.n	8000b94 <increase_octave+0x40>
		print("Octave number cannot be greater than 9.\n");
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <increase_octave+0x54>)
 8000b90:	f7ff ff24 	bl	80009dc <print>
}
 8000b94:	bf00      	nop
 8000b96:	3768      	adds	r7, #104	; 0x68
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	08006468 	.word	0x08006468
 8000ba0:	2000000e 	.word	0x2000000e
 8000ba4:	0800646c 	.word	0x0800646c
 8000ba8:	0800648c 	.word	0x0800648c

08000bac <decrease_octave>:

void decrease_octave() {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b09a      	sub	sp, #104	; 0x68
 8000bb0:	af00      	add	r7, sp, #0
	print("\n");
 8000bb2:	4810      	ldr	r0, [pc, #64]	; (8000bf4 <decrease_octave+0x48>)
 8000bb4:	f7ff ff12 	bl	80009dc <print>
	if (octave > 1) {
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <decrease_octave+0x4c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d912      	bls.n	8000be6 <decrease_octave+0x3a>
		octave -= 1;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <decrease_octave+0x4c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <decrease_octave+0x4c>)
 8000bca:	701a      	strb	r2, [r3, #0]
		char sprintf_buffer[100];
		sprintf(sprintf_buffer, "Octave number decreased to %d.\n", octave);
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <decrease_octave+0x4c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4909      	ldr	r1, [pc, #36]	; (8000bfc <decrease_octave+0x50>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f004 ffc8 	bl	8005b6c <siprintf>
		print(sprintf_buffer);
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fefc 	bl	80009dc <print>
	} else {
		print("Octave number cannot be less than 1.\n");
	}
}
 8000be4:	e002      	b.n	8000bec <decrease_octave+0x40>
		print("Octave number cannot be less than 1.\n");
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <decrease_octave+0x54>)
 8000be8:	f7ff fef8 	bl	80009dc <print>
}
 8000bec:	bf00      	nop
 8000bee:	3768      	adds	r7, #104	; 0x68
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	08006468 	.word	0x08006468
 8000bf8:	2000000e 	.word	0x2000000e
 8000bfc:	080064b8 	.word	0x080064b8
 8000c00:	080064d8 	.word	0x080064d8

08000c04 <increase_playtime>:

void increase_playtime() {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b09a      	sub	sp, #104	; 0x68
 8000c08:	af00      	add	r7, sp, #0
	print("\n");
 8000c0a:	4813      	ldr	r0, [pc, #76]	; (8000c58 <increase_playtime+0x54>)
 8000c0c:	f7ff fee6 	bl	80009dc <print>
	char sprintf_buffer[100];
	if (playtime < MAX_TIME) {
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <increase_playtime+0x58>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d80d      	bhi.n	8000c38 <increase_playtime+0x34>
		playtime += 100;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <increase_playtime+0x58>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3364      	adds	r3, #100	; 0x64
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <increase_playtime+0x58>)
 8000c24:	6013      	str	r3, [r2, #0]
		sprintf(sprintf_buffer, "Playback time increased to %d ms.\n", (int)playtime);
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <increase_playtime+0x58>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	490c      	ldr	r1, [pc, #48]	; (8000c60 <increase_playtime+0x5c>)
 8000c30:	4618      	mov	r0, r3
 8000c32:	f004 ff9b 	bl	8005b6c <siprintf>
 8000c36:	e006      	b.n	8000c46 <increase_playtime+0x42>
	} else {
		sprintf(sprintf_buffer, "Playback time cannot exceed %d ms.\n", MAX_TIME);
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c3e:	4909      	ldr	r1, [pc, #36]	; (8000c64 <increase_playtime+0x60>)
 8000c40:	4618      	mov	r0, r3
 8000c42:	f004 ff93 	bl	8005b6c <siprintf>
	}
	print(sprintf_buffer);
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fec7 	bl	80009dc <print>
}
 8000c4e:	bf00      	nop
 8000c50:	3768      	adds	r7, #104	; 0x68
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	08006468 	.word	0x08006468
 8000c5c:	20000010 	.word	0x20000010
 8000c60:	08006500 	.word	0x08006500
 8000c64:	08006524 	.word	0x08006524

08000c68 <decrease_playtime>:

void decrease_playtime() {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b09a      	sub	sp, #104	; 0x68
 8000c6c:	af00      	add	r7, sp, #0
	print("\n");
 8000c6e:	4811      	ldr	r0, [pc, #68]	; (8000cb4 <decrease_playtime+0x4c>)
 8000c70:	f7ff feb4 	bl	80009dc <print>
	char sprintf_buffer[100];
		if (playtime > MIN_TIME) {
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <decrease_playtime+0x50>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b64      	cmp	r3, #100	; 0x64
 8000c7a:	d90d      	bls.n	8000c98 <decrease_playtime+0x30>
			playtime -= 100;
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <decrease_playtime+0x50>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	3b64      	subs	r3, #100	; 0x64
 8000c82:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <decrease_playtime+0x50>)
 8000c84:	6013      	str	r3, [r2, #0]
			sprintf(sprintf_buffer, "Playback time decreased to %d ms.\n", (int)playtime);
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <decrease_playtime+0x50>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	490b      	ldr	r1, [pc, #44]	; (8000cbc <decrease_playtime+0x54>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	f004 ff6b 	bl	8005b6c <siprintf>
 8000c96:	e005      	b.n	8000ca4 <decrease_playtime+0x3c>
		} else {
			sprintf(sprintf_buffer, "Playback time cannot be less than %d ms.\n", MIN_TIME);
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2264      	movs	r2, #100	; 0x64
 8000c9c:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <decrease_playtime+0x58>)
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f004 ff64 	bl	8005b6c <siprintf>
		}
		print(sprintf_buffer);
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fe98 	bl	80009dc <print>
}
 8000cac:	bf00      	nop
 8000cae:	3768      	adds	r7, #104	; 0x68
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	08006468 	.word	0x08006468
 8000cb8:	20000010 	.word	0x20000010
 8000cbc:	08006548 	.word	0x08006548
 8000cc0:	0800656c 	.word	0x0800656c

08000cc4 <play_notes>:

void play_notes() {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	print("Playing notes in order\n");
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <play_notes+0x1c>)
 8000cca:	f7ff fe87 	bl	80009dc <print>
	notes_count = 7;
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <play_notes+0x20>)
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	701a      	strb	r2, [r3, #0]
	notes_played_ms = 0;
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <play_notes+0x24>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	08006598 	.word	0x08006598
 8000ce4:	20000014 	.word	0x20000014
 8000ce8:	20000108 	.word	0x20000108

08000cec <get_pressed_btn_index>:
int8_t last_pressed = -1;

int rows[4] = {0, 0, 0, 0};
int cols[3] = {0, 0, 0};

int get_pressed_btn_index(){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	; 0x30
 8000cf0:	af04      	add	r7, sp, #16
	const uint32_t t = HAL_GetTick();
 8000cf2:	f000 fe0d 	bl	8001910 <HAL_GetTick>
 8000cf6:	6078      	str	r0, [r7, #4]
	if (t - last_pressing_time < KB_KEY_DEBOUNCE_TIME) return -1;
 8000cf8:	4b6b      	ldr	r3, [pc, #428]	; (8000ea8 <get_pressed_btn_index+0x1bc>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	2b31      	cmp	r3, #49	; 0x31
 8000d02:	d802      	bhi.n	8000d0a <get_pressed_btn_index+0x1e>
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
 8000d08:	e0c9      	b.n	8000e9e <get_pressed_btn_index+0x1b2>

	int8_t index = -1;
 8000d0a:	23ff      	movs	r3, #255	; 0xff
 8000d0c:	77fb      	strb	r3, [r7, #31]
	uint8_t read_buffer = ~0;
 8000d0e:	23ff      	movs	r3, #255	; 0xff
 8000d10:	70fb      	strb	r3, [r7, #3]
	int8_t column = -1;
 8000d12:	23ff      	movs	r3, #255	; 0xff
 8000d14:	77bb      	strb	r3, [r7, #30]
	int8_t was_pressed_on_row = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	777b      	strb	r3, [r7, #29]
	HAL_Delay(5);
 8000d1a:	2005      	movs	r0, #5
 8000d1c:	f000 fe04 	bl	8001928 <HAL_Delay>
	for (int row = 0; row < 4; row++) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
 8000d24:	e06f      	b.n	8000e06 <get_pressed_btn_index+0x11a>
		uint8_t buf = ~((uint8_t) (1 << row));
 8000d26:	2201      	movs	r2, #1
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Mem_Write(&hi2c1, KB_I2C_ADDRESS, KB_CONFIG_REG, 1, &buf, 1, 100);
 8000d36:	2364      	movs	r3, #100	; 0x64
 8000d38:	9302      	str	r3, [sp, #8]
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	1cbb      	adds	r3, r7, #2
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2301      	movs	r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	21e2      	movs	r1, #226	; 0xe2
 8000d48:	4858      	ldr	r0, [pc, #352]	; (8000eac <get_pressed_btn_index+0x1c0>)
 8000d4a:	f001 fabd 	bl	80022c8 <HAL_I2C_Mem_Write>
		HAL_Delay(5);
 8000d4e:	2005      	movs	r0, #5
 8000d50:	f000 fdea 	bl	8001928 <HAL_Delay>
		HAL_I2C_Mem_Read(&hi2c1, KB_I2C_ADDRESS, KB_CONFIG_REG, 1, &read_buffer, 1, 100);
 8000d54:	2364      	movs	r3, #100	; 0x64
 8000d56:	9302      	str	r3, [sp, #8]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	1cfb      	adds	r3, r7, #3
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2301      	movs	r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	21e2      	movs	r1, #226	; 0xe2
 8000d66:	4851      	ldr	r0, [pc, #324]	; (8000eac <get_pressed_btn_index+0x1c0>)
 8000d68:	f001 fba8 	bl	80024bc <HAL_I2C_Mem_Read>
		column = -1;
 8000d6c:	23ff      	movs	r3, #255	; 0xff
 8000d6e:	77bb      	strb	r3, [r7, #30]
		switch (read_buffer >> 4) {
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	091b      	lsrs	r3, r3, #4
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d006      	beq.n	8000d88 <get_pressed_btn_index+0x9c>
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	dc0d      	bgt.n	8000d9a <get_pressed_btn_index+0xae>
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	d008      	beq.n	8000d94 <get_pressed_btn_index+0xa8>
 8000d82:	2b05      	cmp	r3, #5
 8000d84:	d003      	beq.n	8000d8e <get_pressed_btn_index+0xa2>
 8000d86:	e008      	b.n	8000d9a <get_pressed_btn_index+0xae>
			case 6: column = 0; break;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	77bb      	strb	r3, [r7, #30]
 8000d8c:	e005      	b.n	8000d9a <get_pressed_btn_index+0xae>
			case 5: column = 1; break;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	77bb      	strb	r3, [r7, #30]
 8000d92:	e002      	b.n	8000d9a <get_pressed_btn_index+0xae>
			case 4: column = 2; break;
 8000d94:	2302      	movs	r3, #2
 8000d96:	77bb      	strb	r3, [r7, #30]
 8000d98:	bf00      	nop
		}
		if (column != -1) {
 8000d9a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da2:	d02a      	beq.n	8000dfa <get_pressed_btn_index+0x10e>
			if (!was_pressed_on_row) {
 8000da4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d10c      	bne.n	8000dc6 <get_pressed_btn_index+0xda>
				index = row * 3 + column + 1;
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	461a      	mov	r2, r3
 8000db2:	0052      	lsls	r2, r2, #1
 8000db4:	4413      	add	r3, r2
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	7fbb      	ldrb	r3, [r7, #30]
 8000dba:	4413      	add	r3, r2
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	77fb      	strb	r3, [r7, #31]
 8000dc4:	e001      	b.n	8000dca <get_pressed_btn_index+0xde>
			} else {
				index = -1;
 8000dc6:	23ff      	movs	r3, #255	; 0xff
 8000dc8:	77fb      	strb	r3, [r7, #31]
			}
			rows[row] += 1;
 8000dca:	4a39      	ldr	r2, [pc, #228]	; (8000eb0 <get_pressed_btn_index+0x1c4>)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	4936      	ldr	r1, [pc, #216]	; (8000eb0 <get_pressed_btn_index+0x1c4>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			cols[column] += 1;
 8000ddc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000de0:	4a34      	ldr	r2, [pc, #208]	; (8000eb4 <get_pressed_btn_index+0x1c8>)
 8000de2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000de6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000dea:	3201      	adds	r2, #1
 8000dec:	4931      	ldr	r1, [pc, #196]	; (8000eb4 <get_pressed_btn_index+0x1c8>)
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			was_pressed_on_row += 1;
 8000df2:	7f7b      	ldrb	r3, [r7, #29]
 8000df4:	3301      	adds	r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	777b      	strb	r3, [r7, #29]
		}
		HAL_Delay(5);
 8000dfa:	2005      	movs	r0, #5
 8000dfc:	f000 fd94 	bl	8001928 <HAL_Delay>
	for (int row = 0; row < 4; row++) {
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	3301      	adds	r3, #1
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	dd8c      	ble.n	8000d26 <get_pressed_btn_index+0x3a>
	}

	if (index == last_pressed) {
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <get_pressed_btn_index+0x1cc>)
 8000e0e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e12:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d102      	bne.n	8000e20 <get_pressed_btn_index+0x134>
		return -1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e03e      	b.n	8000e9e <get_pressed_btn_index+0x1b2>
	}
	last_pressed = index;
 8000e20:	4a25      	ldr	r2, [pc, #148]	; (8000eb8 <get_pressed_btn_index+0x1cc>)
 8000e22:	7ffb      	ldrb	r3, [r7, #31]
 8000e24:	7013      	strb	r3, [r2, #0]

	int s1 = 0; int s2 = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 4; i++) {
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	e00e      	b.n	8000e52 <get_pressed_btn_index+0x166>
		s1 += rows[i];
 8000e34:	4a1e      	ldr	r2, [pc, #120]	; (8000eb0 <get_pressed_btn_index+0x1c4>)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	4413      	add	r3, r2
 8000e40:	617b      	str	r3, [r7, #20]
		rows[i] = 0;
 8000e42:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <get_pressed_btn_index+0x1c4>)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2100      	movs	r1, #0
 8000e48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	dded      	ble.n	8000e34 <get_pressed_btn_index+0x148>
	}
	for (int i = 0; i < 3; i++) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	e00e      	b.n	8000e7c <get_pressed_btn_index+0x190>
		s2 += cols[i];
 8000e5e:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <get_pressed_btn_index+0x1c8>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4413      	add	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
		cols[i] = 0;
 8000e6c:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <get_pressed_btn_index+0x1c8>)
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	2100      	movs	r1, #0
 8000e72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++) {
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	dded      	ble.n	8000e5e <get_pressed_btn_index+0x172>
	}

	if (s1 != 1 && s2 != 1) {
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d005      	beq.n	8000e94 <get_pressed_btn_index+0x1a8>
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d002      	beq.n	8000e94 <get_pressed_btn_index+0x1a8>
		return -1;
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	e004      	b.n	8000e9e <get_pressed_btn_index+0x1b2>
	}
	last_pressing_time = t;
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <get_pressed_btn_index+0x1bc>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]

	return index;
 8000e9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3720      	adds	r7, #32
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000010c 	.word	0x2000010c
 8000eac:	200000b0 	.word	0x200000b0
 8000eb0:	20000110 	.word	0x20000110
 8000eb4:	20000120 	.word	0x20000120
 8000eb8:	20000015 	.word	0x20000015

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b0aa      	sub	sp, #168	; 0xa8
 8000ec0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec2:	f000 fcbf 	bl	8001844 <HAL_Init>

  /* USER CODE BEGIN Init */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000eca:	4b8c      	ldr	r3, [pc, #560]	; (80010fc <main+0x240>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a8b      	ldr	r2, [pc, #556]	; (80010fc <main+0x240>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b89      	ldr	r3, [pc, #548]	; (80010fc <main+0x240>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ee0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 f927 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f7ff fbf3 	bl	80006d0 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000eea:	f000 fb93 	bl	8001614 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8000eee:	f000 fae3 	bl	80014b8 <MX_TIM6_Init>
  MX_TIM1_Init();
 8000ef2:	f000 fa3f 	bl	8001374 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000ef6:	f7ff fc3d 	bl	8000774 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8000efa:	4881      	ldr	r0, [pc, #516]	; (8001100 <main+0x244>)
 8000efc:	f002 fd82 	bl	8003a04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f00:	2100      	movs	r1, #0
 8000f02:	4880      	ldr	r0, [pc, #512]	; (8001104 <main+0x248>)
 8000f04:	f002 fe48 	bl	8003b98 <HAL_TIM_PWM_Start>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8000f1c:	4b77      	ldr	r3, [pc, #476]	; (80010fc <main+0x240>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	4a76      	ldr	r2, [pc, #472]	; (80010fc <main+0x240>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6313      	str	r3, [r2, #48]	; 0x30
 8000f28:	4b74      	ldr	r3, [pc, #464]	; (80010fc <main+0x240>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	67bb      	str	r3, [r7, #120]	; 0x78
 8000f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	677b      	str	r3, [r7, #116]	; 0x74
 8000f38:	4b70      	ldr	r3, [pc, #448]	; (80010fc <main+0x240>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	4a6f      	ldr	r2, [pc, #444]	; (80010fc <main+0x240>)
 8000f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f42:	6313      	str	r3, [r2, #48]	; 0x30
 8000f44:	4b6d      	ldr	r3, [pc, #436]	; (80010fc <main+0x240>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4c:	677b      	str	r3, [r7, #116]	; 0x74
 8000f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	673b      	str	r3, [r7, #112]	; 0x70
 8000f54:	4b69      	ldr	r3, [pc, #420]	; (80010fc <main+0x240>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a68      	ldr	r2, [pc, #416]	; (80010fc <main+0x240>)
 8000f5a:	f043 0308 	orr.w	r3, r3, #8
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f60:	4b66      	ldr	r3, [pc, #408]	; (80010fc <main+0x240>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f003 0308 	and.w	r3, r3, #8
 8000f68:	673b      	str	r3, [r7, #112]	; 0x70
 8000f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f70:	4b62      	ldr	r3, [pc, #392]	; (80010fc <main+0x240>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	4a61      	ldr	r2, [pc, #388]	; (80010fc <main+0x240>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7c:	4b5f      	ldr	r3, [pc, #380]	; (80010fc <main+0x240>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f8c:	4b5b      	ldr	r3, [pc, #364]	; (80010fc <main+0x240>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	4a5a      	ldr	r2, [pc, #360]	; (80010fc <main+0x240>)
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	6313      	str	r3, [r2, #48]	; 0x30
 8000f98:	4b58      	ldr	r3, [pc, #352]	; (80010fc <main+0x240>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8000fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68

	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4852      	ldr	r0, [pc, #328]	; (8001108 <main+0x24c>)
 8000fc0:	f000 fe7a 	bl	8001cb8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
 8000fc4:	f24e 0301 	movw	r3, #57345	; 0xe001
 8000fc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fde:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4849      	ldr	r0, [pc, #292]	; (800110c <main+0x250>)
 8000fe6:	f000 fe67 	bl	8001cb8 <HAL_GPIO_Init>

  static uint8_t received_buffer_empty[2] = "\0\0";

  // 0 - print, not execute
  // 1 - print and execute
  int kb_mode = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int command = get_pressed_btn_index();
 8000ff0:	f7ff fe7c 	bl	8000cec <get_pressed_btn_index>
 8000ff4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	  if (command != -1 && kb_mode) {
 8000ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d00e      	beq.n	8001020 <main+0x164>
 8001002:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00a      	beq.n	8001020 <main+0x164>
		char sprintf_buffer[100];
		sprintf(sprintf_buffer, "Pressed button on matrix keyboard: %d\n", command);
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001010:	493f      	ldr	r1, [pc, #252]	; (8001110 <main+0x254>)
 8001012:	4618      	mov	r0, r3
 8001014:	f004 fdaa 	bl	8005b6c <siprintf>
		print(sprintf_buffer);
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fcde 	bl	80009dc <print>
	  }

	  int is_button = is_button_clicked();
 8001020:	f7ff fac0 	bl	80005a4 <is_button_clicked>
 8001024:	4603      	mov	r3, r0
 8001026:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	  if (is_button) {
 800102a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800102e:	2b00      	cmp	r3, #0
 8001030:	d013      	beq.n	800105a <main+0x19e>
		  kb_mode = !kb_mode;
 8001032:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf0c      	ite	eq
 800103a:	2301      	moveq	r3, #1
 800103c:	2300      	movne	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		  if (kb_mode) {
 8001044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <main+0x198>
			  print("Enabled debug mode.\n");
 800104c:	4831      	ldr	r0, [pc, #196]	; (8001114 <main+0x258>)
 800104e:	f7ff fcc5 	bl	80009dc <print>
 8001052:	e002      	b.n	800105a <main+0x19e>
		  } else {
			  print("Disabled debug mode.\n");
 8001054:	4830      	ldr	r0, [pc, #192]	; (8001118 <main+0x25c>)
 8001056:	f7ff fcc1 	bl	80009dc <print>
		  }
	  }

	  if (kb_mode) continue;
 800105a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800105e:	2b00      	cmp	r3, #0
 8001060:	d14a      	bne.n	80010f8 <main+0x23c>

	  	if (command >= 1 && command <= 7) {
 8001062:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001066:	2b00      	cmp	r3, #0
 8001068:	dd22      	ble.n	80010b0 <main+0x1f4>
 800106a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800106e:	2b07      	cmp	r3, #7
 8001070:	dc1e      	bgt.n	80010b0 <main+0x1f4>
			notes_count = 1;
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <main+0x260>)
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
			notes_played_ms = 0;
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <main+0x264>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
			change_note(command);
 800107e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fd0b 	bl	8000aa0 <change_note>

			char sprintf_buffer[100];
			sprintf(sprintf_buffer, "\nPlaying note #%d on octave %d in %dms.\n", note, octave, playtime);
 800108a:	4b26      	ldr	r3, [pc, #152]	; (8001124 <main+0x268>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	4b25      	ldr	r3, [pc, #148]	; (8001128 <main+0x26c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <main+0x270>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	1d38      	adds	r0, r7, #4
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	460b      	mov	r3, r1
 80010a0:	4923      	ldr	r1, [pc, #140]	; (8001130 <main+0x274>)
 80010a2:	f004 fd63 	bl	8005b6c <siprintf>
			print(sprintf_buffer);
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fc97 	bl	80009dc <print>
	  	if (command >= 1 && command <= 7) {
 80010ae:	e024      	b.n	80010fa <main+0x23e>

		} else if (command == 8) {
 80010b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d102      	bne.n	80010be <main+0x202>
			increase_octave();
 80010b8:	f7ff fd4c 	bl	8000b54 <increase_octave>
 80010bc:	e798      	b.n	8000ff0 <main+0x134>
		} else if (command == 9) {
 80010be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80010c2:	2b09      	cmp	r3, #9
 80010c4:	d102      	bne.n	80010cc <main+0x210>
			decrease_octave();
 80010c6:	f7ff fd71 	bl	8000bac <decrease_octave>
 80010ca:	e791      	b.n	8000ff0 <main+0x134>
		} else if (command == 10) {
 80010cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80010d0:	2b0a      	cmp	r3, #10
 80010d2:	d102      	bne.n	80010da <main+0x21e>
			increase_playtime();
 80010d4:	f7ff fd96 	bl	8000c04 <increase_playtime>
 80010d8:	e78a      	b.n	8000ff0 <main+0x134>
		} else if (command == 11) {
 80010da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80010de:	2b0b      	cmp	r3, #11
 80010e0:	d102      	bne.n	80010e8 <main+0x22c>
			decrease_playtime();
 80010e2:	f7ff fdc1 	bl	8000c68 <decrease_playtime>
 80010e6:	e783      	b.n	8000ff0 <main+0x134>
		} else if (command == 12) {
 80010e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80010ec:	2b0c      	cmp	r3, #12
 80010ee:	f47f af7f 	bne.w	8000ff0 <main+0x134>
			play_notes();
 80010f2:	f7ff fde7 	bl	8000cc4 <play_notes>
 80010f6:	e77b      	b.n	8000ff0 <main+0x134>
	  if (kb_mode) continue;
 80010f8:	bf00      	nop
  {
 80010fa:	e779      	b.n	8000ff0 <main+0x134>
 80010fc:	40023800 	.word	0x40023800
 8001100:	20000178 	.word	0x20000178
 8001104:	20000130 	.word	0x20000130
 8001108:	40020800 	.word	0x40020800
 800110c:	40020c00 	.word	0x40020c00
 8001110:	080065b0 	.word	0x080065b0
 8001114:	080065d8 	.word	0x080065d8
 8001118:	080065f0 	.word	0x080065f0
 800111c:	20000014 	.word	0x20000014
 8001120:	20000108 	.word	0x20000108
 8001124:	2000000d 	.word	0x2000000d
 8001128:	2000000e 	.word	0x2000000e
 800112c:	20000010 	.word	0x20000010
 8001130:	08006608 	.word	0x08006608

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b094      	sub	sp, #80	; 0x50
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	2230      	movs	r2, #48	; 0x30
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f004 fd0a 	bl	8005b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <SystemClock_Config+0xd0>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	4a28      	ldr	r2, [pc, #160]	; (8001204 <SystemClock_Config+0xd0>)
 8001162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001166:	6413      	str	r3, [r2, #64]	; 0x40
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <SystemClock_Config+0xd0>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <SystemClock_Config+0xd4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <SystemClock_Config+0xd4>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <SystemClock_Config+0xd4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001194:	2301      	movs	r3, #1
 8001196:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119e:	2302      	movs	r3, #2
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80011a8:	230f      	movs	r3, #15
 80011aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80011ac:	2390      	movs	r3, #144	; 0x90
 80011ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b8:	f107 0320 	add.w	r3, r7, #32
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 ff79 	bl	80030b4 <HAL_RCC_OscConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011c8:	f000 f820 	bl	800120c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	230f      	movs	r3, #15
 80011ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2302      	movs	r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2103      	movs	r1, #3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 f9da 	bl	80035a4 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011f6:	f000 f809 	bl	800120c <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	; 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	e7fe      	b.n	8001214 <Error_Handler+0x8>
	...

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_MspInit+0x4c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <HAL_MspInit+0x4c>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_MspInit+0x4c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_MspInit+0x4c>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_MspInit+0x4c>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800126c:	e7fe      	b.n	800126c <NMI_Handler+0x4>

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 fb18 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <TIM6_DAC_IRQHandler+0x10>)
 80012c2:	f002 fd31 	bl	8003d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000178 	.word	0x20000178

080012d0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <USART6_IRQHandler+0x10>)
 80012d6:	f003 fcf7 	bl	8004cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200001c0 	.word	0x200001c0

080012e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <_sbrk+0x5c>)
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <_sbrk+0x60>)
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <_sbrk+0x64>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <_sbrk+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	429a      	cmp	r2, r3
 8001312:	d207      	bcs.n	8001324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001314:	f004 fbf8 	bl	8005b08 <__errno>
 8001318:	4603      	mov	r3, r0
 800131a:	220c      	movs	r2, #12
 800131c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e009      	b.n	8001338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <_sbrk+0x64>)
 8001334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20030000 	.word	0x20030000
 8001344:	00000400 	.word	0x00000400
 8001348:	2000012c 	.word	0x2000012c
 800134c:	20000288 	.word	0x20000288

08001350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b096      	sub	sp, #88	; 0x58
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	615a      	str	r2, [r3, #20]
 80013a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2220      	movs	r2, #32
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f004 fbd5 	bl	8005b5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013b2:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <MX_TIM1_Init+0x13c>)
 80013b4:	4a3f      	ldr	r2, [pc, #252]	; (80014b4 <MX_TIM1_Init+0x140>)
 80013b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 119;
 80013b8:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <MX_TIM1_Init+0x13c>)
 80013ba:	2277      	movs	r2, #119	; 0x77
 80013bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <MX_TIM1_Init+0x13c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80013c4:	4b3a      	ldr	r3, [pc, #232]	; (80014b0 <MX_TIM1_Init+0x13c>)
 80013c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b38      	ldr	r3, [pc, #224]	; (80014b0 <MX_TIM1_Init+0x13c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013d2:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <MX_TIM1_Init+0x13c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d8:	4b35      	ldr	r3, [pc, #212]	; (80014b0 <MX_TIM1_Init+0x13c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013de:	4834      	ldr	r0, [pc, #208]	; (80014b0 <MX_TIM1_Init+0x13c>)
 80013e0:	f002 fac0 	bl	8003964 <HAL_TIM_Base_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013ea:	f7ff ff0f 	bl	800120c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013f8:	4619      	mov	r1, r3
 80013fa:	482d      	ldr	r0, [pc, #180]	; (80014b0 <MX_TIM1_Init+0x13c>)
 80013fc:	f002 fe5e 	bl	80040bc <HAL_TIM_ConfigClockSource>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001406:	f7ff ff01 	bl	800120c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800140a:	4829      	ldr	r0, [pc, #164]	; (80014b0 <MX_TIM1_Init+0x13c>)
 800140c:	f002 fb6a 	bl	8003ae4 <HAL_TIM_PWM_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001416:	f7ff fef9 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001426:	4619      	mov	r1, r3
 8001428:	4821      	ldr	r0, [pc, #132]	; (80014b0 <MX_TIM1_Init+0x13c>)
 800142a:	f003 fa47 	bl	80048bc <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001434:	f7ff feea 	bl	800120c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001438:	2360      	movs	r3, #96	; 0x60
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 800143c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001442:	2300      	movs	r3, #0
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001446:	2300      	movs	r3, #0
 8001448:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	2200      	movs	r2, #0
 800145c:	4619      	mov	r1, r3
 800145e:	4814      	ldr	r0, [pc, #80]	; (80014b0 <MX_TIM1_Init+0x13c>)
 8001460:	f002 fd6a 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800146a:	f7ff fecf 	bl	800120c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001486:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4807      	ldr	r0, [pc, #28]	; (80014b0 <MX_TIM1_Init+0x13c>)
 8001492:	f003 fa8f 	bl	80049b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800149c:	f7ff feb6 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014a0:	4803      	ldr	r0, [pc, #12]	; (80014b0 <MX_TIM1_Init+0x13c>)
 80014a2:	f000 f87d 	bl	80015a0 <HAL_TIM_MspPostInit>

}
 80014a6:	bf00      	nop
 80014a8:	3758      	adds	r7, #88	; 0x58
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000130 	.word	0x20000130
 80014b4:	40010000 	.word	0x40010000

080014b8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_TIM6_Init+0x64>)
 80014c8:	4a15      	ldr	r2, [pc, #84]	; (8001520 <MX_TIM6_Init+0x68>)
 80014ca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_TIM6_Init+0x64>)
 80014ce:	2209      	movs	r2, #9
 80014d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_TIM6_Init+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 59999;
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_TIM6_Init+0x64>)
 80014da:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80014de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_TIM6_Init+0x64>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_TIM6_Init+0x64>)
 80014e8:	f002 fa3c 	bl	8003964 <HAL_TIM_Base_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80014f2:	f7ff fe8b 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014fe:	463b      	mov	r3, r7
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <MX_TIM6_Init+0x64>)
 8001504:	f003 f9da 	bl	80048bc <HAL_TIMEx_MasterConfigSynchronization>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800150e:	f7ff fe7d 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000178 	.word	0x20000178
 8001520:	40001000 	.word	0x40001000

08001524 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a18      	ldr	r2, [pc, #96]	; (8001594 <HAL_TIM_Base_MspInit+0x70>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d10e      	bne.n	8001554 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_TIM_Base_MspInit+0x74>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a16      	ldr	r2, [pc, #88]	; (8001598 <HAL_TIM_Base_MspInit+0x74>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_TIM_Base_MspInit+0x74>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001552:	e01a      	b.n	800158a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a10      	ldr	r2, [pc, #64]	; (800159c <HAL_TIM_Base_MspInit+0x78>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d115      	bne.n	800158a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <HAL_TIM_Base_MspInit+0x74>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <HAL_TIM_Base_MspInit+0x74>)
 8001568:	f043 0310 	orr.w	r3, r3, #16
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_TIM_Base_MspInit+0x74>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2036      	movs	r0, #54	; 0x36
 8001580:	f000 fad1 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001584:	2036      	movs	r0, #54	; 0x36
 8001586:	f000 faea 	bl	8001b5e <HAL_NVIC_EnableIRQ>
}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40010000 	.word	0x40010000
 8001598:	40023800 	.word	0x40023800
 800159c:	40001000 	.word	0x40001000

080015a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a12      	ldr	r2, [pc, #72]	; (8001608 <HAL_TIM_MspPostInit+0x68>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d11e      	bne.n	8001600 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_TIM_MspPostInit+0x6c>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_TIM_MspPostInit+0x6c>)
 80015cc:	f043 0310 	orr.w	r3, r3, #16
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_TIM_MspPostInit+0x6c>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	4619      	mov	r1, r3
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_TIM_MspPostInit+0x70>)
 80015fc:	f000 fb5c 	bl	8001cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40010000 	.word	0x40010000
 800160c:	40023800 	.word	0x40023800
 8001610:	40021000 	.word	0x40021000

08001614 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_USART6_UART_Init+0x4c>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <MX_USART6_UART_Init+0x50>)
 800161c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_USART6_UART_Init+0x4c>)
 8001620:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001624:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_USART6_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_USART6_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <MX_USART6_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_USART6_UART_Init+0x4c>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <MX_USART6_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_USART6_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_USART6_UART_Init+0x4c>)
 800164c:	f003 fa18 	bl	8004a80 <HAL_UART_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001656:	f7ff fdd9 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200001c0 	.word	0x200001c0
 8001664:	40011400 	.word	0x40011400

08001668 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a1d      	ldr	r2, [pc, #116]	; (80016fc <HAL_UART_MspInit+0x94>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d133      	bne.n	80016f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <HAL_UART_MspInit+0x98>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <HAL_UART_MspInit+0x98>)
 8001694:	f043 0320 	orr.w	r3, r3, #32
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_UART_MspInit+0x98>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_UART_MspInit+0x98>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <HAL_UART_MspInit+0x98>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_UART_MspInit+0x98>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016c2:	23c0      	movs	r3, #192	; 0xc0
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016d2:	2308      	movs	r3, #8
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4809      	ldr	r0, [pc, #36]	; (8001704 <HAL_UART_MspInit+0x9c>)
 80016de:	f000 faeb 	bl	8001cb8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	2047      	movs	r0, #71	; 0x47
 80016e8:	f000 fa1d 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80016ec:	2047      	movs	r0, #71	; 0x47
 80016ee:	f000 fa36 	bl	8001b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80016f2:	bf00      	nop
 80016f4:	3728      	adds	r7, #40	; 0x28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40011400 	.word	0x40011400
 8001700:	40023800 	.word	0x40023800
 8001704:	40020800 	.word	0x40020800

08001708 <insert_in_queue>:

static uint8_t queue[QUEUE_SIZE];
static int insertion_index = 0;
static int queue_size = 0;

void insert_in_queue(uint8_t x) {
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
	if (queue_size >= QUEUE_SIZE) return;
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <insert_in_queue+0x54>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b63      	cmp	r3, #99	; 0x63
 8001718:	dc19      	bgt.n	800174e <insert_in_queue+0x46>
	queue_size += 1;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <insert_in_queue+0x54>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	4a0e      	ldr	r2, [pc, #56]	; (800175c <insert_in_queue+0x54>)
 8001722:	6013      	str	r3, [r2, #0]
	queue[insertion_index] = x;
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <insert_in_queue+0x58>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	490e      	ldr	r1, [pc, #56]	; (8001764 <insert_in_queue+0x5c>)
 800172a:	79fa      	ldrb	r2, [r7, #7]
 800172c:	54ca      	strb	r2, [r1, r3]
	insertion_index = (insertion_index + 1) % QUEUE_SIZE;
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <insert_in_queue+0x58>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <insert_in_queue+0x60>)
 8001736:	fb83 1302 	smull	r1, r3, r3, r2
 800173a:	1159      	asrs	r1, r3, #5
 800173c:	17d3      	asrs	r3, r2, #31
 800173e:	1acb      	subs	r3, r1, r3
 8001740:	2164      	movs	r1, #100	; 0x64
 8001742:	fb01 f303 	mul.w	r3, r1, r3
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	4a05      	ldr	r2, [pc, #20]	; (8001760 <insert_in_queue+0x58>)
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	e000      	b.n	8001750 <insert_in_queue+0x48>
	if (queue_size >= QUEUE_SIZE) return;
 800174e:	bf00      	nop
 	 }
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2000026c 	.word	0x2000026c
 8001760:	20000268 	.word	0x20000268
 8001764:	20000204 	.word	0x20000204
 8001768:	51eb851f 	.word	0x51eb851f

0800176c <take_element_from_queue>:

uint8_t take_element_from_queue() {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
	if (queue_size <= 0) return 0;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <take_element_from_queue+0x54>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	dc01      	bgt.n	800177e <take_element_from_queue+0x12>
 800177a:	2300      	movs	r3, #0
 800177c:	e019      	b.n	80017b2 <take_element_from_queue+0x46>
	int dequeue_index = (insertion_index - queue_size + QUEUE_SIZE) % QUEUE_SIZE;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <take_element_from_queue+0x58>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <take_element_from_queue+0x54>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	3364      	adds	r3, #100	; 0x64
 800178a:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <take_element_from_queue+0x5c>)
 800178c:	fb82 1203 	smull	r1, r2, r2, r3
 8001790:	1151      	asrs	r1, r2, #5
 8001792:	17da      	asrs	r2, r3, #31
 8001794:	1a8a      	subs	r2, r1, r2
 8001796:	2164      	movs	r1, #100	; 0x64
 8001798:	fb01 f202 	mul.w	r2, r1, r2
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	607b      	str	r3, [r7, #4]
	queue_size -= 1;
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <take_element_from_queue+0x54>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <take_element_from_queue+0x54>)
 80017a8:	6013      	str	r3, [r2, #0]
	return queue[dequeue_index];
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <take_element_from_queue+0x60>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	781b      	ldrb	r3, [r3, #0]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	2000026c 	.word	0x2000026c
 80017c4:	20000268 	.word	0x20000268
 80017c8:	51eb851f 	.word	0x51eb851f
 80017cc:	20000204 	.word	0x20000204

080017d0 <is_queue_empty>:

uint8_t is_queue_empty() {
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
	return queue_size == 0;
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <is_queue_empty+0x1c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf0c      	ite	eq
 80017dc:	2301      	moveq	r3, #1
 80017de:	2300      	movne	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	2000026c 	.word	0x2000026c

080017f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001828 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017f6:	490e      	ldr	r1, [pc, #56]	; (8001830 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f8:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800180c:	4c0b      	ldr	r4, [pc, #44]	; (800183c <LoopFillZerobss+0x26>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800181a:	f7ff fd99 	bl	8001350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181e:	f004 f979 	bl	8005b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001822:	f7ff fb4b 	bl	8000ebc <main>
  bx  lr    
 8001826:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001828:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001834:	08006690 	.word	0x08006690
  ldr r2, =_sbss
 8001838:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800183c:	20000284 	.word	0x20000284

08001840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <HAL_Init+0x40>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_Init+0x40>)
 800185a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800185e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x40>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f94f 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	200f      	movs	r0, #15
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fcce 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f967 	bl	8001b7a <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f000 f92f 	bl	8001b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000018 	.word	0x20000018
 80018e0:	20000020 	.word	0x20000020
 80018e4:	2000001c 	.word	0x2000001c

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000020 	.word	0x20000020
 800190c:	20000270 	.word	0x20000270

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000270 	.word	0x20000270

08001928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff ffee 	bl	8001910 <HAL_GetTick>
 8001934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d005      	beq.n	800194e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_Delay+0x44>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800194e:	bf00      	nop
 8001950:	f7ff ffde 	bl	8001910 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	d8f7      	bhi.n	8001950 <HAL_Delay+0x28>
  {
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000020 	.word	0x20000020

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db0b      	blt.n	80019fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	4907      	ldr	r1, [pc, #28]	; (8001a0c <__NVIC_EnableIRQ+0x38>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2001      	movs	r0, #1
 80019f6:	fa00 f202 	lsl.w	r2, r0, r2
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001adc:	d301      	bcc.n	8001ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <SysTick_Config+0x40>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aea:	210f      	movs	r1, #15
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f7ff ff8e 	bl	8001a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SysTick_Config+0x40>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <SysTick_Config+0x40>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff29 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b38:	f7ff ff3e 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	f7ff ff8e 	bl	8001a64 <NVIC_EncodePriority>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff5d 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff31 	bl	80019d4 <__NVIC_EnableIRQ>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffa2 	bl	8001acc <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff feb6 	bl	8001910 <HAL_GetTick>
 8001ba4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d008      	beq.n	8001bc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e052      	b.n	8001c6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0216 	bic.w	r2, r2, #22
 8001bd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d103      	bne.n	8001bf4 <HAL_DMA_Abort+0x62>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0208 	bic.w	r2, r2, #8
 8001c02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c14:	e013      	b.n	8001c3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c16:	f7ff fe7b 	bl	8001910 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d90c      	bls.n	8001c3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e015      	b.n	8001c6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e4      	bne.n	8001c16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	223f      	movs	r2, #63	; 0x3f
 8001c52:	409a      	lsls	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d004      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e00c      	b.n	8001caa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2205      	movs	r2, #5
 8001c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e177      	b.n	8001fc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	f040 8166 	bne.w	8001fbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d005      	beq.n	8001d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d130      	bne.n	8001d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d40:	2201      	movs	r2, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 0201 	and.w	r2, r3, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d017      	beq.n	8001da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d123      	bne.n	8001dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	220f      	movs	r2, #15
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	69b9      	ldr	r1, [r7, #24]
 8001df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0203 	and.w	r2, r3, #3
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80c0 	beq.w	8001fbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a65      	ldr	r2, [pc, #404]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5a:	4a61      	ldr	r2, [pc, #388]	; (8001fe0 <HAL_GPIO_Init+0x328>)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	220f      	movs	r2, #15
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a58      	ldr	r2, [pc, #352]	; (8001fe4 <HAL_GPIO_Init+0x32c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d037      	beq.n	8001ef6 <HAL_GPIO_Init+0x23e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a57      	ldr	r2, [pc, #348]	; (8001fe8 <HAL_GPIO_Init+0x330>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d031      	beq.n	8001ef2 <HAL_GPIO_Init+0x23a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a56      	ldr	r2, [pc, #344]	; (8001fec <HAL_GPIO_Init+0x334>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d02b      	beq.n	8001eee <HAL_GPIO_Init+0x236>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a55      	ldr	r2, [pc, #340]	; (8001ff0 <HAL_GPIO_Init+0x338>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d025      	beq.n	8001eea <HAL_GPIO_Init+0x232>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a54      	ldr	r2, [pc, #336]	; (8001ff4 <HAL_GPIO_Init+0x33c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d01f      	beq.n	8001ee6 <HAL_GPIO_Init+0x22e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a53      	ldr	r2, [pc, #332]	; (8001ff8 <HAL_GPIO_Init+0x340>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d019      	beq.n	8001ee2 <HAL_GPIO_Init+0x22a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a52      	ldr	r2, [pc, #328]	; (8001ffc <HAL_GPIO_Init+0x344>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <HAL_GPIO_Init+0x226>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a51      	ldr	r2, [pc, #324]	; (8002000 <HAL_GPIO_Init+0x348>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00d      	beq.n	8001eda <HAL_GPIO_Init+0x222>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a50      	ldr	r2, [pc, #320]	; (8002004 <HAL_GPIO_Init+0x34c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d007      	beq.n	8001ed6 <HAL_GPIO_Init+0x21e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4f      	ldr	r2, [pc, #316]	; (8002008 <HAL_GPIO_Init+0x350>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d101      	bne.n	8001ed2 <HAL_GPIO_Init+0x21a>
 8001ece:	2309      	movs	r3, #9
 8001ed0:	e012      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001ed2:	230a      	movs	r3, #10
 8001ed4:	e010      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	e00e      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001eda:	2307      	movs	r3, #7
 8001edc:	e00c      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001ede:	2306      	movs	r3, #6
 8001ee0:	e00a      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	e008      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	e006      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001eea:	2303      	movs	r3, #3
 8001eec:	e004      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_GPIO_Init+0x240>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	f002 0203 	and.w	r2, r2, #3
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	4093      	lsls	r3, r2
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f08:	4935      	ldr	r1, [pc, #212]	; (8001fe0 <HAL_GPIO_Init+0x328>)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f16:	4b3d      	ldr	r3, [pc, #244]	; (800200c <HAL_GPIO_Init+0x354>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f3a:	4a34      	ldr	r2, [pc, #208]	; (800200c <HAL_GPIO_Init+0x354>)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f40:	4b32      	ldr	r3, [pc, #200]	; (800200c <HAL_GPIO_Init+0x354>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f64:	4a29      	ldr	r2, [pc, #164]	; (800200c <HAL_GPIO_Init+0x354>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f6a:	4b28      	ldr	r3, [pc, #160]	; (800200c <HAL_GPIO_Init+0x354>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f8e:	4a1f      	ldr	r2, [pc, #124]	; (800200c <HAL_GPIO_Init+0x354>)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <HAL_GPIO_Init+0x354>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb8:	4a14      	ldr	r2, [pc, #80]	; (800200c <HAL_GPIO_Init+0x354>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	2b0f      	cmp	r3, #15
 8001fc8:	f67f ae84 	bls.w	8001cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40013800 	.word	0x40013800
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	40020400 	.word	0x40020400
 8001fec:	40020800 	.word	0x40020800
 8001ff0:	40020c00 	.word	0x40020c00
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40021400 	.word	0x40021400
 8001ffc:	40021800 	.word	0x40021800
 8002000:	40021c00 	.word	0x40021c00
 8002004:	40022000 	.word	0x40022000
 8002008:	40022400 	.word	0x40022400
 800200c:	40013c00 	.word	0x40013c00

08002010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	e001      	b.n	8002032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e12b      	b.n	80022aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe fbc4 	bl	80007f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2224      	movs	r2, #36	; 0x24
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002092:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020a4:	f001 fc36 	bl	8003914 <HAL_RCC_GetPCLK1Freq>
 80020a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4a81      	ldr	r2, [pc, #516]	; (80022b4 <HAL_I2C_Init+0x274>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d807      	bhi.n	80020c4 <HAL_I2C_Init+0x84>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a80      	ldr	r2, [pc, #512]	; (80022b8 <HAL_I2C_Init+0x278>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	bf94      	ite	ls
 80020bc:	2301      	movls	r3, #1
 80020be:	2300      	movhi	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	e006      	b.n	80020d2 <HAL_I2C_Init+0x92>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4a7d      	ldr	r2, [pc, #500]	; (80022bc <HAL_I2C_Init+0x27c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	bf94      	ite	ls
 80020cc:	2301      	movls	r3, #1
 80020ce:	2300      	movhi	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0e7      	b.n	80022aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4a78      	ldr	r2, [pc, #480]	; (80022c0 <HAL_I2C_Init+0x280>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0c9b      	lsrs	r3, r3, #18
 80020e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a6a      	ldr	r2, [pc, #424]	; (80022b4 <HAL_I2C_Init+0x274>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d802      	bhi.n	8002114 <HAL_I2C_Init+0xd4>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	3301      	adds	r3, #1
 8002112:	e009      	b.n	8002128 <HAL_I2C_Init+0xe8>
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	4a69      	ldr	r2, [pc, #420]	; (80022c4 <HAL_I2C_Init+0x284>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	099b      	lsrs	r3, r3, #6
 8002126:	3301      	adds	r3, #1
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	430b      	orrs	r3, r1
 800212e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800213a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	495c      	ldr	r1, [pc, #368]	; (80022b4 <HAL_I2C_Init+0x274>)
 8002144:	428b      	cmp	r3, r1
 8002146:	d819      	bhi.n	800217c <HAL_I2C_Init+0x13c>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1e59      	subs	r1, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fbb1 f3f3 	udiv	r3, r1, r3
 8002156:	1c59      	adds	r1, r3, #1
 8002158:	f640 73fc 	movw	r3, #4092	; 0xffc
 800215c:	400b      	ands	r3, r1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_I2C_Init+0x138>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1e59      	subs	r1, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002170:	3301      	adds	r3, #1
 8002172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002176:	e051      	b.n	800221c <HAL_I2C_Init+0x1dc>
 8002178:	2304      	movs	r3, #4
 800217a:	e04f      	b.n	800221c <HAL_I2C_Init+0x1dc>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d111      	bne.n	80021a8 <HAL_I2C_Init+0x168>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1e58      	subs	r0, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	440b      	add	r3, r1
 8002192:	fbb0 f3f3 	udiv	r3, r0, r3
 8002196:	3301      	adds	r3, #1
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	e012      	b.n	80021ce <HAL_I2C_Init+0x18e>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1e58      	subs	r0, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	0099      	lsls	r1, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Init+0x196>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e022      	b.n	800221c <HAL_I2C_Init+0x1dc>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10e      	bne.n	80021fc <HAL_I2C_Init+0x1bc>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1e58      	subs	r0, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6859      	ldr	r1, [r3, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	440b      	add	r3, r1
 80021ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f0:	3301      	adds	r3, #1
 80021f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021fa:	e00f      	b.n	800221c <HAL_I2C_Init+0x1dc>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1e58      	subs	r0, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	0099      	lsls	r1, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002212:	3301      	adds	r3, #1
 8002214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002218:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	6809      	ldr	r1, [r1, #0]
 8002220:	4313      	orrs	r3, r2
 8002222:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69da      	ldr	r2, [r3, #28]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800224a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6911      	ldr	r1, [r2, #16]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68d2      	ldr	r2, [r2, #12]
 8002256:	4311      	orrs	r1, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	430b      	orrs	r3, r1
 800225e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2220      	movs	r2, #32
 8002296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	000186a0 	.word	0x000186a0
 80022b8:	001e847f 	.word	0x001e847f
 80022bc:	003d08ff 	.word	0x003d08ff
 80022c0:	431bde83 	.word	0x431bde83
 80022c4:	10624dd3 	.word	0x10624dd3

080022c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	4608      	mov	r0, r1
 80022d2:	4611      	mov	r1, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	817b      	strh	r3, [r7, #10]
 80022da:	460b      	mov	r3, r1
 80022dc:	813b      	strh	r3, [r7, #8]
 80022de:	4613      	mov	r3, r2
 80022e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022e2:	f7ff fb15 	bl	8001910 <HAL_GetTick>
 80022e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	f040 80d9 	bne.w	80024a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	2319      	movs	r3, #25
 80022fc:	2201      	movs	r2, #1
 80022fe:	496d      	ldr	r1, [pc, #436]	; (80024b4 <HAL_I2C_Mem_Write+0x1ec>)
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 fc7f 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800230c:	2302      	movs	r3, #2
 800230e:	e0cc      	b.n	80024aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_I2C_Mem_Write+0x56>
 800231a:	2302      	movs	r3, #2
 800231c:	e0c5      	b.n	80024aa <HAL_I2C_Mem_Write+0x1e2>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b01      	cmp	r3, #1
 8002332:	d007      	beq.n	8002344 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002352:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2221      	movs	r2, #33	; 0x21
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2240      	movs	r2, #64	; 0x40
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a3a      	ldr	r2, [r7, #32]
 800236e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002374:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4a4d      	ldr	r2, [pc, #308]	; (80024b8 <HAL_I2C_Mem_Write+0x1f0>)
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002386:	88f8      	ldrh	r0, [r7, #6]
 8002388:	893a      	ldrh	r2, [r7, #8]
 800238a:	8979      	ldrh	r1, [r7, #10]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	4603      	mov	r3, r0
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fab6 	bl	8002908 <I2C_RequestMemoryWrite>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d052      	beq.n	8002448 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e081      	b.n	80024aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fd00 	bl	8002db0 <I2C_WaitOnTXEFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00d      	beq.n	80023d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d107      	bne.n	80023ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e06b      	b.n	80024aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b04      	cmp	r3, #4
 800240e:	d11b      	bne.n	8002448 <HAL_I2C_Mem_Write+0x180>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	2b00      	cmp	r3, #0
 8002416:	d017      	beq.n	8002448 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1aa      	bne.n	80023a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 fcec 	bl	8002e32 <I2C_WaitOnBTFFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00d      	beq.n	800247c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	2b04      	cmp	r3, #4
 8002466:	d107      	bne.n	8002478 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002476:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e016      	b.n	80024aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
  }
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	00100002 	.word	0x00100002
 80024b8:	ffff0000 	.word	0xffff0000

080024bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	; 0x30
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	4608      	mov	r0, r1
 80024c6:	4611      	mov	r1, r2
 80024c8:	461a      	mov	r2, r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	817b      	strh	r3, [r7, #10]
 80024ce:	460b      	mov	r3, r1
 80024d0:	813b      	strh	r3, [r7, #8]
 80024d2:	4613      	mov	r3, r2
 80024d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024d6:	f7ff fa1b 	bl	8001910 <HAL_GetTick>
 80024da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	f040 8208 	bne.w	80028fa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	2319      	movs	r3, #25
 80024f0:	2201      	movs	r2, #1
 80024f2:	497b      	ldr	r1, [pc, #492]	; (80026e0 <HAL_I2C_Mem_Read+0x224>)
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 fb85 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002500:	2302      	movs	r3, #2
 8002502:	e1fb      	b.n	80028fc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_I2C_Mem_Read+0x56>
 800250e:	2302      	movs	r3, #2
 8002510:	e1f4      	b.n	80028fc <HAL_I2C_Mem_Read+0x440>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d007      	beq.n	8002538 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002546:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2222      	movs	r2, #34	; 0x22
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2240      	movs	r2, #64	; 0x40
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002562:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002568:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4a5b      	ldr	r2, [pc, #364]	; (80026e4 <HAL_I2C_Mem_Read+0x228>)
 8002578:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800257a:	88f8      	ldrh	r0, [r7, #6]
 800257c:	893a      	ldrh	r2, [r7, #8]
 800257e:	8979      	ldrh	r1, [r7, #10]
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	4603      	mov	r3, r0
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fa52 	bl	8002a34 <I2C_RequestMemoryRead>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e1b0      	b.n	80028fc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d113      	bne.n	80025ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	623b      	str	r3, [r7, #32]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	623b      	str	r3, [r7, #32]
 80025b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	e184      	b.n	80028d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d11b      	bne.n	800260a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e164      	b.n	80028d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	2b02      	cmp	r3, #2
 8002610:	d11b      	bne.n	800264a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002620:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002630:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	e144      	b.n	80028d4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002660:	e138      	b.n	80028d4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002666:	2b03      	cmp	r3, #3
 8002668:	f200 80f1 	bhi.w	800284e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	2b01      	cmp	r3, #1
 8002672:	d123      	bne.n	80026bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002676:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fc1b 	bl	8002eb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e139      	b.n	80028fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026ba:	e10b      	b.n	80028d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d14e      	bne.n	8002762 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ca:	2200      	movs	r2, #0
 80026cc:	4906      	ldr	r1, [pc, #24]	; (80026e8 <HAL_I2C_Mem_Read+0x22c>)
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fa98 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e10e      	b.n	80028fc <HAL_I2C_Mem_Read+0x440>
 80026de:	bf00      	nop
 80026e0:	00100002 	.word	0x00100002
 80026e4:	ffff0000 	.word	0xffff0000
 80026e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002760:	e0b8      	b.n	80028d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002768:	2200      	movs	r2, #0
 800276a:	4966      	ldr	r1, [pc, #408]	; (8002904 <HAL_I2C_Mem_Read+0x448>)
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 fa49 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0bf      	b.n	80028fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691a      	ldr	r2, [r3, #16]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c4:	2200      	movs	r2, #0
 80027c6:	494f      	ldr	r1, [pc, #316]	; (8002904 <HAL_I2C_Mem_Read+0x448>)
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fa1b 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e091      	b.n	80028fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800284c:	e042      	b.n	80028d4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002850:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fb2e 	bl	8002eb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e04c      	b.n	80028fc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d118      	bne.n	80028d4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f47f aec2 	bne.w	8002662 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	e000      	b.n	80028fc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80028fa:	2302      	movs	r3, #2
  }
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3728      	adds	r7, #40	; 0x28
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	00010004 	.word	0x00010004

08002908 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	4608      	mov	r0, r1
 8002912:	4611      	mov	r1, r2
 8002914:	461a      	mov	r2, r3
 8002916:	4603      	mov	r3, r0
 8002918:	817b      	strh	r3, [r7, #10]
 800291a:	460b      	mov	r3, r1
 800291c:	813b      	strh	r3, [r7, #8]
 800291e:	4613      	mov	r3, r2
 8002920:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002930:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	2200      	movs	r2, #0
 800293a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f960 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00d      	beq.n	8002966 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002958:	d103      	bne.n	8002962 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002960:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e05f      	b.n	8002a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002966:	897b      	ldrh	r3, [r7, #10]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002974:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	6a3a      	ldr	r2, [r7, #32]
 800297a:	492d      	ldr	r1, [pc, #180]	; (8002a30 <I2C_RequestMemoryWrite+0x128>)
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f998 	bl	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e04c      	b.n	8002a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a4:	6a39      	ldr	r1, [r7, #32]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fa02 	bl	8002db0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00d      	beq.n	80029ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d107      	bne.n	80029ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e02b      	b.n	8002a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029ce:	88fb      	ldrh	r3, [r7, #6]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d105      	bne.n	80029e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029d4:	893b      	ldrh	r3, [r7, #8]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	611a      	str	r2, [r3, #16]
 80029de:	e021      	b.n	8002a24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029e0:	893b      	ldrh	r3, [r7, #8]
 80029e2:	0a1b      	lsrs	r3, r3, #8
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	6a39      	ldr	r1, [r7, #32]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f9dc 	bl	8002db0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d107      	bne.n	8002a16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e005      	b.n	8002a26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a1a:	893b      	ldrh	r3, [r7, #8]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	00010002 	.word	0x00010002

08002a34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	4608      	mov	r0, r1
 8002a3e:	4611      	mov	r1, r2
 8002a40:	461a      	mov	r2, r3
 8002a42:	4603      	mov	r3, r0
 8002a44:	817b      	strh	r3, [r7, #10]
 8002a46:	460b      	mov	r3, r1
 8002a48:	813b      	strh	r3, [r7, #8]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f8c2 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00d      	beq.n	8002aa2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a94:	d103      	bne.n	8002a9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e0aa      	b.n	8002bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aa2:	897b      	ldrh	r3, [r7, #10]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ab0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	6a3a      	ldr	r2, [r7, #32]
 8002ab6:	4952      	ldr	r1, [pc, #328]	; (8002c00 <I2C_RequestMemoryRead+0x1cc>)
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f8fa 	bl	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e097      	b.n	8002bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae0:	6a39      	ldr	r1, [r7, #32]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f964 	bl	8002db0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00d      	beq.n	8002b0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d107      	bne.n	8002b06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e076      	b.n	8002bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d105      	bne.n	8002b1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b10:	893b      	ldrh	r3, [r7, #8]
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	611a      	str	r2, [r3, #16]
 8002b1a:	e021      	b.n	8002b60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b1c:	893b      	ldrh	r3, [r7, #8]
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2c:	6a39      	ldr	r1, [r7, #32]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f93e 	bl	8002db0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d107      	bne.n	8002b52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e050      	b.n	8002bf8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b56:	893b      	ldrh	r3, [r7, #8]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b62:	6a39      	ldr	r1, [r7, #32]
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f923 	bl	8002db0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00d      	beq.n	8002b8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d107      	bne.n	8002b88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e035      	b.n	8002bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f82b 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00d      	beq.n	8002bd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc2:	d103      	bne.n	8002bcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e013      	b.n	8002bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bd0:	897b      	ldrh	r3, [r7, #10]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	6a3a      	ldr	r2, [r7, #32]
 8002be4:	4906      	ldr	r1, [pc, #24]	; (8002c00 <I2C_RequestMemoryRead+0x1cc>)
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f863 	bl	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	00010002 	.word	0x00010002

08002c04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c14:	e025      	b.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d021      	beq.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1e:	f7fe fe77 	bl	8001910 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d302      	bcc.n	8002c34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d116      	bne.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f043 0220 	orr.w	r2, r3, #32
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e023      	b.n	8002caa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d10d      	bne.n	8002c88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	43da      	mvns	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4013      	ands	r3, r2
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bf0c      	ite	eq
 8002c7e:	2301      	moveq	r3, #1
 8002c80:	2300      	movne	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	e00c      	b.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4013      	ands	r3, r2
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bf0c      	ite	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	2300      	movne	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d0b6      	beq.n	8002c16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cc0:	e051      	b.n	8002d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd0:	d123      	bne.n	8002d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f043 0204 	orr.w	r2, r3, #4
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e046      	b.n	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d20:	d021      	beq.n	8002d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d22:	f7fe fdf5 	bl	8001910 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d302      	bcc.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d116      	bne.n	8002d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f043 0220 	orr.w	r2, r3, #32
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e020      	b.n	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	0c1b      	lsrs	r3, r3, #16
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d10c      	bne.n	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	43da      	mvns	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bf14      	ite	ne
 8002d82:	2301      	movne	r3, #1
 8002d84:	2300      	moveq	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	e00b      	b.n	8002da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	43da      	mvns	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4013      	ands	r3, r2
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf14      	ite	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	2300      	moveq	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d18d      	bne.n	8002cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dbc:	e02d      	b.n	8002e1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f8ce 	bl	8002f60 <I2C_IsAcknowledgeFailed>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e02d      	b.n	8002e2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d021      	beq.n	8002e1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7fe fd9b 	bl	8001910 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d116      	bne.n	8002e1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f043 0220 	orr.w	r2, r3, #32
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e007      	b.n	8002e2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e24:	2b80      	cmp	r3, #128	; 0x80
 8002e26:	d1ca      	bne.n	8002dbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e3e:	e02d      	b.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f88d 	bl	8002f60 <I2C_IsAcknowledgeFailed>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e02d      	b.n	8002eac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e56:	d021      	beq.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e58:	f7fe fd5a 	bl	8001910 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d302      	bcc.n	8002e6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d116      	bne.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e007      	b.n	8002eac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d1ca      	bne.n	8002e40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ec0:	e042      	b.n	8002f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d119      	bne.n	8002f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0210 	mvn.w	r2, #16
 8002ed8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e029      	b.n	8002f58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f04:	f7fe fd04 	bl	8001910 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d302      	bcc.n	8002f1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d116      	bne.n	8002f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e007      	b.n	8002f58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f52:	2b40      	cmp	r3, #64	; 0x40
 8002f54:	d1b5      	bne.n	8002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f76:	d11b      	bne.n	8002fb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f043 0204 	orr.w	r2, r3, #4
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d129      	bne.n	8003028 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0210 	bic.w	r2, r2, #16
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003036:	b480      	push	{r7}
 8003038:	b085      	sub	sp, #20
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b20      	cmp	r3, #32
 800304e:	d12a      	bne.n	80030a6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2224      	movs	r2, #36	; 0x24
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003070:	89fb      	ldrh	r3, [r7, #14]
 8003072:	f023 030f 	bic.w	r3, r3, #15
 8003076:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	b29a      	uxth	r2, r3
 800307c:	89fb      	ldrh	r3, [r7, #14]
 800307e:	4313      	orrs	r3, r2
 8003080:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	89fa      	ldrh	r2, [r7, #14]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
  }
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e267      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d075      	beq.n	80031be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d2:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d00c      	beq.n	80030f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030de:	4b85      	ldr	r3, [pc, #532]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d112      	bne.n	8003110 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ea:	4b82      	ldr	r3, [pc, #520]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f6:	d10b      	bne.n	8003110 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	4b7e      	ldr	r3, [pc, #504]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d05b      	beq.n	80031bc <HAL_RCC_OscConfig+0x108>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d157      	bne.n	80031bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e242      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003118:	d106      	bne.n	8003128 <HAL_RCC_OscConfig+0x74>
 800311a:	4b76      	ldr	r3, [pc, #472]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a75      	ldr	r2, [pc, #468]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e01d      	b.n	8003164 <HAL_RCC_OscConfig+0xb0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0x98>
 8003132:	4b70      	ldr	r3, [pc, #448]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a6f      	ldr	r2, [pc, #444]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b6d      	ldr	r3, [pc, #436]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a6c      	ldr	r2, [pc, #432]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e00b      	b.n	8003164 <HAL_RCC_OscConfig+0xb0>
 800314c:	4b69      	ldr	r3, [pc, #420]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a68      	ldr	r2, [pc, #416]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	4b66      	ldr	r3, [pc, #408]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a65      	ldr	r2, [pc, #404]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800315e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe fbd0 	bl	8001910 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003174:	f7fe fbcc 	bl	8001910 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e207      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b5b      	ldr	r3, [pc, #364]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0xc0>
 8003192:	e014      	b.n	80031be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fe fbbc 	bl	8001910 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800319c:	f7fe fbb8 	bl	8001910 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1f3      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ae:	4b51      	ldr	r3, [pc, #324]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0xe8>
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d063      	beq.n	8003292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ca:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d11c      	bne.n	800321c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031e2:	4b44      	ldr	r3, [pc, #272]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d116      	bne.n	800321c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_RCC_OscConfig+0x152>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d001      	beq.n	8003206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e1c7      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003206:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4937      	ldr	r1, [pc, #220]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	e03a      	b.n	8003292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003224:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <HAL_RCC_OscConfig+0x244>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fe fb71 	bl	8001910 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003232:	f7fe fb6d 	bl	8001910 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1a8      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003250:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4925      	ldr	r1, [pc, #148]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]
 8003264:	e015      	b.n	8003292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_RCC_OscConfig+0x244>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fe fb50 	bl	8001910 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003274:	f7fe fb4c 	bl	8001910 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e187      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d036      	beq.n	800330c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <HAL_RCC_OscConfig+0x248>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ac:	f7fe fb30 	bl	8001910 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fe fb2c 	bl	8001910 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e167      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c6:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80032c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x200>
 80032d2:	e01b      	b.n	800330c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <HAL_RCC_OscConfig+0x248>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032da:	f7fe fb19 	bl	8001910 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	e00e      	b.n	8003300 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e2:	f7fe fb15 	bl	8001910 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d907      	bls.n	8003300 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e150      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
 80032f4:	40023800 	.word	0x40023800
 80032f8:	42470000 	.word	0x42470000
 80032fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003300:	4b88      	ldr	r3, [pc, #544]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1ea      	bne.n	80032e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 8097 	beq.w	8003448 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331e:	4b81      	ldr	r3, [pc, #516]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10f      	bne.n	800334a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	4b7d      	ldr	r3, [pc, #500]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a7c      	ldr	r2, [pc, #496]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
 800333a:	4b7a      	ldr	r3, [pc, #488]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003346:	2301      	movs	r3, #1
 8003348:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334a:	4b77      	ldr	r3, [pc, #476]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d118      	bne.n	8003388 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003356:	4b74      	ldr	r3, [pc, #464]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a73      	ldr	r2, [pc, #460]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 800335c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003362:	f7fe fad5 	bl	8001910 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336a:	f7fe fad1 	bl	8001910 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e10c      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337c:	4b6a      	ldr	r3, [pc, #424]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x2ea>
 8003390:	4b64      	ldr	r3, [pc, #400]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	4a63      	ldr	r2, [pc, #396]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6713      	str	r3, [r2, #112]	; 0x70
 800339c:	e01c      	b.n	80033d8 <HAL_RCC_OscConfig+0x324>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x30c>
 80033a6:	4b5f      	ldr	r3, [pc, #380]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a5e      	ldr	r2, [pc, #376]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033ac:	f043 0304 	orr.w	r3, r3, #4
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
 80033b2:	4b5c      	ldr	r3, [pc, #368]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	4a5b      	ldr	r2, [pc, #364]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6713      	str	r3, [r2, #112]	; 0x70
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0x324>
 80033c0:	4b58      	ldr	r3, [pc, #352]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	4a57      	ldr	r2, [pc, #348]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	6713      	str	r3, [r2, #112]	; 0x70
 80033cc:	4b55      	ldr	r3, [pc, #340]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	4a54      	ldr	r2, [pc, #336]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033d2:	f023 0304 	bic.w	r3, r3, #4
 80033d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d015      	beq.n	800340c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7fe fa96 	bl	8001910 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7fe fa92 	bl	8001910 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0cb      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fe:	4b49      	ldr	r3, [pc, #292]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0ee      	beq.n	80033e8 <HAL_RCC_OscConfig+0x334>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340c:	f7fe fa80 	bl	8001910 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fe fa7c 	bl	8001910 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e0b5      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342a:	4b3e      	ldr	r3, [pc, #248]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1ee      	bne.n	8003414 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343c:	4b39      	ldr	r3, [pc, #228]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	4a38      	ldr	r2, [pc, #224]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003446:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80a1 	beq.w	8003594 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003452:	4b34      	ldr	r3, [pc, #208]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b08      	cmp	r3, #8
 800345c:	d05c      	beq.n	8003518 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d141      	bne.n	80034ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	4b31      	ldr	r3, [pc, #196]	; (800352c <HAL_RCC_OscConfig+0x478>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe fa50 	bl	8001910 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe fa4c 	bl	8001910 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e087      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	4b27      	ldr	r3, [pc, #156]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69da      	ldr	r2, [r3, #28]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	3b01      	subs	r3, #1
 80034ac:	041b      	lsls	r3, r3, #16
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	061b      	lsls	r3, r3, #24
 80034b6:	491b      	ldr	r1, [pc, #108]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_RCC_OscConfig+0x478>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe fa25 	bl	8001910 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ca:	f7fe fa21 	bl	8001910 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e05c      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x416>
 80034e8:	e054      	b.n	8003594 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <HAL_RCC_OscConfig+0x478>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fe fa0e 	bl	8001910 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe fa0a 	bl	8001910 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e045      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x444>
 8003516:	e03d      	b.n	8003594 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d107      	bne.n	8003530 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e038      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
 8003524:	40023800 	.word	0x40023800
 8003528:	40007000 	.word	0x40007000
 800352c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003530:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <HAL_RCC_OscConfig+0x4ec>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d028      	beq.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d121      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	429a      	cmp	r2, r3
 8003558:	d11a      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003560:	4013      	ands	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003566:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003568:	4293      	cmp	r3, r2
 800356a:	d111      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	3b01      	subs	r3, #1
 800357a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d107      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800

080035a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0cc      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b8:	4b68      	ldr	r3, [pc, #416]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d90c      	bls.n	80035e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	4b65      	ldr	r3, [pc, #404]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b63      	ldr	r3, [pc, #396]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0b8      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d020      	beq.n	800362e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f8:	4b59      	ldr	r3, [pc, #356]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a58      	ldr	r2, [pc, #352]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003602:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003610:	4b53      	ldr	r3, [pc, #332]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4a52      	ldr	r2, [pc, #328]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800361a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800361c:	4b50      	ldr	r3, [pc, #320]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	494d      	ldr	r1, [pc, #308]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d044      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b47      	ldr	r3, [pc, #284]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d119      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e07f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d003      	beq.n	8003662 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365e:	2b03      	cmp	r3, #3
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003662:	4b3f      	ldr	r3, [pc, #252]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003672:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e067      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003682:	4b37      	ldr	r3, [pc, #220]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f023 0203 	bic.w	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4934      	ldr	r1, [pc, #208]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	4313      	orrs	r3, r2
 8003692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003694:	f7fe f93c 	bl	8001910 <HAL_GetTick>
 8003698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800369c:	f7fe f938 	bl	8001910 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e04f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 020c 	and.w	r2, r3, #12
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d1eb      	bne.n	800369c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d20c      	bcs.n	80036ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b22      	ldr	r3, [pc, #136]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e032      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f8:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4916      	ldr	r1, [pc, #88]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	490e      	ldr	r1, [pc, #56]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800372a:	f000 f821 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 800372e:	4602      	mov	r2, r0
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	490a      	ldr	r1, [pc, #40]	; (8003764 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	5ccb      	ldrb	r3, [r1, r3]
 800373e:	fa22 f303 	lsr.w	r3, r2, r3
 8003742:	4a09      	ldr	r2, [pc, #36]	; (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003746:	4b09      	ldr	r3, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe f89c 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40023c00 	.word	0x40023c00
 8003760:	40023800 	.word	0x40023800
 8003764:	08006634 	.word	0x08006634
 8003768:	20000018 	.word	0x20000018
 800376c:	2000001c 	.word	0x2000001c

08003770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003774:	b090      	sub	sp, #64	; 0x40
 8003776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	637b      	str	r3, [r7, #52]	; 0x34
 800377c:	2300      	movs	r3, #0
 800377e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003780:	2300      	movs	r3, #0
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003788:	4b59      	ldr	r3, [pc, #356]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	d00d      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003794:	2b08      	cmp	r3, #8
 8003796:	f200 80a1 	bhi.w	80038dc <HAL_RCC_GetSysClockFreq+0x16c>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x34>
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0x3a>
 80037a2:	e09b      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a4:	4b53      	ldr	r3, [pc, #332]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80037a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037a8:	e09b      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037aa:	4b53      	ldr	r3, [pc, #332]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037ae:	e098      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b0:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ba:	4b4d      	ldr	r3, [pc, #308]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d028      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c6:	4b4a      	ldr	r3, [pc, #296]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	099b      	lsrs	r3, r3, #6
 80037cc:	2200      	movs	r2, #0
 80037ce:	623b      	str	r3, [r7, #32]
 80037d0:	627a      	str	r2, [r7, #36]	; 0x24
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037d8:	2100      	movs	r1, #0
 80037da:	4b47      	ldr	r3, [pc, #284]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037dc:	fb03 f201 	mul.w	r2, r3, r1
 80037e0:	2300      	movs	r3, #0
 80037e2:	fb00 f303 	mul.w	r3, r0, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	4a43      	ldr	r2, [pc, #268]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037ea:	fba0 1202 	umull	r1, r2, r0, r2
 80037ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037f0:	460a      	mov	r2, r1
 80037f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80037f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f6:	4413      	add	r3, r2
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fc:	2200      	movs	r2, #0
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	61fa      	str	r2, [r7, #28]
 8003802:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003806:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800380a:	f7fc fd49 	bl	80002a0 <__aeabi_uldivmod>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4613      	mov	r3, r2
 8003814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003816:	e053      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003818:	4b35      	ldr	r3, [pc, #212]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	099b      	lsrs	r3, r3, #6
 800381e:	2200      	movs	r2, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	617a      	str	r2, [r7, #20]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800382a:	f04f 0b00 	mov.w	fp, #0
 800382e:	4652      	mov	r2, sl
 8003830:	465b      	mov	r3, fp
 8003832:	f04f 0000 	mov.w	r0, #0
 8003836:	f04f 0100 	mov.w	r1, #0
 800383a:	0159      	lsls	r1, r3, #5
 800383c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003840:	0150      	lsls	r0, r2, #5
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	ebb2 080a 	subs.w	r8, r2, sl
 800384a:	eb63 090b 	sbc.w	r9, r3, fp
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800385a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800385e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003862:	ebb2 0408 	subs.w	r4, r2, r8
 8003866:	eb63 0509 	sbc.w	r5, r3, r9
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	00eb      	lsls	r3, r5, #3
 8003874:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003878:	00e2      	lsls	r2, r4, #3
 800387a:	4614      	mov	r4, r2
 800387c:	461d      	mov	r5, r3
 800387e:	eb14 030a 	adds.w	r3, r4, sl
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	eb45 030b 	adc.w	r3, r5, fp
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003896:	4629      	mov	r1, r5
 8003898:	028b      	lsls	r3, r1, #10
 800389a:	4621      	mov	r1, r4
 800389c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038a0:	4621      	mov	r1, r4
 80038a2:	028a      	lsls	r2, r1, #10
 80038a4:	4610      	mov	r0, r2
 80038a6:	4619      	mov	r1, r3
 80038a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038aa:	2200      	movs	r2, #0
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	60fa      	str	r2, [r7, #12]
 80038b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038b4:	f7fc fcf4 	bl	80002a0 <__aeabi_uldivmod>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4613      	mov	r3, r2
 80038be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	0c1b      	lsrs	r3, r3, #16
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	3301      	adds	r3, #1
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038da:	e002      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80038de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3740      	adds	r7, #64	; 0x40
 80038e8:	46bd      	mov	sp, r7
 80038ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800
 80038f4:	00f42400 	.word	0x00f42400
 80038f8:	017d7840 	.word	0x017d7840

080038fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <HAL_RCC_GetHCLKFreq+0x14>)
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20000018 	.word	0x20000018

08003914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003918:	f7ff fff0 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 800391c:	4602      	mov	r2, r0
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	0a9b      	lsrs	r3, r3, #10
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	4903      	ldr	r1, [pc, #12]	; (8003938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800392a:	5ccb      	ldrb	r3, [r1, r3]
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40023800 	.word	0x40023800
 8003938:	08006644 	.word	0x08006644

0800393c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003940:	f7ff ffdc 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	0b5b      	lsrs	r3, r3, #13
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4903      	ldr	r1, [pc, #12]	; (8003960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40023800 	.word	0x40023800
 8003960:	08006644 	.word	0x08006644

08003964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e041      	b.n	80039fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd fdca 	bl	8001524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3304      	adds	r3, #4
 80039a0:	4619      	mov	r1, r3
 80039a2:	4610      	mov	r0, r2
 80039a4:	f000 fc7a 	bl	800429c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d001      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e04e      	b.n	8003aba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a23      	ldr	r2, [pc, #140]	; (8003ac8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d022      	beq.n	8003a84 <HAL_TIM_Base_Start_IT+0x80>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a46:	d01d      	beq.n	8003a84 <HAL_TIM_Base_Start_IT+0x80>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <HAL_TIM_Base_Start_IT+0xc8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d018      	beq.n	8003a84 <HAL_TIM_Base_Start_IT+0x80>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d013      	beq.n	8003a84 <HAL_TIM_Base_Start_IT+0x80>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00e      	beq.n	8003a84 <HAL_TIM_Base_Start_IT+0x80>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1b      	ldr	r2, [pc, #108]	; (8003ad8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d009      	beq.n	8003a84 <HAL_TIM_Base_Start_IT+0x80>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a19      	ldr	r2, [pc, #100]	; (8003adc <HAL_TIM_Base_Start_IT+0xd8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d004      	beq.n	8003a84 <HAL_TIM_Base_Start_IT+0x80>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d111      	bne.n	8003aa8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b06      	cmp	r3, #6
 8003a94:	d010      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0201 	orr.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa6:	e007      	b.n	8003ab8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40010000 	.word	0x40010000
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40000c00 	.word	0x40000c00
 8003ad8:	40010400 	.word	0x40010400
 8003adc:	40014000 	.word	0x40014000
 8003ae0:	40001800 	.word	0x40001800

08003ae4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e041      	b.n	8003b7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f839 	bl	8003b82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4619      	mov	r1, r3
 8003b22:	4610      	mov	r0, r2
 8003b24:	f000 fbba 	bl	800429c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d109      	bne.n	8003bbc <HAL_TIM_PWM_Start+0x24>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	e022      	b.n	8003c02 <HAL_TIM_PWM_Start+0x6a>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d109      	bne.n	8003bd6 <HAL_TIM_PWM_Start+0x3e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	bf14      	ite	ne
 8003bce:	2301      	movne	r3, #1
 8003bd0:	2300      	moveq	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	e015      	b.n	8003c02 <HAL_TIM_PWM_Start+0x6a>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d109      	bne.n	8003bf0 <HAL_TIM_PWM_Start+0x58>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e008      	b.n	8003c02 <HAL_TIM_PWM_Start+0x6a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e07c      	b.n	8003d04 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_PWM_Start+0x82>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c18:	e013      	b.n	8003c42 <HAL_TIM_PWM_Start+0xaa>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Start+0x92>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c28:	e00b      	b.n	8003c42 <HAL_TIM_PWM_Start+0xaa>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Start+0xa2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c38:	e003      	b.n	8003c42 <HAL_TIM_PWM_Start+0xaa>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2201      	movs	r2, #1
 8003c48:	6839      	ldr	r1, [r7, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fe10 	bl	8004870 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a2d      	ldr	r2, [pc, #180]	; (8003d0c <HAL_TIM_PWM_Start+0x174>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <HAL_TIM_PWM_Start+0xcc>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <HAL_TIM_PWM_Start+0x178>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d101      	bne.n	8003c68 <HAL_TIM_PWM_Start+0xd0>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <HAL_TIM_PWM_Start+0xd2>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <HAL_TIM_PWM_Start+0x174>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d022      	beq.n	8003cce <HAL_TIM_PWM_Start+0x136>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c90:	d01d      	beq.n	8003cce <HAL_TIM_PWM_Start+0x136>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <HAL_TIM_PWM_Start+0x17c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d018      	beq.n	8003cce <HAL_TIM_PWM_Start+0x136>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1d      	ldr	r2, [pc, #116]	; (8003d18 <HAL_TIM_PWM_Start+0x180>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d013      	beq.n	8003cce <HAL_TIM_PWM_Start+0x136>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <HAL_TIM_PWM_Start+0x184>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00e      	beq.n	8003cce <HAL_TIM_PWM_Start+0x136>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <HAL_TIM_PWM_Start+0x178>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d009      	beq.n	8003cce <HAL_TIM_PWM_Start+0x136>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a18      	ldr	r2, [pc, #96]	; (8003d20 <HAL_TIM_PWM_Start+0x188>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d004      	beq.n	8003cce <HAL_TIM_PWM_Start+0x136>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a16      	ldr	r2, [pc, #88]	; (8003d24 <HAL_TIM_PWM_Start+0x18c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d111      	bne.n	8003cf2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b06      	cmp	r3, #6
 8003cde:	d010      	beq.n	8003d02 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf0:	e007      	b.n	8003d02 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0201 	orr.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	40010400 	.word	0x40010400
 8003d14:	40000400 	.word	0x40000400
 8003d18:	40000800 	.word	0x40000800
 8003d1c:	40000c00 	.word	0x40000c00
 8003d20:	40014000 	.word	0x40014000
 8003d24:	40001800 	.word	0x40001800

08003d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d122      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d11b      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0202 	mvn.w	r2, #2
 8003d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fa77 	bl	800425e <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fa69 	bl	800424a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fa7a 	bl	8004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d122      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d11b      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0204 	mvn.w	r2, #4
 8003da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2202      	movs	r2, #2
 8003dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fa4d 	bl	800425e <HAL_TIM_IC_CaptureCallback>
 8003dc4:	e005      	b.n	8003dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fa3f 	bl	800424a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fa50 	bl	8004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d122      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d11b      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0208 	mvn.w	r2, #8
 8003dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2204      	movs	r2, #4
 8003e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fa23 	bl	800425e <HAL_TIM_IC_CaptureCallback>
 8003e18:	e005      	b.n	8003e26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fa15 	bl	800424a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fa26 	bl	8004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b10      	cmp	r3, #16
 8003e38:	d122      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	d11b      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0210 	mvn.w	r2, #16
 8003e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2208      	movs	r2, #8
 8003e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f9f9 	bl	800425e <HAL_TIM_IC_CaptureCallback>
 8003e6c:	e005      	b.n	8003e7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f9eb 	bl	800424a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f9fc 	bl	8004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10e      	bne.n	8003eac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d107      	bne.n	8003eac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0201 	mvn.w	r2, #1
 8003ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fc fe0a 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	2b80      	cmp	r3, #128	; 0x80
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec4:	2b80      	cmp	r3, #128	; 0x80
 8003ec6:	d107      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fdca 	bl	8004a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d10e      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d107      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f9c1 	bl	8004286 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d10e      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0320 	and.w	r3, r3, #32
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d107      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0220 	mvn.w	r2, #32
 8003f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fd94 	bl	8004a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e0ae      	b.n	80040b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b0c      	cmp	r3, #12
 8003f62:	f200 809f 	bhi.w	80040a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f66:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6c:	08003fa1 	.word	0x08003fa1
 8003f70:	080040a5 	.word	0x080040a5
 8003f74:	080040a5 	.word	0x080040a5
 8003f78:	080040a5 	.word	0x080040a5
 8003f7c:	08003fe1 	.word	0x08003fe1
 8003f80:	080040a5 	.word	0x080040a5
 8003f84:	080040a5 	.word	0x080040a5
 8003f88:	080040a5 	.word	0x080040a5
 8003f8c:	08004023 	.word	0x08004023
 8003f90:	080040a5 	.word	0x080040a5
 8003f94:	080040a5 	.word	0x080040a5
 8003f98:	080040a5 	.word	0x080040a5
 8003f9c:	08004063 	.word	0x08004063
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fa18 	bl	80043dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0208 	orr.w	r2, r2, #8
 8003fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0204 	bic.w	r2, r2, #4
 8003fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6999      	ldr	r1, [r3, #24]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	619a      	str	r2, [r3, #24]
      break;
 8003fde:	e064      	b.n	80040aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fa68 	bl	80044bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6999      	ldr	r1, [r3, #24]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	021a      	lsls	r2, r3, #8
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	619a      	str	r2, [r3, #24]
      break;
 8004020:	e043      	b.n	80040aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fabd 	bl	80045a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69da      	ldr	r2, [r3, #28]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0208 	orr.w	r2, r2, #8
 800403c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0204 	bic.w	r2, r2, #4
 800404c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69d9      	ldr	r1, [r3, #28]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	61da      	str	r2, [r3, #28]
      break;
 8004060:	e023      	b.n	80040aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fb11 	bl	8004690 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69d9      	ldr	r1, [r3, #28]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	021a      	lsls	r2, r3, #8
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	61da      	str	r2, [r3, #28]
      break;
 80040a2:	e002      	b.n	80040aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	75fb      	strb	r3, [r7, #23]
      break;
 80040a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_TIM_ConfigClockSource+0x1c>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e0b4      	b.n	8004242 <HAL_TIM_ConfigClockSource+0x186>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004110:	d03e      	beq.n	8004190 <HAL_TIM_ConfigClockSource+0xd4>
 8004112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004116:	f200 8087 	bhi.w	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 800411a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411e:	f000 8086 	beq.w	800422e <HAL_TIM_ConfigClockSource+0x172>
 8004122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004126:	d87f      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004128:	2b70      	cmp	r3, #112	; 0x70
 800412a:	d01a      	beq.n	8004162 <HAL_TIM_ConfigClockSource+0xa6>
 800412c:	2b70      	cmp	r3, #112	; 0x70
 800412e:	d87b      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004130:	2b60      	cmp	r3, #96	; 0x60
 8004132:	d050      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004134:	2b60      	cmp	r3, #96	; 0x60
 8004136:	d877      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004138:	2b50      	cmp	r3, #80	; 0x50
 800413a:	d03c      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0xfa>
 800413c:	2b50      	cmp	r3, #80	; 0x50
 800413e:	d873      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	d058      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d86f      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004148:	2b30      	cmp	r3, #48	; 0x30
 800414a:	d064      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x15a>
 800414c:	2b30      	cmp	r3, #48	; 0x30
 800414e:	d86b      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004150:	2b20      	cmp	r3, #32
 8004152:	d060      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x15a>
 8004154:	2b20      	cmp	r3, #32
 8004156:	d867      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d05c      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x15a>
 800415c:	2b10      	cmp	r3, #16
 800415e:	d05a      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x15a>
 8004160:	e062      	b.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6899      	ldr	r1, [r3, #8]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f000 fb5d 	bl	8004830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	609a      	str	r2, [r3, #8]
      break;
 800418e:	e04f      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	6899      	ldr	r1, [r3, #8]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f000 fb46 	bl	8004830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041b2:	609a      	str	r2, [r3, #8]
      break;
 80041b4:	e03c      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6859      	ldr	r1, [r3, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f000 faba 	bl	800473c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2150      	movs	r1, #80	; 0x50
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fb13 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 80041d4:	e02c      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6859      	ldr	r1, [r3, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	461a      	mov	r2, r3
 80041e4:	f000 fad9 	bl	800479a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2160      	movs	r1, #96	; 0x60
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fb03 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 80041f4:	e01c      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	6859      	ldr	r1, [r3, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	461a      	mov	r2, r3
 8004204:	f000 fa9a 	bl	800473c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2140      	movs	r1, #64	; 0x40
 800420e:	4618      	mov	r0, r3
 8004210:	f000 faf3 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 8004214:	e00c      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4619      	mov	r1, r3
 8004220:	4610      	mov	r0, r2
 8004222:	f000 faea 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 8004226:	e003      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
      break;
 800422c:	e000      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800422e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004240:	7bfb      	ldrb	r3, [r7, #15]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a40      	ldr	r2, [pc, #256]	; (80043b0 <TIM_Base_SetConfig+0x114>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d013      	beq.n	80042dc <TIM_Base_SetConfig+0x40>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ba:	d00f      	beq.n	80042dc <TIM_Base_SetConfig+0x40>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a3d      	ldr	r2, [pc, #244]	; (80043b4 <TIM_Base_SetConfig+0x118>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00b      	beq.n	80042dc <TIM_Base_SetConfig+0x40>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a3c      	ldr	r2, [pc, #240]	; (80043b8 <TIM_Base_SetConfig+0x11c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d007      	beq.n	80042dc <TIM_Base_SetConfig+0x40>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a3b      	ldr	r2, [pc, #236]	; (80043bc <TIM_Base_SetConfig+0x120>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d003      	beq.n	80042dc <TIM_Base_SetConfig+0x40>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a3a      	ldr	r2, [pc, #232]	; (80043c0 <TIM_Base_SetConfig+0x124>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d108      	bne.n	80042ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2f      	ldr	r2, [pc, #188]	; (80043b0 <TIM_Base_SetConfig+0x114>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d02b      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fc:	d027      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a2c      	ldr	r2, [pc, #176]	; (80043b4 <TIM_Base_SetConfig+0x118>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d023      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a2b      	ldr	r2, [pc, #172]	; (80043b8 <TIM_Base_SetConfig+0x11c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d01f      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a2a      	ldr	r2, [pc, #168]	; (80043bc <TIM_Base_SetConfig+0x120>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d01b      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a29      	ldr	r2, [pc, #164]	; (80043c0 <TIM_Base_SetConfig+0x124>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d017      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a28      	ldr	r2, [pc, #160]	; (80043c4 <TIM_Base_SetConfig+0x128>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d013      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a27      	ldr	r2, [pc, #156]	; (80043c8 <TIM_Base_SetConfig+0x12c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00f      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a26      	ldr	r2, [pc, #152]	; (80043cc <TIM_Base_SetConfig+0x130>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00b      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a25      	ldr	r2, [pc, #148]	; (80043d0 <TIM_Base_SetConfig+0x134>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d007      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a24      	ldr	r2, [pc, #144]	; (80043d4 <TIM_Base_SetConfig+0x138>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d003      	beq.n	800434e <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a23      	ldr	r2, [pc, #140]	; (80043d8 <TIM_Base_SetConfig+0x13c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d108      	bne.n	8004360 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <TIM_Base_SetConfig+0x114>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d003      	beq.n	8004394 <TIM_Base_SetConfig+0xf8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a0c      	ldr	r2, [pc, #48]	; (80043c0 <TIM_Base_SetConfig+0x124>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d103      	bne.n	800439c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	615a      	str	r2, [r3, #20]
}
 80043a2:	bf00      	nop
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40000400 	.word	0x40000400
 80043b8:	40000800 	.word	0x40000800
 80043bc:	40000c00 	.word	0x40000c00
 80043c0:	40010400 	.word	0x40010400
 80043c4:	40014000 	.word	0x40014000
 80043c8:	40014400 	.word	0x40014400
 80043cc:	40014800 	.word	0x40014800
 80043d0:	40001800 	.word	0x40001800
 80043d4:	40001c00 	.word	0x40001c00
 80043d8:	40002000 	.word	0x40002000

080043dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	f023 0201 	bic.w	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0303 	bic.w	r3, r3, #3
 8004412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f023 0302 	bic.w	r3, r3, #2
 8004424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a20      	ldr	r2, [pc, #128]	; (80044b4 <TIM_OC1_SetConfig+0xd8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d003      	beq.n	8004440 <TIM_OC1_SetConfig+0x64>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a1f      	ldr	r2, [pc, #124]	; (80044b8 <TIM_OC1_SetConfig+0xdc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d10c      	bne.n	800445a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f023 0308 	bic.w	r3, r3, #8
 8004446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f023 0304 	bic.w	r3, r3, #4
 8004458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <TIM_OC1_SetConfig+0xd8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d003      	beq.n	800446a <TIM_OC1_SetConfig+0x8e>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <TIM_OC1_SetConfig+0xdc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d111      	bne.n	800448e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	621a      	str	r2, [r3, #32]
}
 80044a8:	bf00      	nop
 80044aa:	371c      	adds	r7, #28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	40010000 	.word	0x40010000
 80044b8:	40010400 	.word	0x40010400

080044bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f023 0210 	bic.w	r2, r3, #16
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f023 0320 	bic.w	r3, r3, #32
 8004506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <TIM_OC2_SetConfig+0xe4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <TIM_OC2_SetConfig+0x68>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a21      	ldr	r2, [pc, #132]	; (80045a4 <TIM_OC2_SetConfig+0xe8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d10d      	bne.n	8004540 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800452a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800453e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a17      	ldr	r2, [pc, #92]	; (80045a0 <TIM_OC2_SetConfig+0xe4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d003      	beq.n	8004550 <TIM_OC2_SetConfig+0x94>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a16      	ldr	r2, [pc, #88]	; (80045a4 <TIM_OC2_SetConfig+0xe8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d113      	bne.n	8004578 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004556:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800455e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	621a      	str	r2, [r3, #32]
}
 8004592:	bf00      	nop
 8004594:	371c      	adds	r7, #28
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40010000 	.word	0x40010000
 80045a4:	40010400 	.word	0x40010400

080045a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a21      	ldr	r2, [pc, #132]	; (8004688 <TIM_OC3_SetConfig+0xe0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d003      	beq.n	800460e <TIM_OC3_SetConfig+0x66>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a20      	ldr	r2, [pc, #128]	; (800468c <TIM_OC3_SetConfig+0xe4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d10d      	bne.n	800462a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004614:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a16      	ldr	r2, [pc, #88]	; (8004688 <TIM_OC3_SetConfig+0xe0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d003      	beq.n	800463a <TIM_OC3_SetConfig+0x92>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a15      	ldr	r2, [pc, #84]	; (800468c <TIM_OC3_SetConfig+0xe4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d113      	bne.n	8004662 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	621a      	str	r2, [r3, #32]
}
 800467c:	bf00      	nop
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	40010000 	.word	0x40010000
 800468c:	40010400 	.word	0x40010400

08004690 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	031b      	lsls	r3, r3, #12
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a12      	ldr	r2, [pc, #72]	; (8004734 <TIM_OC4_SetConfig+0xa4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_OC4_SetConfig+0x68>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a11      	ldr	r2, [pc, #68]	; (8004738 <TIM_OC4_SetConfig+0xa8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d109      	bne.n	800470c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	019b      	lsls	r3, r3, #6
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40010000 	.word	0x40010000
 8004738:	40010400 	.word	0x40010400

0800473c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	f023 0201 	bic.w	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f023 030a 	bic.w	r3, r3, #10
 8004778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800479a:	b480      	push	{r7}
 800479c:	b087      	sub	sp, #28
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f023 0210 	bic.w	r2, r3, #16
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	031b      	lsls	r3, r3, #12
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	f043 0307 	orr.w	r3, r3, #7
 800481c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	609a      	str	r2, [r3, #8]
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800484a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	021a      	lsls	r2, r3, #8
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	431a      	orrs	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4313      	orrs	r3, r2
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	609a      	str	r2, [r3, #8]
}
 8004864:	bf00      	nop
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	2201      	movs	r2, #1
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a1a      	ldr	r2, [r3, #32]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	43db      	mvns	r3, r3
 8004892:	401a      	ands	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a1a      	ldr	r2, [r3, #32]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	621a      	str	r2, [r3, #32]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e05a      	b.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a21      	ldr	r2, [pc, #132]	; (8004998 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d022      	beq.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004920:	d01d      	beq.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1d      	ldr	r2, [pc, #116]	; (800499c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d018      	beq.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1b      	ldr	r2, [pc, #108]	; (80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1a      	ldr	r2, [pc, #104]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00e      	beq.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a18      	ldr	r2, [pc, #96]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d009      	beq.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a17      	ldr	r2, [pc, #92]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d004      	beq.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d10c      	bne.n	8004978 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004964:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	4313      	orrs	r3, r2
 800496e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40010000 	.word	0x40010000
 800499c:	40000400 	.word	0x40000400
 80049a0:	40000800 	.word	0x40000800
 80049a4:	40000c00 	.word	0x40000c00
 80049a8:	40010400 	.word	0x40010400
 80049ac:	40014000 	.word	0x40014000
 80049b0:	40001800 	.word	0x40001800

080049b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e03d      	b.n	8004a4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e03f      	b.n	8004b12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fc fdde 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2224      	movs	r2, #36	; 0x24
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fdab 	bl	8005620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004af8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b08a      	sub	sp, #40	; 0x28
 8004b1e:	af02      	add	r7, sp, #8
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	603b      	str	r3, [r7, #0]
 8004b26:	4613      	mov	r3, r2
 8004b28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d17c      	bne.n	8004c34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <HAL_UART_Transmit+0x2c>
 8004b40:	88fb      	ldrh	r3, [r7, #6]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e075      	b.n	8004c36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_UART_Transmit+0x3e>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e06e      	b.n	8004c36 <HAL_UART_Transmit+0x11c>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2221      	movs	r2, #33	; 0x21
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b6e:	f7fc fecf 	bl	8001910 <HAL_GetTick>
 8004b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	88fa      	ldrh	r2, [r7, #6]
 8004b7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b88:	d108      	bne.n	8004b9c <HAL_UART_Transmit+0x82>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d104      	bne.n	8004b9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	e003      	b.n	8004ba4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004bac:	e02a      	b.n	8004c04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2180      	movs	r1, #128	; 0x80
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 fb29 	bl	8005210 <UART_WaitOnFlagUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e036      	b.n	8004c36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	3302      	adds	r3, #2
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	e007      	b.n	8004bf6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	781a      	ldrb	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1cf      	bne.n	8004bae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2200      	movs	r2, #0
 8004c16:	2140      	movs	r1, #64	; 0x40
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 faf9 	bl	8005210 <UART_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e006      	b.n	8004c36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e000      	b.n	8004c36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3720      	adds	r7, #32
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b085      	sub	sp, #20
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d130      	bne.n	8004cba <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_UART_Transmit_IT+0x26>
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e029      	b.n	8004cbc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_UART_Transmit_IT+0x38>
 8004c72:	2302      	movs	r3, #2
 8004c74:	e022      	b.n	8004cbc <HAL_UART_Transmit_IT+0x7e>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	88fa      	ldrh	r2, [r7, #6]
 8004c88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	88fa      	ldrh	r2, [r7, #6]
 8004c8e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2221      	movs	r2, #33	; 0x21
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cb4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e000      	b.n	8004cbc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004cba:	2302      	movs	r3, #2
  }
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b0ba      	sub	sp, #232	; 0xe8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10f      	bne.n	8004d2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_UART_IRQHandler+0x66>
 8004d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fbbf 	bl	80054aa <UART_Receive_IT>
      return;
 8004d2c:	e256      	b.n	80051dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80de 	beq.w	8004ef4 <HAL_UART_IRQHandler+0x22c>
 8004d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 80d1 	beq.w	8004ef4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_UART_IRQHandler+0xae>
 8004d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f043 0201 	orr.w	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <HAL_UART_IRQHandler+0xd2>
 8004d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f043 0202 	orr.w	r2, r3, #2
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00b      	beq.n	8004dbe <HAL_UART_IRQHandler+0xf6>
 8004da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f043 0204 	orr.w	r2, r3, #4
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d011      	beq.n	8004dee <HAL_UART_IRQHandler+0x126>
 8004dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d105      	bne.n	8004de2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f043 0208 	orr.w	r2, r3, #8
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 81ed 	beq.w	80051d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_UART_IRQHandler+0x14e>
 8004e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fb4a 	bl	80054aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	bf0c      	ite	eq
 8004e24:	2301      	moveq	r3, #1
 8004e26:	2300      	movne	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d103      	bne.n	8004e42 <HAL_UART_IRQHandler+0x17a>
 8004e3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d04f      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fa52 	bl	80052ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	d141      	bne.n	8004eda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3314      	adds	r3, #20
 8004e5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3314      	adds	r3, #20
 8004e7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1d9      	bne.n	8004e56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d013      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	4a7d      	ldr	r2, [pc, #500]	; (80050a4 <HAL_UART_IRQHandler+0x3dc>)
 8004eb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fc fedb 	bl	8001c72 <HAL_DMA_Abort_IT>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d016      	beq.n	8004ef0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed0:	e00e      	b.n	8004ef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f986 	bl	80051e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed8:	e00a      	b.n	8004ef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f982 	bl	80051e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee0:	e006      	b.n	8004ef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f97e 	bl	80051e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004eee:	e170      	b.n	80051d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef0:	bf00      	nop
    return;
 8004ef2:	e16e      	b.n	80051d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	f040 814a 	bne.w	8005192 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 8143 	beq.w	8005192 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 813c 	beq.w	8005192 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60bb      	str	r3, [r7, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b40      	cmp	r3, #64	; 0x40
 8004f3c:	f040 80b4 	bne.w	80050a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 8140 	beq.w	80051d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	f080 8139 	bcs.w	80051d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f76:	f000 8088 	beq.w	800508a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004fa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004fb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1d9      	bne.n	8004f7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3314      	adds	r3, #20
 8004fcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3314      	adds	r3, #20
 8004fe6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ff2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e1      	bne.n	8004fc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3314      	adds	r3, #20
 8005008:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005018:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3314      	adds	r3, #20
 8005022:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005026:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005028:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800502c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e3      	bne.n	8005002 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	330c      	adds	r3, #12
 800504e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505a:	f023 0310 	bic.w	r3, r3, #16
 800505e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	330c      	adds	r3, #12
 8005068:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800506c:	65ba      	str	r2, [r7, #88]	; 0x58
 800506e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005070:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005072:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005074:	e841 2300 	strex	r3, r2, [r1]
 8005078:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800507a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e3      	bne.n	8005048 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	4618      	mov	r0, r3
 8005086:	f7fc fd84 	bl	8001b92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005092:	b29b      	uxth	r3, r3
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	b29b      	uxth	r3, r3
 8005098:	4619      	mov	r1, r3
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f8ac 	bl	80051f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050a0:	e099      	b.n	80051d6 <HAL_UART_IRQHandler+0x50e>
 80050a2:	bf00      	nop
 80050a4:	080053b3 	.word	0x080053b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 808b 	beq.w	80051da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80050c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8086 	beq.w	80051da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	330c      	adds	r3, #12
 80050d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	330c      	adds	r3, #12
 80050ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050f2:	647a      	str	r2, [r7, #68]	; 0x44
 80050f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e3      	bne.n	80050ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3314      	adds	r3, #20
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	623b      	str	r3, [r7, #32]
   return(result);
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	f023 0301 	bic.w	r3, r3, #1
 800511c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3314      	adds	r3, #20
 8005126:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800512a:	633a      	str	r2, [r7, #48]	; 0x30
 800512c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e3      	bne.n	8005106 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	330c      	adds	r3, #12
 8005152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	e853 3f00 	ldrex	r3, [r3]
 800515a:	60fb      	str	r3, [r7, #12]
   return(result);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0310 	bic.w	r3, r3, #16
 8005162:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005170:	61fa      	str	r2, [r7, #28]
 8005172:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005174:	69b9      	ldr	r1, [r7, #24]
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	e841 2300 	strex	r3, r2, [r1]
 800517c:	617b      	str	r3, [r7, #20]
   return(result);
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e3      	bne.n	800514c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005184:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005188:	4619      	mov	r1, r3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f834 	bl	80051f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005190:	e023      	b.n	80051da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_UART_IRQHandler+0x4ea>
 800519e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f915 	bl	80053da <UART_Transmit_IT>
    return;
 80051b0:	e014      	b.n	80051dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00e      	beq.n	80051dc <HAL_UART_IRQHandler+0x514>
 80051be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f955 	bl	800547a <UART_EndTransmit_IT>
    return;
 80051d0:	e004      	b.n	80051dc <HAL_UART_IRQHandler+0x514>
    return;
 80051d2:	bf00      	nop
 80051d4:	e002      	b.n	80051dc <HAL_UART_IRQHandler+0x514>
      return;
 80051d6:	bf00      	nop
 80051d8:	e000      	b.n	80051dc <HAL_UART_IRQHandler+0x514>
      return;
 80051da:	bf00      	nop
  }
}
 80051dc:	37e8      	adds	r7, #232	; 0xe8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop

080051e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b090      	sub	sp, #64	; 0x40
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005220:	e050      	b.n	80052c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005228:	d04c      	beq.n	80052c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800522a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <UART_WaitOnFlagUntilTimeout+0x30>
 8005230:	f7fc fb6e 	bl	8001910 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800523c:	429a      	cmp	r2, r3
 800523e:	d241      	bcs.n	80052c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	330c      	adds	r3, #12
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	330c      	adds	r3, #12
 800525e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005260:	637a      	str	r2, [r7, #52]	; 0x34
 8005262:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800526e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e5      	bne.n	8005240 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3314      	adds	r3, #20
 800527a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	613b      	str	r3, [r7, #16]
   return(result);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f023 0301 	bic.w	r3, r3, #1
 800528a:	63bb      	str	r3, [r7, #56]	; 0x38
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3314      	adds	r3, #20
 8005292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005294:	623a      	str	r2, [r7, #32]
 8005296:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005298:	69f9      	ldr	r1, [r7, #28]
 800529a:	6a3a      	ldr	r2, [r7, #32]
 800529c:	e841 2300 	strex	r3, r2, [r1]
 80052a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e5      	bne.n	8005274 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e00f      	b.n	80052e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4013      	ands	r3, r2
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	bf0c      	ite	eq
 80052d4:	2301      	moveq	r3, #1
 80052d6:	2300      	movne	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d09f      	beq.n	8005222 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3740      	adds	r7, #64	; 0x40
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b095      	sub	sp, #84	; 0x54
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	330c      	adds	r3, #12
 80052fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800530a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005314:	643a      	str	r2, [r7, #64]	; 0x40
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800531a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800531c:	e841 2300 	strex	r3, r2, [r1]
 8005320:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e5      	bne.n	80052f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3314      	adds	r3, #20
 800532e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	e853 3f00 	ldrex	r3, [r3]
 8005336:	61fb      	str	r3, [r7, #28]
   return(result);
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f023 0301 	bic.w	r3, r3, #1
 800533e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3314      	adds	r3, #20
 8005346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005348:	62fa      	str	r2, [r7, #44]	; 0x2c
 800534a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800534e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005350:	e841 2300 	strex	r3, r2, [r1]
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e5      	bne.n	8005328 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	2b01      	cmp	r3, #1
 8005362:	d119      	bne.n	8005398 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	60bb      	str	r3, [r7, #8]
   return(result);
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f023 0310 	bic.w	r3, r3, #16
 800537a:	647b      	str	r3, [r7, #68]	; 0x44
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005384:	61ba      	str	r2, [r7, #24]
 8005386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005388:	6979      	ldr	r1, [r7, #20]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	e841 2300 	strex	r3, r2, [r1]
 8005390:	613b      	str	r3, [r7, #16]
   return(result);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e5      	bne.n	8005364 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053a6:	bf00      	nop
 80053a8:	3754      	adds	r7, #84	; 0x54
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7ff ff09 	bl	80051e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b21      	cmp	r3, #33	; 0x21
 80053ec:	d13e      	bne.n	800546c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f6:	d114      	bne.n	8005422 <UART_Transmit_IT+0x48>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d110      	bne.n	8005422 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005414:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	1c9a      	adds	r2, r3, #2
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	621a      	str	r2, [r3, #32]
 8005420:	e008      	b.n	8005434 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	1c59      	adds	r1, r3, #1
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6211      	str	r1, [r2, #32]
 800542c:	781a      	ldrb	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29b      	uxth	r3, r3
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	4619      	mov	r1, r3
 8005442:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10f      	bne.n	8005468 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005456:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005466:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	e000      	b.n	800546e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800546c:	2302      	movs	r3, #2
  }
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005490:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2220      	movs	r2, #32
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fb fa54 	bl	8000948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b08c      	sub	sp, #48	; 0x30
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b22      	cmp	r3, #34	; 0x22
 80054bc:	f040 80ab 	bne.w	8005616 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c8:	d117      	bne.n	80054fa <UART_Receive_IT+0x50>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d113      	bne.n	80054fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f2:	1c9a      	adds	r2, r3, #2
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	629a      	str	r2, [r3, #40]	; 0x28
 80054f8:	e026      	b.n	8005548 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005500:	2300      	movs	r3, #0
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550c:	d007      	beq.n	800551e <UART_Receive_IT+0x74>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10a      	bne.n	800552c <UART_Receive_IT+0x82>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	e008      	b.n	800553e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005538:	b2da      	uxtb	r2, r3
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29b      	uxth	r3, r3
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	4619      	mov	r1, r3
 8005556:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005558:	2b00      	cmp	r3, #0
 800555a:	d15a      	bne.n	8005612 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0220 	bic.w	r2, r2, #32
 800556a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800557a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0201 	bic.w	r2, r2, #1
 800558a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005598:	2b01      	cmp	r3, #1
 800559a:	d135      	bne.n	8005608 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	330c      	adds	r3, #12
 80055a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	613b      	str	r3, [r7, #16]
   return(result);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f023 0310 	bic.w	r3, r3, #16
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	330c      	adds	r3, #12
 80055c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c2:	623a      	str	r2, [r7, #32]
 80055c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	69f9      	ldr	r1, [r7, #28]
 80055c8:	6a3a      	ldr	r2, [r7, #32]
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e5      	bne.n	80055a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b10      	cmp	r3, #16
 80055e2:	d10a      	bne.n	80055fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055e4:	2300      	movs	r3, #0
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff fdf9 	bl	80051f8 <HAL_UARTEx_RxEventCallback>
 8005606:	e002      	b.n	800560e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7fb f9d7 	bl	80009bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	e002      	b.n	8005618 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	e000      	b.n	8005618 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005616:	2302      	movs	r3, #2
  }
}
 8005618:	4618      	mov	r0, r3
 800561a:	3730      	adds	r7, #48	; 0x30
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005624:	b0c0      	sub	sp, #256	; 0x100
 8005626:	af00      	add	r7, sp, #0
 8005628:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563c:	68d9      	ldr	r1, [r3, #12]
 800563e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	ea40 0301 	orr.w	r3, r0, r1
 8005648:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800564a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	431a      	orrs	r2, r3
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	431a      	orrs	r2, r3
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005678:	f021 010c 	bic.w	r1, r1, #12
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005686:	430b      	orrs	r3, r1
 8005688:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800568a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569a:	6999      	ldr	r1, [r3, #24]
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	ea40 0301 	orr.w	r3, r0, r1
 80056a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4b8f      	ldr	r3, [pc, #572]	; (80058ec <UART_SetConfig+0x2cc>)
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d005      	beq.n	80056c0 <UART_SetConfig+0xa0>
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	4b8d      	ldr	r3, [pc, #564]	; (80058f0 <UART_SetConfig+0x2d0>)
 80056bc:	429a      	cmp	r2, r3
 80056be:	d104      	bne.n	80056ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056c0:	f7fe f93c 	bl	800393c <HAL_RCC_GetPCLK2Freq>
 80056c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056c8:	e003      	b.n	80056d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056ca:	f7fe f923 	bl	8003914 <HAL_RCC_GetPCLK1Freq>
 80056ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056dc:	f040 810c 	bne.w	80058f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056e4:	2200      	movs	r2, #0
 80056e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056f2:	4622      	mov	r2, r4
 80056f4:	462b      	mov	r3, r5
 80056f6:	1891      	adds	r1, r2, r2
 80056f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80056fa:	415b      	adcs	r3, r3
 80056fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005702:	4621      	mov	r1, r4
 8005704:	eb12 0801 	adds.w	r8, r2, r1
 8005708:	4629      	mov	r1, r5
 800570a:	eb43 0901 	adc.w	r9, r3, r1
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800571a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800571e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005722:	4690      	mov	r8, r2
 8005724:	4699      	mov	r9, r3
 8005726:	4623      	mov	r3, r4
 8005728:	eb18 0303 	adds.w	r3, r8, r3
 800572c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005730:	462b      	mov	r3, r5
 8005732:	eb49 0303 	adc.w	r3, r9, r3
 8005736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800573a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005746:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800574a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800574e:	460b      	mov	r3, r1
 8005750:	18db      	adds	r3, r3, r3
 8005752:	653b      	str	r3, [r7, #80]	; 0x50
 8005754:	4613      	mov	r3, r2
 8005756:	eb42 0303 	adc.w	r3, r2, r3
 800575a:	657b      	str	r3, [r7, #84]	; 0x54
 800575c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005760:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005764:	f7fa fd9c 	bl	80002a0 <__aeabi_uldivmod>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4b61      	ldr	r3, [pc, #388]	; (80058f4 <UART_SetConfig+0x2d4>)
 800576e:	fba3 2302 	umull	r2, r3, r3, r2
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	011c      	lsls	r4, r3, #4
 8005776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800577a:	2200      	movs	r2, #0
 800577c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005780:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005784:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005788:	4642      	mov	r2, r8
 800578a:	464b      	mov	r3, r9
 800578c:	1891      	adds	r1, r2, r2
 800578e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005790:	415b      	adcs	r3, r3
 8005792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005794:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005798:	4641      	mov	r1, r8
 800579a:	eb12 0a01 	adds.w	sl, r2, r1
 800579e:	4649      	mov	r1, r9
 80057a0:	eb43 0b01 	adc.w	fp, r3, r1
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057b8:	4692      	mov	sl, r2
 80057ba:	469b      	mov	fp, r3
 80057bc:	4643      	mov	r3, r8
 80057be:	eb1a 0303 	adds.w	r3, sl, r3
 80057c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057c6:	464b      	mov	r3, r9
 80057c8:	eb4b 0303 	adc.w	r3, fp, r3
 80057cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057e4:	460b      	mov	r3, r1
 80057e6:	18db      	adds	r3, r3, r3
 80057e8:	643b      	str	r3, [r7, #64]	; 0x40
 80057ea:	4613      	mov	r3, r2
 80057ec:	eb42 0303 	adc.w	r3, r2, r3
 80057f0:	647b      	str	r3, [r7, #68]	; 0x44
 80057f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057fa:	f7fa fd51 	bl	80002a0 <__aeabi_uldivmod>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4611      	mov	r1, r2
 8005804:	4b3b      	ldr	r3, [pc, #236]	; (80058f4 <UART_SetConfig+0x2d4>)
 8005806:	fba3 2301 	umull	r2, r3, r3, r1
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	2264      	movs	r2, #100	; 0x64
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	1acb      	subs	r3, r1, r3
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800581a:	4b36      	ldr	r3, [pc, #216]	; (80058f4 <UART_SetConfig+0x2d4>)
 800581c:	fba3 2302 	umull	r2, r3, r3, r2
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005828:	441c      	add	r4, r3
 800582a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800582e:	2200      	movs	r2, #0
 8005830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005834:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005838:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800583c:	4642      	mov	r2, r8
 800583e:	464b      	mov	r3, r9
 8005840:	1891      	adds	r1, r2, r2
 8005842:	63b9      	str	r1, [r7, #56]	; 0x38
 8005844:	415b      	adcs	r3, r3
 8005846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005848:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800584c:	4641      	mov	r1, r8
 800584e:	1851      	adds	r1, r2, r1
 8005850:	6339      	str	r1, [r7, #48]	; 0x30
 8005852:	4649      	mov	r1, r9
 8005854:	414b      	adcs	r3, r1
 8005856:	637b      	str	r3, [r7, #52]	; 0x34
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005864:	4659      	mov	r1, fp
 8005866:	00cb      	lsls	r3, r1, #3
 8005868:	4651      	mov	r1, sl
 800586a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800586e:	4651      	mov	r1, sl
 8005870:	00ca      	lsls	r2, r1, #3
 8005872:	4610      	mov	r0, r2
 8005874:	4619      	mov	r1, r3
 8005876:	4603      	mov	r3, r0
 8005878:	4642      	mov	r2, r8
 800587a:	189b      	adds	r3, r3, r2
 800587c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005880:	464b      	mov	r3, r9
 8005882:	460a      	mov	r2, r1
 8005884:	eb42 0303 	adc.w	r3, r2, r3
 8005888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005898:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800589c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058a0:	460b      	mov	r3, r1
 80058a2:	18db      	adds	r3, r3, r3
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a6:	4613      	mov	r3, r2
 80058a8:	eb42 0303 	adc.w	r3, r2, r3
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058b6:	f7fa fcf3 	bl	80002a0 <__aeabi_uldivmod>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <UART_SetConfig+0x2d4>)
 80058c0:	fba3 1302 	umull	r1, r3, r3, r2
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	2164      	movs	r1, #100	; 0x64
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	3332      	adds	r3, #50	; 0x32
 80058d2:	4a08      	ldr	r2, [pc, #32]	; (80058f4 <UART_SetConfig+0x2d4>)
 80058d4:	fba2 2303 	umull	r2, r3, r2, r3
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	f003 0207 	and.w	r2, r3, #7
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4422      	add	r2, r4
 80058e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058e8:	e105      	b.n	8005af6 <UART_SetConfig+0x4d6>
 80058ea:	bf00      	nop
 80058ec:	40011000 	.word	0x40011000
 80058f0:	40011400 	.word	0x40011400
 80058f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058fc:	2200      	movs	r2, #0
 80058fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005902:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005906:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800590a:	4642      	mov	r2, r8
 800590c:	464b      	mov	r3, r9
 800590e:	1891      	adds	r1, r2, r2
 8005910:	6239      	str	r1, [r7, #32]
 8005912:	415b      	adcs	r3, r3
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
 8005916:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800591a:	4641      	mov	r1, r8
 800591c:	1854      	adds	r4, r2, r1
 800591e:	4649      	mov	r1, r9
 8005920:	eb43 0501 	adc.w	r5, r3, r1
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	00eb      	lsls	r3, r5, #3
 800592e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005932:	00e2      	lsls	r2, r4, #3
 8005934:	4614      	mov	r4, r2
 8005936:	461d      	mov	r5, r3
 8005938:	4643      	mov	r3, r8
 800593a:	18e3      	adds	r3, r4, r3
 800593c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005940:	464b      	mov	r3, r9
 8005942:	eb45 0303 	adc.w	r3, r5, r3
 8005946:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800594a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005956:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	f04f 0300 	mov.w	r3, #0
 8005962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005966:	4629      	mov	r1, r5
 8005968:	008b      	lsls	r3, r1, #2
 800596a:	4621      	mov	r1, r4
 800596c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005970:	4621      	mov	r1, r4
 8005972:	008a      	lsls	r2, r1, #2
 8005974:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005978:	f7fa fc92 	bl	80002a0 <__aeabi_uldivmod>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4b60      	ldr	r3, [pc, #384]	; (8005b04 <UART_SetConfig+0x4e4>)
 8005982:	fba3 2302 	umull	r2, r3, r3, r2
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	011c      	lsls	r4, r3, #4
 800598a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800598e:	2200      	movs	r2, #0
 8005990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005994:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005998:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800599c:	4642      	mov	r2, r8
 800599e:	464b      	mov	r3, r9
 80059a0:	1891      	adds	r1, r2, r2
 80059a2:	61b9      	str	r1, [r7, #24]
 80059a4:	415b      	adcs	r3, r3
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ac:	4641      	mov	r1, r8
 80059ae:	1851      	adds	r1, r2, r1
 80059b0:	6139      	str	r1, [r7, #16]
 80059b2:	4649      	mov	r1, r9
 80059b4:	414b      	adcs	r3, r1
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059c4:	4659      	mov	r1, fp
 80059c6:	00cb      	lsls	r3, r1, #3
 80059c8:	4651      	mov	r1, sl
 80059ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ce:	4651      	mov	r1, sl
 80059d0:	00ca      	lsls	r2, r1, #3
 80059d2:	4610      	mov	r0, r2
 80059d4:	4619      	mov	r1, r3
 80059d6:	4603      	mov	r3, r0
 80059d8:	4642      	mov	r2, r8
 80059da:	189b      	adds	r3, r3, r2
 80059dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059e0:	464b      	mov	r3, r9
 80059e2:	460a      	mov	r2, r1
 80059e4:	eb42 0303 	adc.w	r3, r2, r3
 80059e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80059f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a04:	4649      	mov	r1, r9
 8005a06:	008b      	lsls	r3, r1, #2
 8005a08:	4641      	mov	r1, r8
 8005a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a0e:	4641      	mov	r1, r8
 8005a10:	008a      	lsls	r2, r1, #2
 8005a12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a16:	f7fa fc43 	bl	80002a0 <__aeabi_uldivmod>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4b39      	ldr	r3, [pc, #228]	; (8005b04 <UART_SetConfig+0x4e4>)
 8005a20:	fba3 1302 	umull	r1, r3, r3, r2
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	2164      	movs	r1, #100	; 0x64
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	3332      	adds	r3, #50	; 0x32
 8005a32:	4a34      	ldr	r2, [pc, #208]	; (8005b04 <UART_SetConfig+0x4e4>)
 8005a34:	fba2 2303 	umull	r2, r3, r2, r3
 8005a38:	095b      	lsrs	r3, r3, #5
 8005a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a3e:	441c      	add	r4, r3
 8005a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a44:	2200      	movs	r2, #0
 8005a46:	673b      	str	r3, [r7, #112]	; 0x70
 8005a48:	677a      	str	r2, [r7, #116]	; 0x74
 8005a4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a4e:	4642      	mov	r2, r8
 8005a50:	464b      	mov	r3, r9
 8005a52:	1891      	adds	r1, r2, r2
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	415b      	adcs	r3, r3
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a5e:	4641      	mov	r1, r8
 8005a60:	1851      	adds	r1, r2, r1
 8005a62:	6039      	str	r1, [r7, #0]
 8005a64:	4649      	mov	r1, r9
 8005a66:	414b      	adcs	r3, r1
 8005a68:	607b      	str	r3, [r7, #4]
 8005a6a:	f04f 0200 	mov.w	r2, #0
 8005a6e:	f04f 0300 	mov.w	r3, #0
 8005a72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a76:	4659      	mov	r1, fp
 8005a78:	00cb      	lsls	r3, r1, #3
 8005a7a:	4651      	mov	r1, sl
 8005a7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a80:	4651      	mov	r1, sl
 8005a82:	00ca      	lsls	r2, r1, #3
 8005a84:	4610      	mov	r0, r2
 8005a86:	4619      	mov	r1, r3
 8005a88:	4603      	mov	r3, r0
 8005a8a:	4642      	mov	r2, r8
 8005a8c:	189b      	adds	r3, r3, r2
 8005a8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a90:	464b      	mov	r3, r9
 8005a92:	460a      	mov	r2, r1
 8005a94:	eb42 0303 	adc.w	r3, r2, r3
 8005a98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	663b      	str	r3, [r7, #96]	; 0x60
 8005aa4:	667a      	str	r2, [r7, #100]	; 0x64
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	008b      	lsls	r3, r1, #2
 8005ab6:	4641      	mov	r1, r8
 8005ab8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005abc:	4641      	mov	r1, r8
 8005abe:	008a      	lsls	r2, r1, #2
 8005ac0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ac4:	f7fa fbec 	bl	80002a0 <__aeabi_uldivmod>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <UART_SetConfig+0x4e4>)
 8005ace:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	2164      	movs	r1, #100	; 0x64
 8005ad6:	fb01 f303 	mul.w	r3, r1, r3
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	3332      	adds	r3, #50	; 0x32
 8005ae0:	4a08      	ldr	r2, [pc, #32]	; (8005b04 <UART_SetConfig+0x4e4>)
 8005ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	f003 020f 	and.w	r2, r3, #15
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4422      	add	r2, r4
 8005af4:	609a      	str	r2, [r3, #8]
}
 8005af6:	bf00      	nop
 8005af8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005afc:	46bd      	mov	sp, r7
 8005afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b02:	bf00      	nop
 8005b04:	51eb851f 	.word	0x51eb851f

08005b08 <__errno>:
 8005b08:	4b01      	ldr	r3, [pc, #4]	; (8005b10 <__errno+0x8>)
 8005b0a:	6818      	ldr	r0, [r3, #0]
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20000024 	.word	0x20000024

08005b14 <__libc_init_array>:
 8005b14:	b570      	push	{r4, r5, r6, lr}
 8005b16:	4d0d      	ldr	r5, [pc, #52]	; (8005b4c <__libc_init_array+0x38>)
 8005b18:	4c0d      	ldr	r4, [pc, #52]	; (8005b50 <__libc_init_array+0x3c>)
 8005b1a:	1b64      	subs	r4, r4, r5
 8005b1c:	10a4      	asrs	r4, r4, #2
 8005b1e:	2600      	movs	r6, #0
 8005b20:	42a6      	cmp	r6, r4
 8005b22:	d109      	bne.n	8005b38 <__libc_init_array+0x24>
 8005b24:	4d0b      	ldr	r5, [pc, #44]	; (8005b54 <__libc_init_array+0x40>)
 8005b26:	4c0c      	ldr	r4, [pc, #48]	; (8005b58 <__libc_init_array+0x44>)
 8005b28:	f000 fc8e 	bl	8006448 <_init>
 8005b2c:	1b64      	subs	r4, r4, r5
 8005b2e:	10a4      	asrs	r4, r4, #2
 8005b30:	2600      	movs	r6, #0
 8005b32:	42a6      	cmp	r6, r4
 8005b34:	d105      	bne.n	8005b42 <__libc_init_array+0x2e>
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3c:	4798      	blx	r3
 8005b3e:	3601      	adds	r6, #1
 8005b40:	e7ee      	b.n	8005b20 <__libc_init_array+0xc>
 8005b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b46:	4798      	blx	r3
 8005b48:	3601      	adds	r6, #1
 8005b4a:	e7f2      	b.n	8005b32 <__libc_init_array+0x1e>
 8005b4c:	08006688 	.word	0x08006688
 8005b50:	08006688 	.word	0x08006688
 8005b54:	08006688 	.word	0x08006688
 8005b58:	0800668c 	.word	0x0800668c

08005b5c <memset>:
 8005b5c:	4402      	add	r2, r0
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d100      	bne.n	8005b66 <memset+0xa>
 8005b64:	4770      	bx	lr
 8005b66:	f803 1b01 	strb.w	r1, [r3], #1
 8005b6a:	e7f9      	b.n	8005b60 <memset+0x4>

08005b6c <siprintf>:
 8005b6c:	b40e      	push	{r1, r2, r3}
 8005b6e:	b500      	push	{lr}
 8005b70:	b09c      	sub	sp, #112	; 0x70
 8005b72:	ab1d      	add	r3, sp, #116	; 0x74
 8005b74:	9002      	str	r0, [sp, #8]
 8005b76:	9006      	str	r0, [sp, #24]
 8005b78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b7c:	4809      	ldr	r0, [pc, #36]	; (8005ba4 <siprintf+0x38>)
 8005b7e:	9107      	str	r1, [sp, #28]
 8005b80:	9104      	str	r1, [sp, #16]
 8005b82:	4909      	ldr	r1, [pc, #36]	; (8005ba8 <siprintf+0x3c>)
 8005b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b88:	9105      	str	r1, [sp, #20]
 8005b8a:	6800      	ldr	r0, [r0, #0]
 8005b8c:	9301      	str	r3, [sp, #4]
 8005b8e:	a902      	add	r1, sp, #8
 8005b90:	f000 f868 	bl	8005c64 <_svfiprintf_r>
 8005b94:	9b02      	ldr	r3, [sp, #8]
 8005b96:	2200      	movs	r2, #0
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	b01c      	add	sp, #112	; 0x70
 8005b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ba0:	b003      	add	sp, #12
 8005ba2:	4770      	bx	lr
 8005ba4:	20000024 	.word	0x20000024
 8005ba8:	ffff0208 	.word	0xffff0208

08005bac <__ssputs_r>:
 8005bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb0:	688e      	ldr	r6, [r1, #8]
 8005bb2:	429e      	cmp	r6, r3
 8005bb4:	4682      	mov	sl, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	4690      	mov	r8, r2
 8005bba:	461f      	mov	r7, r3
 8005bbc:	d838      	bhi.n	8005c30 <__ssputs_r+0x84>
 8005bbe:	898a      	ldrh	r2, [r1, #12]
 8005bc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bc4:	d032      	beq.n	8005c2c <__ssputs_r+0x80>
 8005bc6:	6825      	ldr	r5, [r4, #0]
 8005bc8:	6909      	ldr	r1, [r1, #16]
 8005bca:	eba5 0901 	sub.w	r9, r5, r1
 8005bce:	6965      	ldr	r5, [r4, #20]
 8005bd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bd8:	3301      	adds	r3, #1
 8005bda:	444b      	add	r3, r9
 8005bdc:	106d      	asrs	r5, r5, #1
 8005bde:	429d      	cmp	r5, r3
 8005be0:	bf38      	it	cc
 8005be2:	461d      	movcc	r5, r3
 8005be4:	0553      	lsls	r3, r2, #21
 8005be6:	d531      	bpl.n	8005c4c <__ssputs_r+0xa0>
 8005be8:	4629      	mov	r1, r5
 8005bea:	f000 fb63 	bl	80062b4 <_malloc_r>
 8005bee:	4606      	mov	r6, r0
 8005bf0:	b950      	cbnz	r0, 8005c08 <__ssputs_r+0x5c>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	f8ca 3000 	str.w	r3, [sl]
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bfe:	81a3      	strh	r3, [r4, #12]
 8005c00:	f04f 30ff 	mov.w	r0, #4294967295
 8005c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c08:	6921      	ldr	r1, [r4, #16]
 8005c0a:	464a      	mov	r2, r9
 8005c0c:	f000 fabe 	bl	800618c <memcpy>
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c1a:	81a3      	strh	r3, [r4, #12]
 8005c1c:	6126      	str	r6, [r4, #16]
 8005c1e:	6165      	str	r5, [r4, #20]
 8005c20:	444e      	add	r6, r9
 8005c22:	eba5 0509 	sub.w	r5, r5, r9
 8005c26:	6026      	str	r6, [r4, #0]
 8005c28:	60a5      	str	r5, [r4, #8]
 8005c2a:	463e      	mov	r6, r7
 8005c2c:	42be      	cmp	r6, r7
 8005c2e:	d900      	bls.n	8005c32 <__ssputs_r+0x86>
 8005c30:	463e      	mov	r6, r7
 8005c32:	6820      	ldr	r0, [r4, #0]
 8005c34:	4632      	mov	r2, r6
 8005c36:	4641      	mov	r1, r8
 8005c38:	f000 fab6 	bl	80061a8 <memmove>
 8005c3c:	68a3      	ldr	r3, [r4, #8]
 8005c3e:	1b9b      	subs	r3, r3, r6
 8005c40:	60a3      	str	r3, [r4, #8]
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	4433      	add	r3, r6
 8005c46:	6023      	str	r3, [r4, #0]
 8005c48:	2000      	movs	r0, #0
 8005c4a:	e7db      	b.n	8005c04 <__ssputs_r+0x58>
 8005c4c:	462a      	mov	r2, r5
 8005c4e:	f000 fba5 	bl	800639c <_realloc_r>
 8005c52:	4606      	mov	r6, r0
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d1e1      	bne.n	8005c1c <__ssputs_r+0x70>
 8005c58:	6921      	ldr	r1, [r4, #16]
 8005c5a:	4650      	mov	r0, sl
 8005c5c:	f000 fabe 	bl	80061dc <_free_r>
 8005c60:	e7c7      	b.n	8005bf2 <__ssputs_r+0x46>
	...

08005c64 <_svfiprintf_r>:
 8005c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c68:	4698      	mov	r8, r3
 8005c6a:	898b      	ldrh	r3, [r1, #12]
 8005c6c:	061b      	lsls	r3, r3, #24
 8005c6e:	b09d      	sub	sp, #116	; 0x74
 8005c70:	4607      	mov	r7, r0
 8005c72:	460d      	mov	r5, r1
 8005c74:	4614      	mov	r4, r2
 8005c76:	d50e      	bpl.n	8005c96 <_svfiprintf_r+0x32>
 8005c78:	690b      	ldr	r3, [r1, #16]
 8005c7a:	b963      	cbnz	r3, 8005c96 <_svfiprintf_r+0x32>
 8005c7c:	2140      	movs	r1, #64	; 0x40
 8005c7e:	f000 fb19 	bl	80062b4 <_malloc_r>
 8005c82:	6028      	str	r0, [r5, #0]
 8005c84:	6128      	str	r0, [r5, #16]
 8005c86:	b920      	cbnz	r0, 8005c92 <_svfiprintf_r+0x2e>
 8005c88:	230c      	movs	r3, #12
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c90:	e0d1      	b.n	8005e36 <_svfiprintf_r+0x1d2>
 8005c92:	2340      	movs	r3, #64	; 0x40
 8005c94:	616b      	str	r3, [r5, #20]
 8005c96:	2300      	movs	r3, #0
 8005c98:	9309      	str	r3, [sp, #36]	; 0x24
 8005c9a:	2320      	movs	r3, #32
 8005c9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ca0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ca4:	2330      	movs	r3, #48	; 0x30
 8005ca6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e50 <_svfiprintf_r+0x1ec>
 8005caa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cae:	f04f 0901 	mov.w	r9, #1
 8005cb2:	4623      	mov	r3, r4
 8005cb4:	469a      	mov	sl, r3
 8005cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cba:	b10a      	cbz	r2, 8005cc0 <_svfiprintf_r+0x5c>
 8005cbc:	2a25      	cmp	r2, #37	; 0x25
 8005cbe:	d1f9      	bne.n	8005cb4 <_svfiprintf_r+0x50>
 8005cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8005cc4:	d00b      	beq.n	8005cde <_svfiprintf_r+0x7a>
 8005cc6:	465b      	mov	r3, fp
 8005cc8:	4622      	mov	r2, r4
 8005cca:	4629      	mov	r1, r5
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f7ff ff6d 	bl	8005bac <__ssputs_r>
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	f000 80aa 	beq.w	8005e2c <_svfiprintf_r+0x1c8>
 8005cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cda:	445a      	add	r2, fp
 8005cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8005cde:	f89a 3000 	ldrb.w	r3, [sl]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 80a2 	beq.w	8005e2c <_svfiprintf_r+0x1c8>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f04f 32ff 	mov.w	r2, #4294967295
 8005cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cf2:	f10a 0a01 	add.w	sl, sl, #1
 8005cf6:	9304      	str	r3, [sp, #16]
 8005cf8:	9307      	str	r3, [sp, #28]
 8005cfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cfe:	931a      	str	r3, [sp, #104]	; 0x68
 8005d00:	4654      	mov	r4, sl
 8005d02:	2205      	movs	r2, #5
 8005d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d08:	4851      	ldr	r0, [pc, #324]	; (8005e50 <_svfiprintf_r+0x1ec>)
 8005d0a:	f7fa fa79 	bl	8000200 <memchr>
 8005d0e:	9a04      	ldr	r2, [sp, #16]
 8005d10:	b9d8      	cbnz	r0, 8005d4a <_svfiprintf_r+0xe6>
 8005d12:	06d0      	lsls	r0, r2, #27
 8005d14:	bf44      	itt	mi
 8005d16:	2320      	movmi	r3, #32
 8005d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d1c:	0711      	lsls	r1, r2, #28
 8005d1e:	bf44      	itt	mi
 8005d20:	232b      	movmi	r3, #43	; 0x2b
 8005d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d26:	f89a 3000 	ldrb.w	r3, [sl]
 8005d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d2c:	d015      	beq.n	8005d5a <_svfiprintf_r+0xf6>
 8005d2e:	9a07      	ldr	r2, [sp, #28]
 8005d30:	4654      	mov	r4, sl
 8005d32:	2000      	movs	r0, #0
 8005d34:	f04f 0c0a 	mov.w	ip, #10
 8005d38:	4621      	mov	r1, r4
 8005d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d3e:	3b30      	subs	r3, #48	; 0x30
 8005d40:	2b09      	cmp	r3, #9
 8005d42:	d94e      	bls.n	8005de2 <_svfiprintf_r+0x17e>
 8005d44:	b1b0      	cbz	r0, 8005d74 <_svfiprintf_r+0x110>
 8005d46:	9207      	str	r2, [sp, #28]
 8005d48:	e014      	b.n	8005d74 <_svfiprintf_r+0x110>
 8005d4a:	eba0 0308 	sub.w	r3, r0, r8
 8005d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8005d52:	4313      	orrs	r3, r2
 8005d54:	9304      	str	r3, [sp, #16]
 8005d56:	46a2      	mov	sl, r4
 8005d58:	e7d2      	b.n	8005d00 <_svfiprintf_r+0x9c>
 8005d5a:	9b03      	ldr	r3, [sp, #12]
 8005d5c:	1d19      	adds	r1, r3, #4
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	9103      	str	r1, [sp, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	bfbb      	ittet	lt
 8005d66:	425b      	neglt	r3, r3
 8005d68:	f042 0202 	orrlt.w	r2, r2, #2
 8005d6c:	9307      	strge	r3, [sp, #28]
 8005d6e:	9307      	strlt	r3, [sp, #28]
 8005d70:	bfb8      	it	lt
 8005d72:	9204      	strlt	r2, [sp, #16]
 8005d74:	7823      	ldrb	r3, [r4, #0]
 8005d76:	2b2e      	cmp	r3, #46	; 0x2e
 8005d78:	d10c      	bne.n	8005d94 <_svfiprintf_r+0x130>
 8005d7a:	7863      	ldrb	r3, [r4, #1]
 8005d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d7e:	d135      	bne.n	8005dec <_svfiprintf_r+0x188>
 8005d80:	9b03      	ldr	r3, [sp, #12]
 8005d82:	1d1a      	adds	r2, r3, #4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	9203      	str	r2, [sp, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bfb8      	it	lt
 8005d8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d90:	3402      	adds	r4, #2
 8005d92:	9305      	str	r3, [sp, #20]
 8005d94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e60 <_svfiprintf_r+0x1fc>
 8005d98:	7821      	ldrb	r1, [r4, #0]
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	4650      	mov	r0, sl
 8005d9e:	f7fa fa2f 	bl	8000200 <memchr>
 8005da2:	b140      	cbz	r0, 8005db6 <_svfiprintf_r+0x152>
 8005da4:	2340      	movs	r3, #64	; 0x40
 8005da6:	eba0 000a 	sub.w	r0, r0, sl
 8005daa:	fa03 f000 	lsl.w	r0, r3, r0
 8005dae:	9b04      	ldr	r3, [sp, #16]
 8005db0:	4303      	orrs	r3, r0
 8005db2:	3401      	adds	r4, #1
 8005db4:	9304      	str	r3, [sp, #16]
 8005db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dba:	4826      	ldr	r0, [pc, #152]	; (8005e54 <_svfiprintf_r+0x1f0>)
 8005dbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dc0:	2206      	movs	r2, #6
 8005dc2:	f7fa fa1d 	bl	8000200 <memchr>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d038      	beq.n	8005e3c <_svfiprintf_r+0x1d8>
 8005dca:	4b23      	ldr	r3, [pc, #140]	; (8005e58 <_svfiprintf_r+0x1f4>)
 8005dcc:	bb1b      	cbnz	r3, 8005e16 <_svfiprintf_r+0x1b2>
 8005dce:	9b03      	ldr	r3, [sp, #12]
 8005dd0:	3307      	adds	r3, #7
 8005dd2:	f023 0307 	bic.w	r3, r3, #7
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	9303      	str	r3, [sp, #12]
 8005dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ddc:	4433      	add	r3, r6
 8005dde:	9309      	str	r3, [sp, #36]	; 0x24
 8005de0:	e767      	b.n	8005cb2 <_svfiprintf_r+0x4e>
 8005de2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005de6:	460c      	mov	r4, r1
 8005de8:	2001      	movs	r0, #1
 8005dea:	e7a5      	b.n	8005d38 <_svfiprintf_r+0xd4>
 8005dec:	2300      	movs	r3, #0
 8005dee:	3401      	adds	r4, #1
 8005df0:	9305      	str	r3, [sp, #20]
 8005df2:	4619      	mov	r1, r3
 8005df4:	f04f 0c0a 	mov.w	ip, #10
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dfe:	3a30      	subs	r2, #48	; 0x30
 8005e00:	2a09      	cmp	r2, #9
 8005e02:	d903      	bls.n	8005e0c <_svfiprintf_r+0x1a8>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0c5      	beq.n	8005d94 <_svfiprintf_r+0x130>
 8005e08:	9105      	str	r1, [sp, #20]
 8005e0a:	e7c3      	b.n	8005d94 <_svfiprintf_r+0x130>
 8005e0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e10:	4604      	mov	r4, r0
 8005e12:	2301      	movs	r3, #1
 8005e14:	e7f0      	b.n	8005df8 <_svfiprintf_r+0x194>
 8005e16:	ab03      	add	r3, sp, #12
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	462a      	mov	r2, r5
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <_svfiprintf_r+0x1f8>)
 8005e1e:	a904      	add	r1, sp, #16
 8005e20:	4638      	mov	r0, r7
 8005e22:	f3af 8000 	nop.w
 8005e26:	1c42      	adds	r2, r0, #1
 8005e28:	4606      	mov	r6, r0
 8005e2a:	d1d6      	bne.n	8005dda <_svfiprintf_r+0x176>
 8005e2c:	89ab      	ldrh	r3, [r5, #12]
 8005e2e:	065b      	lsls	r3, r3, #25
 8005e30:	f53f af2c 	bmi.w	8005c8c <_svfiprintf_r+0x28>
 8005e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e36:	b01d      	add	sp, #116	; 0x74
 8005e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3c:	ab03      	add	r3, sp, #12
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	462a      	mov	r2, r5
 8005e42:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <_svfiprintf_r+0x1f8>)
 8005e44:	a904      	add	r1, sp, #16
 8005e46:	4638      	mov	r0, r7
 8005e48:	f000 f87a 	bl	8005f40 <_printf_i>
 8005e4c:	e7eb      	b.n	8005e26 <_svfiprintf_r+0x1c2>
 8005e4e:	bf00      	nop
 8005e50:	0800664c 	.word	0x0800664c
 8005e54:	08006656 	.word	0x08006656
 8005e58:	00000000 	.word	0x00000000
 8005e5c:	08005bad 	.word	0x08005bad
 8005e60:	08006652 	.word	0x08006652

08005e64 <_printf_common>:
 8005e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e68:	4616      	mov	r6, r2
 8005e6a:	4699      	mov	r9, r3
 8005e6c:	688a      	ldr	r2, [r1, #8]
 8005e6e:	690b      	ldr	r3, [r1, #16]
 8005e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e74:	4293      	cmp	r3, r2
 8005e76:	bfb8      	it	lt
 8005e78:	4613      	movlt	r3, r2
 8005e7a:	6033      	str	r3, [r6, #0]
 8005e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e80:	4607      	mov	r7, r0
 8005e82:	460c      	mov	r4, r1
 8005e84:	b10a      	cbz	r2, 8005e8a <_printf_common+0x26>
 8005e86:	3301      	adds	r3, #1
 8005e88:	6033      	str	r3, [r6, #0]
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	0699      	lsls	r1, r3, #26
 8005e8e:	bf42      	ittt	mi
 8005e90:	6833      	ldrmi	r3, [r6, #0]
 8005e92:	3302      	addmi	r3, #2
 8005e94:	6033      	strmi	r3, [r6, #0]
 8005e96:	6825      	ldr	r5, [r4, #0]
 8005e98:	f015 0506 	ands.w	r5, r5, #6
 8005e9c:	d106      	bne.n	8005eac <_printf_common+0x48>
 8005e9e:	f104 0a19 	add.w	sl, r4, #25
 8005ea2:	68e3      	ldr	r3, [r4, #12]
 8005ea4:	6832      	ldr	r2, [r6, #0]
 8005ea6:	1a9b      	subs	r3, r3, r2
 8005ea8:	42ab      	cmp	r3, r5
 8005eaa:	dc26      	bgt.n	8005efa <_printf_common+0x96>
 8005eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005eb0:	1e13      	subs	r3, r2, #0
 8005eb2:	6822      	ldr	r2, [r4, #0]
 8005eb4:	bf18      	it	ne
 8005eb6:	2301      	movne	r3, #1
 8005eb8:	0692      	lsls	r2, r2, #26
 8005eba:	d42b      	bmi.n	8005f14 <_printf_common+0xb0>
 8005ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ec0:	4649      	mov	r1, r9
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	47c0      	blx	r8
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	d01e      	beq.n	8005f08 <_printf_common+0xa4>
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	68e5      	ldr	r5, [r4, #12]
 8005ece:	6832      	ldr	r2, [r6, #0]
 8005ed0:	f003 0306 	and.w	r3, r3, #6
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	bf08      	it	eq
 8005ed8:	1aad      	subeq	r5, r5, r2
 8005eda:	68a3      	ldr	r3, [r4, #8]
 8005edc:	6922      	ldr	r2, [r4, #16]
 8005ede:	bf0c      	ite	eq
 8005ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ee4:	2500      	movne	r5, #0
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	bfc4      	itt	gt
 8005eea:	1a9b      	subgt	r3, r3, r2
 8005eec:	18ed      	addgt	r5, r5, r3
 8005eee:	2600      	movs	r6, #0
 8005ef0:	341a      	adds	r4, #26
 8005ef2:	42b5      	cmp	r5, r6
 8005ef4:	d11a      	bne.n	8005f2c <_printf_common+0xc8>
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	e008      	b.n	8005f0c <_printf_common+0xa8>
 8005efa:	2301      	movs	r3, #1
 8005efc:	4652      	mov	r2, sl
 8005efe:	4649      	mov	r1, r9
 8005f00:	4638      	mov	r0, r7
 8005f02:	47c0      	blx	r8
 8005f04:	3001      	adds	r0, #1
 8005f06:	d103      	bne.n	8005f10 <_printf_common+0xac>
 8005f08:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f10:	3501      	adds	r5, #1
 8005f12:	e7c6      	b.n	8005ea2 <_printf_common+0x3e>
 8005f14:	18e1      	adds	r1, r4, r3
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	2030      	movs	r0, #48	; 0x30
 8005f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f1e:	4422      	add	r2, r4
 8005f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f28:	3302      	adds	r3, #2
 8005f2a:	e7c7      	b.n	8005ebc <_printf_common+0x58>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	4622      	mov	r2, r4
 8005f30:	4649      	mov	r1, r9
 8005f32:	4638      	mov	r0, r7
 8005f34:	47c0      	blx	r8
 8005f36:	3001      	adds	r0, #1
 8005f38:	d0e6      	beq.n	8005f08 <_printf_common+0xa4>
 8005f3a:	3601      	adds	r6, #1
 8005f3c:	e7d9      	b.n	8005ef2 <_printf_common+0x8e>
	...

08005f40 <_printf_i>:
 8005f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f44:	7e0f      	ldrb	r7, [r1, #24]
 8005f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f48:	2f78      	cmp	r7, #120	; 0x78
 8005f4a:	4691      	mov	r9, r2
 8005f4c:	4680      	mov	r8, r0
 8005f4e:	460c      	mov	r4, r1
 8005f50:	469a      	mov	sl, r3
 8005f52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f56:	d807      	bhi.n	8005f68 <_printf_i+0x28>
 8005f58:	2f62      	cmp	r7, #98	; 0x62
 8005f5a:	d80a      	bhi.n	8005f72 <_printf_i+0x32>
 8005f5c:	2f00      	cmp	r7, #0
 8005f5e:	f000 80d8 	beq.w	8006112 <_printf_i+0x1d2>
 8005f62:	2f58      	cmp	r7, #88	; 0x58
 8005f64:	f000 80a3 	beq.w	80060ae <_printf_i+0x16e>
 8005f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f70:	e03a      	b.n	8005fe8 <_printf_i+0xa8>
 8005f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f76:	2b15      	cmp	r3, #21
 8005f78:	d8f6      	bhi.n	8005f68 <_printf_i+0x28>
 8005f7a:	a101      	add	r1, pc, #4	; (adr r1, 8005f80 <_printf_i+0x40>)
 8005f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f80:	08005fd9 	.word	0x08005fd9
 8005f84:	08005fed 	.word	0x08005fed
 8005f88:	08005f69 	.word	0x08005f69
 8005f8c:	08005f69 	.word	0x08005f69
 8005f90:	08005f69 	.word	0x08005f69
 8005f94:	08005f69 	.word	0x08005f69
 8005f98:	08005fed 	.word	0x08005fed
 8005f9c:	08005f69 	.word	0x08005f69
 8005fa0:	08005f69 	.word	0x08005f69
 8005fa4:	08005f69 	.word	0x08005f69
 8005fa8:	08005f69 	.word	0x08005f69
 8005fac:	080060f9 	.word	0x080060f9
 8005fb0:	0800601d 	.word	0x0800601d
 8005fb4:	080060db 	.word	0x080060db
 8005fb8:	08005f69 	.word	0x08005f69
 8005fbc:	08005f69 	.word	0x08005f69
 8005fc0:	0800611b 	.word	0x0800611b
 8005fc4:	08005f69 	.word	0x08005f69
 8005fc8:	0800601d 	.word	0x0800601d
 8005fcc:	08005f69 	.word	0x08005f69
 8005fd0:	08005f69 	.word	0x08005f69
 8005fd4:	080060e3 	.word	0x080060e3
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	1d1a      	adds	r2, r3, #4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	602a      	str	r2, [r5, #0]
 8005fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e0a3      	b.n	8006134 <_printf_i+0x1f4>
 8005fec:	6820      	ldr	r0, [r4, #0]
 8005fee:	6829      	ldr	r1, [r5, #0]
 8005ff0:	0606      	lsls	r6, r0, #24
 8005ff2:	f101 0304 	add.w	r3, r1, #4
 8005ff6:	d50a      	bpl.n	800600e <_printf_i+0xce>
 8005ff8:	680e      	ldr	r6, [r1, #0]
 8005ffa:	602b      	str	r3, [r5, #0]
 8005ffc:	2e00      	cmp	r6, #0
 8005ffe:	da03      	bge.n	8006008 <_printf_i+0xc8>
 8006000:	232d      	movs	r3, #45	; 0x2d
 8006002:	4276      	negs	r6, r6
 8006004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006008:	485e      	ldr	r0, [pc, #376]	; (8006184 <_printf_i+0x244>)
 800600a:	230a      	movs	r3, #10
 800600c:	e019      	b.n	8006042 <_printf_i+0x102>
 800600e:	680e      	ldr	r6, [r1, #0]
 8006010:	602b      	str	r3, [r5, #0]
 8006012:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006016:	bf18      	it	ne
 8006018:	b236      	sxthne	r6, r6
 800601a:	e7ef      	b.n	8005ffc <_printf_i+0xbc>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	6820      	ldr	r0, [r4, #0]
 8006020:	1d19      	adds	r1, r3, #4
 8006022:	6029      	str	r1, [r5, #0]
 8006024:	0601      	lsls	r1, r0, #24
 8006026:	d501      	bpl.n	800602c <_printf_i+0xec>
 8006028:	681e      	ldr	r6, [r3, #0]
 800602a:	e002      	b.n	8006032 <_printf_i+0xf2>
 800602c:	0646      	lsls	r6, r0, #25
 800602e:	d5fb      	bpl.n	8006028 <_printf_i+0xe8>
 8006030:	881e      	ldrh	r6, [r3, #0]
 8006032:	4854      	ldr	r0, [pc, #336]	; (8006184 <_printf_i+0x244>)
 8006034:	2f6f      	cmp	r7, #111	; 0x6f
 8006036:	bf0c      	ite	eq
 8006038:	2308      	moveq	r3, #8
 800603a:	230a      	movne	r3, #10
 800603c:	2100      	movs	r1, #0
 800603e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006042:	6865      	ldr	r5, [r4, #4]
 8006044:	60a5      	str	r5, [r4, #8]
 8006046:	2d00      	cmp	r5, #0
 8006048:	bfa2      	ittt	ge
 800604a:	6821      	ldrge	r1, [r4, #0]
 800604c:	f021 0104 	bicge.w	r1, r1, #4
 8006050:	6021      	strge	r1, [r4, #0]
 8006052:	b90e      	cbnz	r6, 8006058 <_printf_i+0x118>
 8006054:	2d00      	cmp	r5, #0
 8006056:	d04d      	beq.n	80060f4 <_printf_i+0x1b4>
 8006058:	4615      	mov	r5, r2
 800605a:	fbb6 f1f3 	udiv	r1, r6, r3
 800605e:	fb03 6711 	mls	r7, r3, r1, r6
 8006062:	5dc7      	ldrb	r7, [r0, r7]
 8006064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006068:	4637      	mov	r7, r6
 800606a:	42bb      	cmp	r3, r7
 800606c:	460e      	mov	r6, r1
 800606e:	d9f4      	bls.n	800605a <_printf_i+0x11a>
 8006070:	2b08      	cmp	r3, #8
 8006072:	d10b      	bne.n	800608c <_printf_i+0x14c>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	07de      	lsls	r6, r3, #31
 8006078:	d508      	bpl.n	800608c <_printf_i+0x14c>
 800607a:	6923      	ldr	r3, [r4, #16]
 800607c:	6861      	ldr	r1, [r4, #4]
 800607e:	4299      	cmp	r1, r3
 8006080:	bfde      	ittt	le
 8006082:	2330      	movle	r3, #48	; 0x30
 8006084:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006088:	f105 35ff 	addle.w	r5, r5, #4294967295
 800608c:	1b52      	subs	r2, r2, r5
 800608e:	6122      	str	r2, [r4, #16]
 8006090:	f8cd a000 	str.w	sl, [sp]
 8006094:	464b      	mov	r3, r9
 8006096:	aa03      	add	r2, sp, #12
 8006098:	4621      	mov	r1, r4
 800609a:	4640      	mov	r0, r8
 800609c:	f7ff fee2 	bl	8005e64 <_printf_common>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d14c      	bne.n	800613e <_printf_i+0x1fe>
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295
 80060a8:	b004      	add	sp, #16
 80060aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ae:	4835      	ldr	r0, [pc, #212]	; (8006184 <_printf_i+0x244>)
 80060b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060b4:	6829      	ldr	r1, [r5, #0]
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80060bc:	6029      	str	r1, [r5, #0]
 80060be:	061d      	lsls	r5, r3, #24
 80060c0:	d514      	bpl.n	80060ec <_printf_i+0x1ac>
 80060c2:	07df      	lsls	r7, r3, #31
 80060c4:	bf44      	itt	mi
 80060c6:	f043 0320 	orrmi.w	r3, r3, #32
 80060ca:	6023      	strmi	r3, [r4, #0]
 80060cc:	b91e      	cbnz	r6, 80060d6 <_printf_i+0x196>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	f023 0320 	bic.w	r3, r3, #32
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	2310      	movs	r3, #16
 80060d8:	e7b0      	b.n	800603c <_printf_i+0xfc>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	f043 0320 	orr.w	r3, r3, #32
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	2378      	movs	r3, #120	; 0x78
 80060e4:	4828      	ldr	r0, [pc, #160]	; (8006188 <_printf_i+0x248>)
 80060e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060ea:	e7e3      	b.n	80060b4 <_printf_i+0x174>
 80060ec:	0659      	lsls	r1, r3, #25
 80060ee:	bf48      	it	mi
 80060f0:	b2b6      	uxthmi	r6, r6
 80060f2:	e7e6      	b.n	80060c2 <_printf_i+0x182>
 80060f4:	4615      	mov	r5, r2
 80060f6:	e7bb      	b.n	8006070 <_printf_i+0x130>
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	6826      	ldr	r6, [r4, #0]
 80060fc:	6961      	ldr	r1, [r4, #20]
 80060fe:	1d18      	adds	r0, r3, #4
 8006100:	6028      	str	r0, [r5, #0]
 8006102:	0635      	lsls	r5, r6, #24
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	d501      	bpl.n	800610c <_printf_i+0x1cc>
 8006108:	6019      	str	r1, [r3, #0]
 800610a:	e002      	b.n	8006112 <_printf_i+0x1d2>
 800610c:	0670      	lsls	r0, r6, #25
 800610e:	d5fb      	bpl.n	8006108 <_printf_i+0x1c8>
 8006110:	8019      	strh	r1, [r3, #0]
 8006112:	2300      	movs	r3, #0
 8006114:	6123      	str	r3, [r4, #16]
 8006116:	4615      	mov	r5, r2
 8006118:	e7ba      	b.n	8006090 <_printf_i+0x150>
 800611a:	682b      	ldr	r3, [r5, #0]
 800611c:	1d1a      	adds	r2, r3, #4
 800611e:	602a      	str	r2, [r5, #0]
 8006120:	681d      	ldr	r5, [r3, #0]
 8006122:	6862      	ldr	r2, [r4, #4]
 8006124:	2100      	movs	r1, #0
 8006126:	4628      	mov	r0, r5
 8006128:	f7fa f86a 	bl	8000200 <memchr>
 800612c:	b108      	cbz	r0, 8006132 <_printf_i+0x1f2>
 800612e:	1b40      	subs	r0, r0, r5
 8006130:	6060      	str	r0, [r4, #4]
 8006132:	6863      	ldr	r3, [r4, #4]
 8006134:	6123      	str	r3, [r4, #16]
 8006136:	2300      	movs	r3, #0
 8006138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800613c:	e7a8      	b.n	8006090 <_printf_i+0x150>
 800613e:	6923      	ldr	r3, [r4, #16]
 8006140:	462a      	mov	r2, r5
 8006142:	4649      	mov	r1, r9
 8006144:	4640      	mov	r0, r8
 8006146:	47d0      	blx	sl
 8006148:	3001      	adds	r0, #1
 800614a:	d0ab      	beq.n	80060a4 <_printf_i+0x164>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	079b      	lsls	r3, r3, #30
 8006150:	d413      	bmi.n	800617a <_printf_i+0x23a>
 8006152:	68e0      	ldr	r0, [r4, #12]
 8006154:	9b03      	ldr	r3, [sp, #12]
 8006156:	4298      	cmp	r0, r3
 8006158:	bfb8      	it	lt
 800615a:	4618      	movlt	r0, r3
 800615c:	e7a4      	b.n	80060a8 <_printf_i+0x168>
 800615e:	2301      	movs	r3, #1
 8006160:	4632      	mov	r2, r6
 8006162:	4649      	mov	r1, r9
 8006164:	4640      	mov	r0, r8
 8006166:	47d0      	blx	sl
 8006168:	3001      	adds	r0, #1
 800616a:	d09b      	beq.n	80060a4 <_printf_i+0x164>
 800616c:	3501      	adds	r5, #1
 800616e:	68e3      	ldr	r3, [r4, #12]
 8006170:	9903      	ldr	r1, [sp, #12]
 8006172:	1a5b      	subs	r3, r3, r1
 8006174:	42ab      	cmp	r3, r5
 8006176:	dcf2      	bgt.n	800615e <_printf_i+0x21e>
 8006178:	e7eb      	b.n	8006152 <_printf_i+0x212>
 800617a:	2500      	movs	r5, #0
 800617c:	f104 0619 	add.w	r6, r4, #25
 8006180:	e7f5      	b.n	800616e <_printf_i+0x22e>
 8006182:	bf00      	nop
 8006184:	0800665d 	.word	0x0800665d
 8006188:	0800666e 	.word	0x0800666e

0800618c <memcpy>:
 800618c:	440a      	add	r2, r1
 800618e:	4291      	cmp	r1, r2
 8006190:	f100 33ff 	add.w	r3, r0, #4294967295
 8006194:	d100      	bne.n	8006198 <memcpy+0xc>
 8006196:	4770      	bx	lr
 8006198:	b510      	push	{r4, lr}
 800619a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800619e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061a2:	4291      	cmp	r1, r2
 80061a4:	d1f9      	bne.n	800619a <memcpy+0xe>
 80061a6:	bd10      	pop	{r4, pc}

080061a8 <memmove>:
 80061a8:	4288      	cmp	r0, r1
 80061aa:	b510      	push	{r4, lr}
 80061ac:	eb01 0402 	add.w	r4, r1, r2
 80061b0:	d902      	bls.n	80061b8 <memmove+0x10>
 80061b2:	4284      	cmp	r4, r0
 80061b4:	4623      	mov	r3, r4
 80061b6:	d807      	bhi.n	80061c8 <memmove+0x20>
 80061b8:	1e43      	subs	r3, r0, #1
 80061ba:	42a1      	cmp	r1, r4
 80061bc:	d008      	beq.n	80061d0 <memmove+0x28>
 80061be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061c6:	e7f8      	b.n	80061ba <memmove+0x12>
 80061c8:	4402      	add	r2, r0
 80061ca:	4601      	mov	r1, r0
 80061cc:	428a      	cmp	r2, r1
 80061ce:	d100      	bne.n	80061d2 <memmove+0x2a>
 80061d0:	bd10      	pop	{r4, pc}
 80061d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061da:	e7f7      	b.n	80061cc <memmove+0x24>

080061dc <_free_r>:
 80061dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061de:	2900      	cmp	r1, #0
 80061e0:	d044      	beq.n	800626c <_free_r+0x90>
 80061e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061e6:	9001      	str	r0, [sp, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f1a1 0404 	sub.w	r4, r1, #4
 80061ee:	bfb8      	it	lt
 80061f0:	18e4      	addlt	r4, r4, r3
 80061f2:	f000 f913 	bl	800641c <__malloc_lock>
 80061f6:	4a1e      	ldr	r2, [pc, #120]	; (8006270 <_free_r+0x94>)
 80061f8:	9801      	ldr	r0, [sp, #4]
 80061fa:	6813      	ldr	r3, [r2, #0]
 80061fc:	b933      	cbnz	r3, 800620c <_free_r+0x30>
 80061fe:	6063      	str	r3, [r4, #4]
 8006200:	6014      	str	r4, [r2, #0]
 8006202:	b003      	add	sp, #12
 8006204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006208:	f000 b90e 	b.w	8006428 <__malloc_unlock>
 800620c:	42a3      	cmp	r3, r4
 800620e:	d908      	bls.n	8006222 <_free_r+0x46>
 8006210:	6825      	ldr	r5, [r4, #0]
 8006212:	1961      	adds	r1, r4, r5
 8006214:	428b      	cmp	r3, r1
 8006216:	bf01      	itttt	eq
 8006218:	6819      	ldreq	r1, [r3, #0]
 800621a:	685b      	ldreq	r3, [r3, #4]
 800621c:	1949      	addeq	r1, r1, r5
 800621e:	6021      	streq	r1, [r4, #0]
 8006220:	e7ed      	b.n	80061fe <_free_r+0x22>
 8006222:	461a      	mov	r2, r3
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	b10b      	cbz	r3, 800622c <_free_r+0x50>
 8006228:	42a3      	cmp	r3, r4
 800622a:	d9fa      	bls.n	8006222 <_free_r+0x46>
 800622c:	6811      	ldr	r1, [r2, #0]
 800622e:	1855      	adds	r5, r2, r1
 8006230:	42a5      	cmp	r5, r4
 8006232:	d10b      	bne.n	800624c <_free_r+0x70>
 8006234:	6824      	ldr	r4, [r4, #0]
 8006236:	4421      	add	r1, r4
 8006238:	1854      	adds	r4, r2, r1
 800623a:	42a3      	cmp	r3, r4
 800623c:	6011      	str	r1, [r2, #0]
 800623e:	d1e0      	bne.n	8006202 <_free_r+0x26>
 8006240:	681c      	ldr	r4, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	6053      	str	r3, [r2, #4]
 8006246:	4421      	add	r1, r4
 8006248:	6011      	str	r1, [r2, #0]
 800624a:	e7da      	b.n	8006202 <_free_r+0x26>
 800624c:	d902      	bls.n	8006254 <_free_r+0x78>
 800624e:	230c      	movs	r3, #12
 8006250:	6003      	str	r3, [r0, #0]
 8006252:	e7d6      	b.n	8006202 <_free_r+0x26>
 8006254:	6825      	ldr	r5, [r4, #0]
 8006256:	1961      	adds	r1, r4, r5
 8006258:	428b      	cmp	r3, r1
 800625a:	bf04      	itt	eq
 800625c:	6819      	ldreq	r1, [r3, #0]
 800625e:	685b      	ldreq	r3, [r3, #4]
 8006260:	6063      	str	r3, [r4, #4]
 8006262:	bf04      	itt	eq
 8006264:	1949      	addeq	r1, r1, r5
 8006266:	6021      	streq	r1, [r4, #0]
 8006268:	6054      	str	r4, [r2, #4]
 800626a:	e7ca      	b.n	8006202 <_free_r+0x26>
 800626c:	b003      	add	sp, #12
 800626e:	bd30      	pop	{r4, r5, pc}
 8006270:	20000274 	.word	0x20000274

08006274 <sbrk_aligned>:
 8006274:	b570      	push	{r4, r5, r6, lr}
 8006276:	4e0e      	ldr	r6, [pc, #56]	; (80062b0 <sbrk_aligned+0x3c>)
 8006278:	460c      	mov	r4, r1
 800627a:	6831      	ldr	r1, [r6, #0]
 800627c:	4605      	mov	r5, r0
 800627e:	b911      	cbnz	r1, 8006286 <sbrk_aligned+0x12>
 8006280:	f000 f8bc 	bl	80063fc <_sbrk_r>
 8006284:	6030      	str	r0, [r6, #0]
 8006286:	4621      	mov	r1, r4
 8006288:	4628      	mov	r0, r5
 800628a:	f000 f8b7 	bl	80063fc <_sbrk_r>
 800628e:	1c43      	adds	r3, r0, #1
 8006290:	d00a      	beq.n	80062a8 <sbrk_aligned+0x34>
 8006292:	1cc4      	adds	r4, r0, #3
 8006294:	f024 0403 	bic.w	r4, r4, #3
 8006298:	42a0      	cmp	r0, r4
 800629a:	d007      	beq.n	80062ac <sbrk_aligned+0x38>
 800629c:	1a21      	subs	r1, r4, r0
 800629e:	4628      	mov	r0, r5
 80062a0:	f000 f8ac 	bl	80063fc <_sbrk_r>
 80062a4:	3001      	adds	r0, #1
 80062a6:	d101      	bne.n	80062ac <sbrk_aligned+0x38>
 80062a8:	f04f 34ff 	mov.w	r4, #4294967295
 80062ac:	4620      	mov	r0, r4
 80062ae:	bd70      	pop	{r4, r5, r6, pc}
 80062b0:	20000278 	.word	0x20000278

080062b4 <_malloc_r>:
 80062b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b8:	1ccd      	adds	r5, r1, #3
 80062ba:	f025 0503 	bic.w	r5, r5, #3
 80062be:	3508      	adds	r5, #8
 80062c0:	2d0c      	cmp	r5, #12
 80062c2:	bf38      	it	cc
 80062c4:	250c      	movcc	r5, #12
 80062c6:	2d00      	cmp	r5, #0
 80062c8:	4607      	mov	r7, r0
 80062ca:	db01      	blt.n	80062d0 <_malloc_r+0x1c>
 80062cc:	42a9      	cmp	r1, r5
 80062ce:	d905      	bls.n	80062dc <_malloc_r+0x28>
 80062d0:	230c      	movs	r3, #12
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	2600      	movs	r6, #0
 80062d6:	4630      	mov	r0, r6
 80062d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062dc:	4e2e      	ldr	r6, [pc, #184]	; (8006398 <_malloc_r+0xe4>)
 80062de:	f000 f89d 	bl	800641c <__malloc_lock>
 80062e2:	6833      	ldr	r3, [r6, #0]
 80062e4:	461c      	mov	r4, r3
 80062e6:	bb34      	cbnz	r4, 8006336 <_malloc_r+0x82>
 80062e8:	4629      	mov	r1, r5
 80062ea:	4638      	mov	r0, r7
 80062ec:	f7ff ffc2 	bl	8006274 <sbrk_aligned>
 80062f0:	1c43      	adds	r3, r0, #1
 80062f2:	4604      	mov	r4, r0
 80062f4:	d14d      	bne.n	8006392 <_malloc_r+0xde>
 80062f6:	6834      	ldr	r4, [r6, #0]
 80062f8:	4626      	mov	r6, r4
 80062fa:	2e00      	cmp	r6, #0
 80062fc:	d140      	bne.n	8006380 <_malloc_r+0xcc>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	4631      	mov	r1, r6
 8006302:	4638      	mov	r0, r7
 8006304:	eb04 0803 	add.w	r8, r4, r3
 8006308:	f000 f878 	bl	80063fc <_sbrk_r>
 800630c:	4580      	cmp	r8, r0
 800630e:	d13a      	bne.n	8006386 <_malloc_r+0xd2>
 8006310:	6821      	ldr	r1, [r4, #0]
 8006312:	3503      	adds	r5, #3
 8006314:	1a6d      	subs	r5, r5, r1
 8006316:	f025 0503 	bic.w	r5, r5, #3
 800631a:	3508      	adds	r5, #8
 800631c:	2d0c      	cmp	r5, #12
 800631e:	bf38      	it	cc
 8006320:	250c      	movcc	r5, #12
 8006322:	4629      	mov	r1, r5
 8006324:	4638      	mov	r0, r7
 8006326:	f7ff ffa5 	bl	8006274 <sbrk_aligned>
 800632a:	3001      	adds	r0, #1
 800632c:	d02b      	beq.n	8006386 <_malloc_r+0xd2>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	442b      	add	r3, r5
 8006332:	6023      	str	r3, [r4, #0]
 8006334:	e00e      	b.n	8006354 <_malloc_r+0xa0>
 8006336:	6822      	ldr	r2, [r4, #0]
 8006338:	1b52      	subs	r2, r2, r5
 800633a:	d41e      	bmi.n	800637a <_malloc_r+0xc6>
 800633c:	2a0b      	cmp	r2, #11
 800633e:	d916      	bls.n	800636e <_malloc_r+0xba>
 8006340:	1961      	adds	r1, r4, r5
 8006342:	42a3      	cmp	r3, r4
 8006344:	6025      	str	r5, [r4, #0]
 8006346:	bf18      	it	ne
 8006348:	6059      	strne	r1, [r3, #4]
 800634a:	6863      	ldr	r3, [r4, #4]
 800634c:	bf08      	it	eq
 800634e:	6031      	streq	r1, [r6, #0]
 8006350:	5162      	str	r2, [r4, r5]
 8006352:	604b      	str	r3, [r1, #4]
 8006354:	4638      	mov	r0, r7
 8006356:	f104 060b 	add.w	r6, r4, #11
 800635a:	f000 f865 	bl	8006428 <__malloc_unlock>
 800635e:	f026 0607 	bic.w	r6, r6, #7
 8006362:	1d23      	adds	r3, r4, #4
 8006364:	1af2      	subs	r2, r6, r3
 8006366:	d0b6      	beq.n	80062d6 <_malloc_r+0x22>
 8006368:	1b9b      	subs	r3, r3, r6
 800636a:	50a3      	str	r3, [r4, r2]
 800636c:	e7b3      	b.n	80062d6 <_malloc_r+0x22>
 800636e:	6862      	ldr	r2, [r4, #4]
 8006370:	42a3      	cmp	r3, r4
 8006372:	bf0c      	ite	eq
 8006374:	6032      	streq	r2, [r6, #0]
 8006376:	605a      	strne	r2, [r3, #4]
 8006378:	e7ec      	b.n	8006354 <_malloc_r+0xa0>
 800637a:	4623      	mov	r3, r4
 800637c:	6864      	ldr	r4, [r4, #4]
 800637e:	e7b2      	b.n	80062e6 <_malloc_r+0x32>
 8006380:	4634      	mov	r4, r6
 8006382:	6876      	ldr	r6, [r6, #4]
 8006384:	e7b9      	b.n	80062fa <_malloc_r+0x46>
 8006386:	230c      	movs	r3, #12
 8006388:	603b      	str	r3, [r7, #0]
 800638a:	4638      	mov	r0, r7
 800638c:	f000 f84c 	bl	8006428 <__malloc_unlock>
 8006390:	e7a1      	b.n	80062d6 <_malloc_r+0x22>
 8006392:	6025      	str	r5, [r4, #0]
 8006394:	e7de      	b.n	8006354 <_malloc_r+0xa0>
 8006396:	bf00      	nop
 8006398:	20000274 	.word	0x20000274

0800639c <_realloc_r>:
 800639c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a0:	4680      	mov	r8, r0
 80063a2:	4614      	mov	r4, r2
 80063a4:	460e      	mov	r6, r1
 80063a6:	b921      	cbnz	r1, 80063b2 <_realloc_r+0x16>
 80063a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ac:	4611      	mov	r1, r2
 80063ae:	f7ff bf81 	b.w	80062b4 <_malloc_r>
 80063b2:	b92a      	cbnz	r2, 80063c0 <_realloc_r+0x24>
 80063b4:	f7ff ff12 	bl	80061dc <_free_r>
 80063b8:	4625      	mov	r5, r4
 80063ba:	4628      	mov	r0, r5
 80063bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c0:	f000 f838 	bl	8006434 <_malloc_usable_size_r>
 80063c4:	4284      	cmp	r4, r0
 80063c6:	4607      	mov	r7, r0
 80063c8:	d802      	bhi.n	80063d0 <_realloc_r+0x34>
 80063ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063ce:	d812      	bhi.n	80063f6 <_realloc_r+0x5a>
 80063d0:	4621      	mov	r1, r4
 80063d2:	4640      	mov	r0, r8
 80063d4:	f7ff ff6e 	bl	80062b4 <_malloc_r>
 80063d8:	4605      	mov	r5, r0
 80063da:	2800      	cmp	r0, #0
 80063dc:	d0ed      	beq.n	80063ba <_realloc_r+0x1e>
 80063de:	42bc      	cmp	r4, r7
 80063e0:	4622      	mov	r2, r4
 80063e2:	4631      	mov	r1, r6
 80063e4:	bf28      	it	cs
 80063e6:	463a      	movcs	r2, r7
 80063e8:	f7ff fed0 	bl	800618c <memcpy>
 80063ec:	4631      	mov	r1, r6
 80063ee:	4640      	mov	r0, r8
 80063f0:	f7ff fef4 	bl	80061dc <_free_r>
 80063f4:	e7e1      	b.n	80063ba <_realloc_r+0x1e>
 80063f6:	4635      	mov	r5, r6
 80063f8:	e7df      	b.n	80063ba <_realloc_r+0x1e>
	...

080063fc <_sbrk_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4d06      	ldr	r5, [pc, #24]	; (8006418 <_sbrk_r+0x1c>)
 8006400:	2300      	movs	r3, #0
 8006402:	4604      	mov	r4, r0
 8006404:	4608      	mov	r0, r1
 8006406:	602b      	str	r3, [r5, #0]
 8006408:	f7fa ff6c 	bl	80012e4 <_sbrk>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_sbrk_r+0x1a>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_sbrk_r+0x1a>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	2000027c 	.word	0x2000027c

0800641c <__malloc_lock>:
 800641c:	4801      	ldr	r0, [pc, #4]	; (8006424 <__malloc_lock+0x8>)
 800641e:	f000 b811 	b.w	8006444 <__retarget_lock_acquire_recursive>
 8006422:	bf00      	nop
 8006424:	20000280 	.word	0x20000280

08006428 <__malloc_unlock>:
 8006428:	4801      	ldr	r0, [pc, #4]	; (8006430 <__malloc_unlock+0x8>)
 800642a:	f000 b80c 	b.w	8006446 <__retarget_lock_release_recursive>
 800642e:	bf00      	nop
 8006430:	20000280 	.word	0x20000280

08006434 <_malloc_usable_size_r>:
 8006434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006438:	1f18      	subs	r0, r3, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	bfbc      	itt	lt
 800643e:	580b      	ldrlt	r3, [r1, r0]
 8006440:	18c0      	addlt	r0, r0, r3
 8006442:	4770      	bx	lr

08006444 <__retarget_lock_acquire_recursive>:
 8006444:	4770      	bx	lr

08006446 <__retarget_lock_release_recursive>:
 8006446:	4770      	bx	lr

08006448 <_init>:
 8006448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644a:	bf00      	nop
 800644c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644e:	bc08      	pop	{r3}
 8006450:	469e      	mov	lr, r3
 8006452:	4770      	bx	lr

08006454 <_fini>:
 8006454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006456:	bf00      	nop
 8006458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645a:	bc08      	pop	{r3}
 800645c:	469e      	mov	lr, r3
 800645e:	4770      	bx	lr
